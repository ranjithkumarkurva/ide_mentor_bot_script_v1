question_id,question_name,question_command_id,question_folder_location,question_tmp_folder_location,question_content,question_test_cases
fa54ed27d85c4ec0b01fab507acf49c8,nxtTrendzAuthentication2,RJSCPDJRRD,/home/workspace/reactjs/coding-practices/nxtTrendzAuthentication2,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzAuthentication2/src,,"Tests from 1NxtTrendzAuthenticationAndAuthorisationLoginRoute.js: it(':::RJSCPDJRRD_TEST_1:::When a user successfully login then the Cookies.set() method should be called:::5:::', async () => { it(':::RJSCPDJRRD_TEST_2:::When a user successfully login then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument and expiry days as the third argument:::5:::', async () => { it(':::RJSCPDJRRD_TEST_3:::When the ""/login"" is provided in the browser tab then the page should be navigated to LoginRoute and consists of an HTML input element with ""Username"" as a placeholder:::5:::', () => { it(':::RJSCPDJRRD_TEST_4:::LoginRoute should consist of an HTML input element with ""Password"" as a placeholder:::5:::', () => { it(':::RJSCPDJRRD_TEST_5:::LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPDJRRD_TEST_6:::LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPDJRRD_TEST_7:::LoginRoute should consist of an HTML label element with text content as ""USERNAME"":::5:::', () => { it(':::RJSCPDJRRD_TEST_8:::LoginRoute should consist of an HTML input element with type attribute value as ""text"":::5:::', () => { it(':::RJSCPDJRRD_TEST_9:::LoginRoute should consist of an HTML label element with text content as ""PASSWORD"":::5:::', () => { it(':::RJSCPDJRRD_TEST_10:::LoginRoute should consist of an HTML input element with type attribute value as ""password"":::5:::', () => { it(':::RJSCPDJRRD_TEST_11:::LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"":::5:::', () => { it(':::RJSCPDJRRD_TEST_12:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute:::5:::', async () => { it(':::RJSCPDJRRD_TEST_13:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPDJRRD_TEST_14:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPDJRRD_TEST_15:::When a non-empty password is provided and the login button is clicked with an empty username then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPDJRRD_TEST_16:::When an invalid username and password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPDJRRD_TEST_17:::When a valid username and invalid password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPDJRRD_TEST_18:::When a valid username and password are provided and the login button is clicked then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', async () => { it(':::RJSCPDJRRD_TEST_19:::When a valid username and password are provided and the login button is clicked then the history.replace() method should be called:::5:::', async () => { it(':::RJSCPDJRRD_TEST_20:::When a valid username and password are provided and the login button is clicked then the history.replace() method should be called with the argument ""/"":::5:::', async () => {  Tests from 2NxtTrendzAuthenticationAndAuthorisationHomeRoute.js: it(':::RJSCPDJRRD_TEST_21:::When the ""/"" is provided in the browser tab by an unauthenticated user then the page should be redirected to LoginRoute:::5:::', () => { it(':::RJSCPDJRRD_TEST_22:::When the ""/"" is provided in the browser tab by an authenticated user then the HomeRoute should be loaded and consists of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPDJRRD_TEST_23:::When the ""/products"" is provided in the browser tab by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPDJRRD_TEST_24:::When the ""/cart"" is provided in the browser tab by an unauthenticated user then the page should be redirected to LoginRoute:::5:::', () => { it(':::RJSCPDJRRD_TEST_25:::When the logout button is clicked then the Cookies.remove() method should be called:::5:::', async () => { it(':::RJSCPDJRRD_TEST_26:::When the logout button is clicked then the Cookies.remove() method should be called with the ""jwt_token"" string as an argument:::5:::', async () => { it(':::RJSCPDJRRD_TEST_27:::When the logout button is clicked then the history.replace() method should be called:::5:::', () => { it(':::RJSCPDJRRD_TEST_28:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPDJRRD_TEST_29:::When the logout button is clicked then the page should be navigated to LoginRoute:::5:::', async () => { it(':::RJSCPDJRRD_TEST_30:::When the Products link is clicked then the page should be navigated to ProductsRoute:::5:::', async () => { it(':::RJSCPDJRRD_TEST_31:::ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"":::5:::', async () => { it(':::RJSCPDJRRD_TEST_32:::When the Cart link is clicked then the page should be navigated to CartRoute:::5:::', async () => { it(':::RJSCPDJRRD_TEST_33:::CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"":::5:::', async () => { it(':::RJSCPDJRRD_TEST_34:::HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPDJRRD_TEST_35:::HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPDJRRD_TEST_36:::HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content:::5:::', () => { it(':::RJSCPDJRRD_TEST_37:::HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content:::5:::', () => { it(':::RJSCPDJRRD_TEST_38:::HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content:::5:::', () => { it(':::RJSCPDJRRD_TEST_39:::HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', () => { it(':::RJSCPDJRRD_TEST_40:::HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"":::5:::', () => { it(':::RJSCPDJRRD_TEST_41:::HomeRoute should consist of an HTML button element with ""Shop Now"" as text content:::5:::', () => { it(':::RJSCPDJRRD_TEST_42:::When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consists of an HTML image element with the given not found image URL as src and alt text as ""not found"":::5:::', async () => { '"
71374a7b9c964b088ed78950585f4b72,debuggingNxtTrendzAuthentication2,RJSCPPV10E,/home/workspace/reactjs/coding-practices/debuggingNxtTrendzAuthentication2,/home/workspace/.tmp/reactjs/coding-practices/debuggingNxtTrendzAuthentication2/src,,"Tests from 1NxtTrendzAuthenticationAndAuthorisationLoginRoute.js: it(':::RJSCPPV10E_TEST_1:::When a user successfully login then the Cookies.set() method should be called:::5:::', async () => { it(':::RJSCPPV10E_TEST_2:::When a user successfully login then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument and expiry days as the third argument:::5:::', async () => { it(':::RJSCPPV10E_TEST_3:::When the ""/login"" is provided in the browser tab then the page should be navigated to LoginRoute and consists of an HTML input element with ""Username"" as a placeholder:::5:::', () => { it(':::RJSCPPV10E_TEST_4:::LoginRoute should consist of an HTML input element with ""Password"" as a placeholder:::5:::', () => { it(':::RJSCPPV10E_TEST_5:::LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPPV10E_TEST_6:::LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPPV10E_TEST_7:::LoginRoute should consist of the HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPPV10E_TEST_8:::LoginRoute should consist of the USERNAME input field with type as ""text"":::5:::', () => { it(':::RJSCPPV10E_TEST_9:::LoginRoute should consist of the HTML input element with label text as ""PASSWORD"":::5:::', () => { it(':::RJSCPPV10E_TEST_10:::LoginRoute should consist of the PASSWORD input field with type as ""password"":::5:::', () => { it(':::RJSCPPV10E_TEST_11:::LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"":::5:::', () => { it(':::RJSCPPV10E_TEST_12:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute:::5:::', async () => { it(':::RJSCPPV10E_TEST_13:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPPV10E_TEST_14:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPPV10E_TEST_15:::When a non-empty password is provided and the login button is clicked with an empty username then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPPV10E_TEST_16:::When an invalid username and password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPPV10E_TEST_17:::When a valid username and invalid password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPPV10E_TEST_18:::When a valid username and password are provided and the login button is clicked then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', async () => { it(':::RJSCPPV10E_TEST_19:::When a valid username and password are provided and the login button is clicked then the history.replace() method should be called:::5:::', async () => { it(':::RJSCPPV10E_TEST_20:::When a valid username and password are provided and the login button is clicked then the history.replace() method should be called with the argument ""/"":::5:::', async () => {  Tests from 2NxtTrendzAuthenticationAndAuthorisationHomeRoute.js: it(':::RJSCPPV10E_TEST_21:::When the ""/"" is provided in the browser tab by an unauthenticated user then the page should be redirected to LoginRoute:::5:::', () => { it(':::RJSCPPV10E_TEST_22:::When the ""/"" is provided in the browser tab by an authenticated user then the HomeRoute should be loaded and consists of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPPV10E_TEST_23:::When the ""/products"" is provided in the browser tab by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPPV10E_TEST_24:::When the ""/cart"" is provided in the browser tab by an unauthenticated user then the page should be redirected to LoginRoute:::5:::', () => { it(':::RJSCPPV10E_TEST_25:::When the logout button is clicked then the Cookies.remove() method should be called:::5:::', () => { it(':::RJSCPPV10E_TEST_26:::When the logout button is clicked then the Cookies.remove() method should be called with the ""jwt_token"" string as an argument:::5:::', () => { it(':::RJSCPPV10E_TEST_27:::When the logout button is clicked then the history.replace() method should be called:::5:::', () => { it(':::RJSCPPV10E_TEST_28:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPPV10E_TEST_29:::When the logout button is clicked then the page should be navigated to LoginRoute:::5:::', async () => { it(':::RJSCPPV10E_TEST_30:::When the Products link is clicked then the page should be navigated to ProductsRoute:::5:::', async () => { it(':::RJSCPPV10E_TEST_31:::ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"":::5:::', async () => { it(':::RJSCPPV10E_TEST_32:::When the Cart link is clicked then the page should be navigated to CartRoute:::5:::', async () => { it(':::RJSCPPV10E_TEST_33:::CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"":::5:::', async () => { it(':::RJSCPPV10E_TEST_34:::HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPPV10E_TEST_35:::HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPPV10E_TEST_36:::HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content:::5:::', () => { it(':::RJSCPPV10E_TEST_37:::HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content:::5:::', () => { it(':::RJSCPPV10E_TEST_38:::HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content:::5:::', () => { it(':::RJSCPPV10E_TEST_39:::HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"":::5:::', () => { it(':::RJSCPPV10E_TEST_40:::HomeRoute should consist of an HTML button element with ""Shop Now"" as text content:::5:::', () => { it(':::RJSCPPV10E_TEST_41:::When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consists of an HTML image element with the given not found image URL as src and alt text as ""not found"":::5:::', async () => { '"
66c8877914a641e6826e0f0c590bd65a,nxtTrendzProtectedRoute,RJSCPGXAYP,/home/workspace/reactjs/coding-practices/nxtTrendzProtectedRoute,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzProtectedRoute/src,,"Tests from 1NxtTrendzProtectedRouteLoginRoute.js: it(':::RJSCPGXAYP_TEST_1:::When a user successfully login then the Cookies.set() method should be called:::5:::', async () => { it(':::RJSCPGXAYP_TEST_2:::When a user successfully login then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument and expiry days as the third argument:::5:::', async () => { it(':::RJSCPGXAYP_TEST_3:::LoginRoute should consist of an HTML input element with ""Username"" as a placeholder:::5:::', () => { it(':::RJSCPGXAYP_TEST_4:::LoginRoute should consist of an HTML input element with ""Password"" as a placeholder:::5:::', () => { it(':::RJSCPGXAYP_TEST_5:::LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPGXAYP_TEST_6:::LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPGXAYP_TEST_7:::LoginRoute should consist of an HTML label element with text content as ""USERNAME"":::5:::', () => { it(':::RJSCPGXAYP_TEST_8:::LoginRoute should consist of the USERNAME input field with type attribute value as ""text"":::5:::', () => { it(':::RJSCPGXAYP_TEST_9:::LoginRoute should consist of an HTML label element with text content as ""PASSWORD"":::5:::', () => { it(':::RJSCPGXAYP_TEST_10:::LoginRoute should consist of the PASSWORD input field with type attribute value as ""password"":::5:::', () => { it(':::RJSCPGXAYP_TEST_11:::LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"":::5:::', () => { it(':::RJSCPGXAYP_TEST_12:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute and consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', async () => { it(':::RJSCPGXAYP_TEST_13:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPGXAYP_TEST_14:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPGXAYP_TEST_15:::When a non-empty password is provided and the login button is clicked with an empty username then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPGXAYP_TEST_16:::When an invalid username and password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPGXAYP_TEST_17:::When a valid username and invalid password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPGXAYP_TEST_18:::When a valid username and password are provided and the login button is clicked then the page should be navigated to HomeRoute and consist of an HTML image element with alt text as ""clothes that get you noticed"" :::5:::', async () => { it(':::RJSCPGXAYP_TEST_19:::When a valid username and password are provided, the login button is clicked and the user has successfully logged in then the history.replace() method should be called:::5:::', async () => { it(':::RJSCPGXAYP_TEST_20:::When a valid username and password are provided, the login button is clicked and the user has successfully logged in then the history.replace() method should be called with the argument ""/"":::5:::', async () => {  Tests from 5NxtTrendzProtectedRouteNotFoundRoute.js: it(':::RJSCPGXAYP_TEST_42:::When the ""/bad-path"" is provided in the URL then the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt text as ""not found"":::5:::', async () => {  Tests from 2NxtTrendzProtectedRouteHomeRoute.js: it(':::RJSCPGXAYP_TEST_21:::When the ""/"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consist is an HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPGXAYP_TEST_22:::When the ""/"" is provided in the URL by an authenticated user then the HomeRoute should be loaded and consists of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPGXAYP_TEST_23:::HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPGXAYP_TEST_24:::HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPGXAYP_TEST_25:::HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content:::5:::', () => { it(':::RJSCPGXAYP_TEST_26:::HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content:::5:::', () => { it(':::RJSCPGXAYP_TEST_27:::HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content:::5:::', () => { it(':::RJSCPGXAYP_TEST_28:::HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', () => { it(':::RJSCPGXAYP_TEST_29:::HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"":::5:::', () => { it(':::RJSCPGXAYP_TEST_30:::HomeRoute should consist of an HTML button element with ""Shop Now"" as text content:::5:::', () => { it(':::RJSCPGXAYP_TEST_31:::When the Products link is clicked then the page should be navigated to ProductsRoute and consist of an HTML image element with the given image URL as src and alt text as ""products"":::5:::', async () => { it(':::RJSCPGXAYP_TEST_32:::When the Cart link is clicked then the page should be navigated to CartRoute and consist of an HTML image element with the given image URL as src and alt text as ""cart"":::5:::', async () => { it(':::RJSCPGXAYP_TEST_33:::When the logout button is clicked then the Cookies.remove() method should be called:::5:::', () => { it(':::RJSCPGXAYP_TEST_34:::When the logout button is clicked then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCPGXAYP_TEST_35:::When the logout button is clicked then the history.replace() method should be called:::5:::', () => { it(':::RJSCPGXAYP_TEST_36:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPGXAYP_TEST_37:::When the logout button is clicked then the page should be navigated to LoginRoute and consist of an HTML button element with ""Login"" as text content:::5:::', async () => {  Tests from 4NxtTrendzProtectedRouteCartRoute.js: it(':::RJSCPGXAYP_TEST_40:::When the ""/cart"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consist of an HTML input element with the label text as ""PASSWORD"":::5:::', () => { it(':::RJSCPGXAYP_TEST_41:::CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"":::5:::', async () => {  Tests from 3NxtTrendzProtectedRouteProductsRoute.js: it(':::RJSCPGXAYP_TEST_38:::When the ""/products"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPGXAYP_TEST_39:::ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"":::5:::', async () => { '"
f7e8c4a801ac48ecb69d809db7b067f2,debuggingNxtTrendzProtectedRoute,RJSCPH1TQT,/home/workspace/reactjs/coding-practices/debuggingNxtTrendzProtectedRoute,/home/workspace/.tmp/reactjs/coding-practices/debuggingNxtTrendzProtectedRoute/src,,"Tests from 1NxtTrendzProtectedRouteLoginRoute.js: it(':::RJSCPH1TQT_TEST_1:::When a user successfully login then the Cookies.set() method should be called:::5:::', async () => { it(':::RJSCPH1TQT_TEST_2:::When a user successfully login then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument and expiry days as the third argument:::5:::', async () => { it(':::RJSCPH1TQT_TEST_3:::LoginRoute should consist of an HTML input element with ""Username"" as a placeholder:::5:::', () => { it(':::RJSCPH1TQT_TEST_4:::LoginRoute should consist of an HTML input element with ""Password"" as a placeholder:::5:::', () => { it(':::RJSCPH1TQT_TEST_5:::LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPH1TQT_TEST_6:::LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPH1TQT_TEST_7:::LoginRoute should consist of an HTML label element with text content as ""USERNAME"":::5:::', () => { it(':::RJSCPH1TQT_TEST_8:::LoginRoute should consist of the HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPH1TQT_TEST_9:::LoginRoute should consist of the HTML input element with label text as ""PASSWORD"":::5:::', () => { it(':::RJSCPH1TQT_TEST_10:::LoginRoute should consist of the USERNAME input field with type as ""text"":::5:::', () => { it(':::RJSCPH1TQT_TEST_11:::LoginRoute should consist of the PASSWORD input field with type as ""password"":::5:::', () => { it(':::RJSCPH1TQT_TEST_12:::LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"":::5:::', () => { it(':::RJSCPH1TQT_TEST_13:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute and consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', async () => { it(':::RJSCPH1TQT_TEST_14:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPH1TQT_TEST_15:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPH1TQT_TEST_16:::When a non-empty password is provided and the login button is clicked with an empty username then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPH1TQT_TEST_17:::When an invalid username and password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPH1TQT_TEST_18:::When a valid username and invalid password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPH1TQT_TEST_19:::When a valid username and password are provided and the login button is clicked then the page should be navigated to HomeRoute and consist of an HTML image element with alt text as ""clothes that get you noticed"" :::5:::', async () => { it(':::RJSCPH1TQT_TEST_20:::When a valid username and password are provided, the login button is clicked and the user has successfully logged in then the history.replace() method should be called:::5:::', async () => { it(':::RJSCPH1TQT_TEST_21:::When a valid username and password are provided, the login button is clicked and the user has successfully logged in then the history.replace() method should be called with the argument ""/"":::5:::', async () => {  Tests from 5NxtTrendzProtectedRouteNotFoundRoute.js: it(':::RJSCPH1TQT_TEST_43:::When the ""/bad-path"" is provided in the URL then the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt text as ""not found"":::5:::', async () => {  Tests from 2NxtTrendzProtectedRouteHomeRoute.js: it(':::RJSCPH1TQT_TEST_22:::When the ""/"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consist is an HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPH1TQT_TEST_23:::When the ""/"" is provided in the URL by an authenticated user then the HomeRoute should be loaded and consists of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPH1TQT_TEST_24:::HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPH1TQT_TEST_25:::HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPH1TQT_TEST_26:::HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content:::5:::', () => { it(':::RJSCPH1TQT_TEST_27:::HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content:::5:::', () => { it(':::RJSCPH1TQT_TEST_28:::HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content:::5:::', () => { it(':::RJSCPH1TQT_TEST_29:::HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', () => { it(':::RJSCPH1TQT_TEST_30:::HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"":::5:::', () => { it(':::RJSCPH1TQT_TEST_31:::HomeRoute should consist of an HTML button element with ""Shop Now"" as text content:::5:::', () => { it(':::RJSCPH1TQT_TEST_32:::When the Products link is clicked then the page should be navigated to ProductsRoute and consist of an HTML image element with the given image URL as src and alt text as ""products"":::5:::', async () => { it(':::RJSCPH1TQT_TEST_33:::When the Cart link is clicked then the page should be navigated to CartRoute and consist of an HTML image element with the given image URL as src and alt text as ""cart"":::5:::', async () => { it(':::RJSCPH1TQT_TEST_34:::When the logout button is clicked then the Cookies.remove() method should be called:::5:::', () => { it(':::RJSCPH1TQT_TEST_35:::When the logout button is clicked then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCPH1TQT_TEST_36:::When the logout button is clicked then the history.replace() method should be called:::5:::', () => { it(':::RJSCPH1TQT_TEST_37:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPH1TQT_TEST_38:::When the logout button is clicked then the page should be navigated to LoginRoute and consist of an HTML button element with ""Login"" as text content:::5:::', async () => {  Tests from 4NxtTrendzProtectedRouteCartRoute.js: it(':::RJSCPH1TQT_TEST_41:::When the ""/cart"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consist of an HTML input element with the label text as ""PASSWORD"":::5:::', () => { it(':::RJSCPH1TQT_TEST_42:::CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"":::5:::', async () => {  Tests from 3NxtTrendzProtectedRouteProductsRoute.js: it(':::RJSCPH1TQT_TEST_39:::When the ""/products"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPH1TQT_TEST_40:::ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"":::5:::', async () => { '"
9416dedf1a354f5f9210ca433cd68780,nxtTrendzSpecificProductDetails,RJSCP809S4,/home/workspace/reactjs/coding-practices/nxtTrendzSpecificProductDetails,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzSpecificProductDetails/src,,"Tests from 1ProductDetailsAuth.js: it(':::RJSCP809S4_TEST_1:::When ""/product-details/:id"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', () => { it(':::RJSCP809S4_TEST_2:::When the HTTP GET request made in Product Item Details Route is unsuccessful, then the page should consist of the HTML image element with alt attribute value as ""failure view"" and src as the given Failure view image URL:::5:::', async () => { it(':::RJSCP809S4_TEST_3:::When the HTTP GET request made in Product Item Details Route is unsuccessful, the page should consist of the HTML main heading element with text content as ""Product Not Found"":::5:::', async () => { it(':::RJSCP809S4_TEST_4:::When the HTTP GET request made in Product Item Details Route is unsuccessful, the page should consist of the HTML button element with text content as ""Continue Shopping"":::5:::', async () => { it(':::RJSCP809S4_TEST_5:::When the HTTP GET request made in Product Item Details Route is unsuccessful and the ""Continue Shopping"" button is clicked, then the page should be navigated to Products Route:::5:::', async () => {  Tests from 2ProductDetails.js: it(':::RJSCP809S4_TEST_6:::Page should consist of at least two HTML list items and the similarProductsList received from the response should be rendered using a unique key as a prop for each similar product item respectively :::5:::', async () => { it(':::RJSCP809S4_TEST_7:::When the Product Item Details Route is opened, an HTTP GET request should be made to productDetailsApiUrl with the product ""id"" as path parameter:::5:::', async () => { it(':::RJSCP809S4_TEST_8:::When the Product Item Details Route is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCP809S4_TEST_9:::When the HTTP GET request in the Product Item Details Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""product"" and src as the value of key ""image_url"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_10:::When the HTTP GET request in the Product Item Details Route is successful, then the page should consist of the HTML main heading elements with text content as the value of the key ""title"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_11:::When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""price"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_12:::When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""rating"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_13:::When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""total_reviews"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_14:::When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""description"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_15:::When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""availability"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_16:::When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""brand"" from the productDetailsResponse received:::5:::', async () => { it(':::RJSCP809S4_TEST_17:::JS code implementation for Product Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package :::5:::', async () => { it(':::RJSCP809S4_TEST_18:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid attribute value as ""plus"":::5:::', async () => { it(':::RJSCP809S4_TEST_19:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid attribute value as ""minus"":::5:::', async () => { it(':::RJSCP809S4_TEST_20:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as ""1"" for quantity should be displayed:::5:::', async () => { it(':::RJSCP809S4_TEST_21:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with text content as ""ADD TO CART"" should be displayed:::5:::', async () => { it(':::RJSCP809S4_TEST_22:::When the HTML button with data-testid ""plus"" is clicked, the quantity should be incremented by one:::5:::', async () => { it(':::RJSCP809S4_TEST_23:::When the HTML button with data-testid ""minus"" is clicked, the quantity should be decremented by one:::5:::', async () => { it(':::RJSCP809S4_TEST_24:::When the HTML button with data-testid ""minus"" is clicked, the quantity should not be decremented below one:::5:::', async () => { it(':::RJSCP809S4_TEST_25:::Page should consist of at least two HTML unordered list elements to display the links in the Header and the list of similar products:::5:::', async () => { it(':::RJSCP809S4_TEST_26:::Page should consist of at least six HTML list items to display the links in Header and the list of similar products:::5:::', async () => { it(':::RJSCP809S4_TEST_27:::Page should consist of HTML image elements with alt text starting with ""similar product"" and src as the value of the key ""image_url"" received in the ""similar_products"" list received in the response:::5:::', async () => { it(':::RJSCP809S4_TEST_28:::Page should consist of HTML paragraph element with text content as the value of the key ""title"" received in the ""similar_products"" list received in the response:::5:::', async () => { it(':::RJSCP809S4_TEST_29:::Page should consist of HTML paragraph element with text content as the value of the key ""brand"" received in the ""similar_products"" list received in the response:::5:::', async () => { it(':::RJSCP809S4_TEST_30:::Page should consist of HTML paragraph element with text content as the value of the key ""rating"" received in the ""similar_products"" list received in the response:::5:::', async () => { it(':::RJSCP809S4_TEST_31:::Page should consist of HTML paragraph element with text content as the value of the key ""price"" received in the ""similar_products"" list received in the response:::5:::', async () => {  Tests from 7NotFound.js: it(':::RJSCP809S4_TEST_56:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt text as ""not found"" and src as the given not found image URL:::5:::', async () => {  Tests from 5Products.js: it(':::RJSCP809S4_TEST_41:::When ""/products"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', async () => { it(':::RJSCP809S4_TEST_42:::Products Route should consist of an HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCP809S4_TEST_43:::Products Route should consist of an HTML paragraph elements with text content as the value of the key ""name"" in each item from the categoryOptions provided:::5:::', async () => { it(':::RJSCP809S4_TEST_44:::Products Route should consist of HTML image elements with alt attribute value as ""rating {ratingId}"" and src as the value of key ""imageUrl"" of each item in ratingsList provided:::5:::', async () => { it(':::RJSCP809S4_TEST_45:::Products Route should consist of HTML button element with text content as ""Clear Filters"":::5:::', async () => { it(':::RJSCP809S4_TEST_46:::When Products Route is opened, an HTTP GET request should be made to productsApiUrl with query parameters ""title_search"", ""category"", and ""rating"" with initial values as empty strings:::5:::', async () => { it(':::RJSCP809S4_TEST_47:::When the HTTP GET request in the Products Route is successful, then the page should consist of the HTML main heading elements with text content as the value of the key ""title"" in each item from the productsResponse:::5:::', async () => { it(':::RJSCP809S4_TEST_48:::When a non-empty value is provided in an HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""title_search"":::5:::', async () => { it(':::RJSCP809S4_TEST_49:::When a category is clicked, an HTTP GET request should be made with the id of the category as the value to query parameter ""category"":::5:::', async () => { it(':::RJSCP809S4_TEST_50:::When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value to query parameter ""rating"":::5:::', async () => { it(':::RJSCP809S4_TEST_51:::When all the filters in Products Route are applied and the ""Clear Filters"" button is clicked, then an HTTP GET request should be made to productsApiUrl with initial values of the query parameters:::5:::', async () => { it(':::RJSCP809S4_TEST_52:::Each product card should be wrapped with the ""Link"" from react-router-dom:::5:::', async () => { it(':::RJSCP809S4_TEST_53:::When the HTTP GET request made in Products Route is unsuccessful, then the page should consist of the HTML image element with alt attribute value as ""products failure"" and src as the given Failure view image URL:::5:::', async () => { it(':::RJSCP809S4_TEST_54:::When the HTTP GET request made to productsApiUrl returns products list as empty, then no products view should be displayed:::5:::', async () => { it(':::RJSCP809S4_TEST_55:::When a Product card is clicked in Products Route, then the page should be navigated to the Product Item Details route with ""/product-details/:id"" in the URL path:::5:::', async () => {  Tests from 4Home.js: it(':::RJSCP809S4_TEST_34:::When ""/"" is provided in the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', () => { it(':::RJSCP809S4_TEST_35:::When ""/"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image URL:::5:::', () => { it(':::RJSCP809S4_TEST_36:::When the Products link is clicked then the page should be navigated to Products Route and consist of an HTML main heading element with text content as ""Category"":::5:::', async () => { it(':::RJSCP809S4_TEST_37:::When the Cart link is clicked, then the page should be navigated to Cart Route and consist of an HTML image element with alt as ""cart"" and src as given cart image URL:::5:::', async () => { it(':::RJSCP809S4_TEST_38:::When the logout button is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCP809S4_TEST_39:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCP809S4_TEST_40:::When the logout button is clicked then the page should be navigated to LoginRoute and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', async () => {  Tests from 3Login.js: it(':::RJSCP809S4_TEST_32:::When ""/login"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image url:::5:::', async () => { it(':::RJSCP809S4_TEST_33:::When the Login is successful, then the history.replace() method should be called with the argument ""/"":::5:::', async () => { '"
db1e8b6c20914948a0e78a16c6236a48,authenticationFunctionality,RJSCPFGWRF,/home/workspace/reactjs/coding-practices/authenticationFunctionality,/home/workspace/.tmp/reactjs/coding-practices/authenticationFunctionality/src,,"Tests from 2AuthenticationFunctionalityHomeRoute.js: it(':::RJSCPFGWRF_TEST_9:::HomeRoute should consist of a Link from react-router-dom with ""Home"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_10:::HomeRoute should consist of a Link from react-router-dom with ""About"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_11:::HomeRoute should consist of an HTML button element with ""Logout"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_12:::When an unauthenticated user tries to access the HomeRoute then the page should be redirected to LoginRoute and consist of an HTML heading element with ""Please Login"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_13:::When an authenticated user tries to access the HomeRoute then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content:::5:::', async () => { it(':::RJSCPFGWRF_TEST_14:::When the About link is clicked in the HomeRoute then the page should be navigated to AboutRoute and consist of an HTML heading element with ""About Route"" as text content:::5:::', async () => { it(':::RJSCPFGWRF_TEST_15:::When the logout button is clicked then the Cookies.remove() method should be called:::5:::', () => { it(':::RJSCPFGWRF_TEST_16:::When the logout button is clicked then the Cookies.remove() method should be called with the ""jwt_token"" string as an argument:::5:::', () => { it(':::RJSCPFGWRF_TEST_17:::When the logout button is clicked then the history.replace() method should be called:::5:::', () => { it(':::RJSCPFGWRF_TEST_18:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPFGWRF_TEST_19:::When the logout button is clicked then the page should be navigated to LoginRoute and consist of an HTML button element with ""Login with Sample Creds"" as text content:::5:::', async () => {  Tests from 3AuthenticationFunctionalityAboutRoute.js: it(':::RJSCPFGWRF_TEST_20:::AboutRoute should consist of a Link from react-router-dom with ""Home"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_21:::AboutRoute should consist of a Link from react-router-dom with ""About"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_22:::AboutRoute should consist of an HTML button element with ""Logout"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_23:::When an unauthenticated user tries to access the AboutRoute then the page should be redirected to LoginRoute and consist of an HTML heading element with ""Please Login"" as text content:::5:::', async () => { it(':::RJSCPFGWRF_TEST_24:::When an authenticated user tries to access the AboutRoute then the page should be navigated to AboutRoute and consist of an HTML heading element with ""About Route"" as text content:::5:::', async () => { it(':::RJSCPFGWRF_TEST_25:::When the Home link is clicked in the AboutRoute then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content:::5:::', async () => {  Tests from 1AuthenticationFunctionalityLoginRoute.js: it(':::RJSCPFGWRF_TEST_1:::LoginRoute should consist of an HTML heading element with ""Please Login"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_2:::LoginRoute should consist of an HTML button element with ""Login with Sample Creds"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_3:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content:::5:::', () => { it(':::RJSCPFGWRF_TEST_4:::When a user successfully login then the Cookies.set() method should be called:::5:::', async () => { it(':::RJSCPFGWRF_TEST_5:::When a user successfully login then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument and expiry days as the third argument:::5:::', async () => { it(':::RJSCPFGWRF_TEST_6:::When the login button is clicked in the LoginRoute and the user has successfully logged in then the history.replace() method should be called:::5:::', async () => { it(':::RJSCPFGWRF_TEST_7:::When the login button is clicked in the LoginRoute and the user has successfully logged in then the history.replace() method should be called with the argument ""/"":::5:::', async () => { it(':::RJSCPFGWRF_TEST_8:::When the login button is clicked in the LoginRoute then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content on a successful login:::5:::', async () => {  Tests from 4AuthenticationFunctionalityNotFoundRoute.js: it(':::RJSCPFGWRF_TEST_26:::When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consist of an HTML heading element with ""Not Found"" as text content:::5:::', async () => { '"
1e62c1b2755b41f5b18153eeb17d835a,nxtTrendzAuthentication,RJSCPRKKSP,/home/workspace/reactjs/coding-practices/nxtTrendzAuthentication,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzAuthentication/src,,"Tests from 2NxtTrendzAuthenticationHomeRoute.js: it(':::RJSCPRKKSP_TEST_19:::When the ""/"" is provided in the browser tab then the page should be navigated to HomeRoute and consists of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPRKKSP_TEST_20:::HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPRKKSP_TEST_21:::HomeRoute should consist of an HTML list item with ""Home"" as text content:::5:::', () => { it(':::RJSCPRKKSP_TEST_22:::HomeRoute should consist of an HTML list item with ""Products"" as text content:::5:::', () => { it(':::RJSCPRKKSP_TEST_23:::HomeRoute should consist of an HTML list item with ""Cart"" as text content:::5:::', () => { it(':::RJSCPRKKSP_TEST_24:::HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', () => { it(':::RJSCPRKKSP_TEST_25:::HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"":::5:::', () => { it(':::RJSCPRKKSP_TEST_26:::HomeRoute should consist of an HTML button element with ""Shop Now"" as text content:::5:::', () => { it(':::RJSCPRKKSP_TEST_27:::When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consists of an HTML image element with the given not found image URL as src and alt text as ""not found"":::5:::', async () => {  Tests from 1NxtTrendzAuthenticationLoginRoute.js: it(':::RJSCPRKKSP_TEST_1:::When the ""/login"" is provided in the browser tab then the page should be navigated to LoginRoute and consists of an HTML input element with ""Username"" as a placeholder:::5:::', () => { it(':::RJSCPRKKSP_TEST_2:::LoginRoute should consist of an HTML input element with ""Password"" as a placeholder:::5:::', () => { it(':::RJSCPRKKSP_TEST_3:::LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"":::5:::', () => { it(':::RJSCPRKKSP_TEST_4:::LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPRKKSP_TEST_5:::LoginRoute should consist of an HTML label element with text content as ""USERNAME"":::5:::', () => { it(':::RJSCPRKKSP_TEST_6:::LoginRoute should consist of an HTML input element with type attribute value as ""text"":::5:::', () => { it(':::RJSCPRKKSP_TEST_7:::LoginRoute should consist of an HTML label element with text content as ""PASSWORD"":::5:::', () => { it(':::RJSCPRKKSP_TEST_8:::LoginRoute should consist of an HTML input element with type attribute value as ""password"":::5:::', () => { it(':::RJSCPRKKSP_TEST_9:::LoginRoute should consist of an HTML button element with ""Login"" as text content:::5:::', () => { it(':::RJSCPRKKSP_TEST_10:::LoginRoute should consist of a ""Login"" button with type attribute value as ""submit"":::5:::', () => { it(':::RJSCPRKKSP_TEST_11:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPRKKSP_TEST_12:::When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPRKKSP_TEST_13:::When a non-empty password is provided and the login button is clicked with an empty username then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPRKKSP_TEST_14:::When an invalid username and password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPRKKSP_TEST_15:::When a valid username and invalid password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPRKKSP_TEST_16:::When a valid username and password are provided and the login button is clicked then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content:::5:::', async () => { it(':::RJSCPRKKSP_TEST_17:::When a valid username and password are provided and the login button is clicked then the history.replace() method should be called:::5:::', async () => { it(':::RJSCPRKKSP_TEST_18:::When a valid username and password are provided and the login button is clicked then the history.replace() method should be called with the argument ""/"":::5:::', async () => { '"
9ea2af4f8eac48f393b74b2f7fea93c6,nxtTrendzProductsFiltersGroup,RJSCPHSVU2,/home/workspace/reactjs/coding-practices/nxtTrendzProductsFilterGroup,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzProductsFilterGroup/src,,"Tests from 3HomeRoute.js: it(':::RJSCPHSVU2_TEST_17:::When ""/"" is provided in the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', () => { it(':::RJSCPHSVU2_TEST_18:::When ""/"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image URL:::5:::', () => { it(':::RJSCPHSVU2_TEST_19:::When the Products link is clicked then the page should be navigated to Products Route and consist of an HTML main heading element with text content as ""Category"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_20:::When the Cart link is clicked, then the page should be navigated to Cart Route and consist of an HTML image element with alt as ""cart"" and src as given cart image URL:::5:::', async () => { it(':::RJSCPHSVU2_TEST_21:::When the logout button is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCPHSVU2_TEST_22:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_23:::When the logout button is clicked then the page should be navigated to LoginRoute and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', async () => {  Tests from 1ProductsPage.js: it(':::RJSCPHSVU2_TEST_1:::When ""/products"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url:::5:::', async () => { it(':::RJSCPHSVU2_TEST_2:::Products Route should consist of an HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_3:::Products Route should consist of an HTML main heading element with text content as ""Category"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_4:::Products Route should consist of HTML paragraph elements with text content as the values of the key ""name"" in each item from the categoryOptions provided:::5:::', async () => { it(':::RJSCPHSVU2_TEST_5:::Products Route should consist of HTML image elements with alt attribute value as ""rating {ratingId}"" and src as the value of key ""imageUrl"" of each item in ratingsList provided:::5:::', async () => { it(':::RJSCPHSVU2_TEST_6:::Products Route should consist of HTML button element with text content as ""Clear Filters"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_7:::When Products Route is opened, an HTTP GET request should be made to productsApiUrl with query parameters ""title_search"", ""category"", and ""rating"" with initial values as empty strings:::5:::', async () => { it(':::RJSCPHSVU2_TEST_8:::When the HTTP GET request in the Products Route is successful, then the page should consist of the HTML main heading elements with text content as the value of the key ""title"" in each item from the productsResponse:::5:::', async () => { it(':::RJSCPHSVU2_TEST_9:::When a non-empty value is provided in an HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""title_search"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_10:::When a category is clicked, an HTTP GET request should be made with the id of the category as the value to query parameter ""category"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_11:::When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value to query parameter ""rating"":::5:::', async () => { it(':::RJSCPHSVU2_TEST_12:::When all the filters in Products Route are applied and the ""Clear Filters"" button is clicked, then an HTTP GET request should be made to productsApiUrl with initial values of the query parameters:::5:::', async () => { it(':::RJSCPHSVU2_TEST_13:::When the HTTP GET request made in Products Route is unsuccessful, then the page should consist of the HTML image element with alt attribute value as ""products failure"" and src as the given Failure view image URL:::5:::', async () => { it(':::RJSCPHSVU2_TEST_14:::When the HTTP GET request made to productsApiUrl returns products list as empty, then no products view should be displayed:::5:::', async () => {  Tests from 2LoginRoute.js: it(':::RJSCPHSVU2_TEST_15:::When ""/login"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image url:::5:::', async () => { it(':::RJSCPHSVU2_TEST_16:::When the Login is successful, then the history.replace() method should be called with the argument ""/"":::5:::', async () => {  Tests from 5NotFoundRoute.js: it(':::RJSCPHSVU2_TEST_24:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt text as ""not found"" and src as the given not found image URL:::5:::', async () => { '"
d595dd02c5d04330bd3dac0275b02d8a,nxtTrendzCartFeatures,RJSCPFOQQB,/home/workspace/reactjs/coding-practices/Nxt-Trendz---Cart-Features,/home/workspace/.tmp/reactjs/coding-practices/Nxt-Trendz---Cart-Features/src,,"Tests from 6cart.js: it(':::RJSCPFOQQB_TEST_56:::When a product is added to the cart, the CartRoute should consist of at least two HTML list items and the cartList should be rendered using a unique key as a prop for each cart item:::5:::', () => { it(':::RJSCPFOQQB_TEST_57:::When the ""/cart"" is provided in the URL by an unauthenticated user then the page should be navigated to LoginRoute and consist of an HTML image element with the given login image URL as src and alt as ""website login"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_58:::When the cart is empty, the CartRoute should consist of an HTML image element with alt attribute value as ""cart empty"" and src attribute value as URL for cart empty image:::5:::', () => { it(':::RJSCPFOQQB_TEST_59:::When the cart is empty, the CartRoute should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', () => { it(':::RJSCPFOQQB_TEST_60:::When the cart is empty, the CartRoute should consist of an HTML button element with text content as ""Shop Now"":::5:::', () => { it(':::RJSCPFOQQB_TEST_61:::When the cart is empty, the CartRoute should consist of an HTML button element with text content as ""Shop Now"" and it is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPFOQQB_TEST_62:::When the ""Shop Now"" button is clicked then the page should be navigated to ProductsRoute and then the products received in the HTTP GET request response should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_63:::When the products are added to the cart, the count of the cart items should be displayed in the header after the cart link:::5:::', () => { it(':::RJSCPFOQQB_TEST_64:::When a product is added to the cart, the CartRoute should consist of an HTML main heading element with text content as ""My Cart"":::5:::', () => { it(':::RJSCPFOQQB_TEST_65:::When a product is added to the cart, the CartRoute should consist of an HTML button element with text content as ""Remove All"":::5:::', () => { it(':::RJSCPFOQQB_TEST_66:::When a product is added to the cart, the CartRoute should consist of an HTML unordered list to display the list of cart items:::5:::', () => { it(':::RJSCPFOQQB_TEST_67:::When a product is added to the cart, the page should consist of an HTML image element with alt attribute value as ""title"" of the product added in the cart and src value as ""imageUrl"" for product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_68:::When a product is added to the cart, the page should consist of an HTML element with text content as ""title"" of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_69:::When a product is added to the cart, then the page should consist of an HTML element with text content as ""brand"" of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_70:::JSX code implementation for Cart Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package :::5:::', async () => { it(':::RJSCPFOQQB_TEST_71:::When a product is added to the cart, the page should consist of an HTML button element with data-testid ""plus"" should be displayed:::5:::', () => { it(':::RJSCPFOQQB_TEST_72:::When a product is added to the cart, the page should consist of an HTML button element with data-testid ""minus"" should be displayed:::5:::', () => { it(':::RJSCPFOQQB_TEST_73:::When a product is added to the cart, the page should consist of an HTML paragraph element with text content as quantity of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_74:::When a product is added to the cart, then the page should consist of an HTML paragraph element with text content as price of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_75:::JSX code implementation for Cart Item Details should use ""AiFillCloseCircle"" from the react-icons package :::5:::', async () => { it(':::RJSCPFOQQB_TEST_76:::When a product is added to the cart, then the page should consist of an HTML button element with data-testid ""remove"" should be displayed :::5:::', () => { it(':::RJSCPFOQQB_TEST_77:::When a product is added to the cart, then the page should consist of an HTML main heading element with text content as ""Order Total"":::5:::', () => { it(':::RJSCPFOQQB_TEST_78:::When a product is added to the cart, then the page should consist of an HTML main heading element with text content as total amount of the items in the cart:::5:::', () => { it(':::RJSCPFOQQB_TEST_79:::When a product is added to the cart, then the page should consist of an HTML paragraph element with cart items count as ""1"" and ending with ""Items in cart"":::5:::', () => { it(':::RJSCPFOQQB_TEST_80:::When multiple products are added to the cart, then the page should consist of an HTML paragraph element with text content as the number of items in the cart :::5:::', () => { it(':::RJSCPFOQQB_TEST_81:::When a product is added to the cart, the page should consist of an HTML button element with text content as ""Checkout"":::5:::', () => { it(':::RJSCPFOQQB_TEST_82:::When the HTML button element with data-testid ""plus"" is clicked, then the ""incrementCartItemQuantity"" function in ""CartContext"" should be called:::5:::', async () => { it(':::RJSCPFOQQB_TEST_83:::When the HTML button element with data-testid ""minus"" is clicked, then the ""decrementCartItemQuantity"" function in ""CartContext"" should be called:::5:::', async () => { it(':::RJSCPFOQQB_TEST_84:::When the HTML button element with data-testid ""plus"" is clicked, the quantity should be incremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_85:::When the HTML button element with data-testid ""minus"" is clicked, the quantity should be decremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_86:::When the HTML button element with data-testid ""minus"" is clicked, if the quantity is one then the item should be removed from the cart list and the page should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_87:::When the HTML button element with data-testid ""plus"" is clicked, the price of the cart item should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_88:::When the HTML button element with data-testid ""minus"" is clicked, the price of the cart item should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_89:::When the HTML button element with data-testid ""plus"" is clicked, the order total amount should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_90:::When the HTML button element with data-testid ""minus"" is clicked, the order total amount should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_91:::When a product is added multiple times in to the cart, the quantity of the respective item should be incremented accordingly:::5:::', async () => { it(':::RJSCPFOQQB_TEST_92:::When a product is added multiple times in to the cart, the count of the cart items displayed in the header should not be incremented:::5:::', async () => { it(':::RJSCPFOQQB_TEST_93:::When multiple products are added to the cart, the count of the cart items should be updated in the header after the cart link:::5:::', () => { it(':::RJSCPFOQQB_TEST_94:::When the remove icon is clicked, then the ""removeCartItem"" function in ""CartContext"" should be called:::5:::', () => { it(':::RJSCPFOQQB_TEST_95:::When the remove icon is clicked, then the respective cart item should be removed from the cart items list and the page should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_96:::When the ""Remove All"" button is clicked, then the ""removeAllCartItems"" function in ""CartContext"" should be called:::5:::', () => { it(':::RJSCPFOQQB_TEST_97:::When the ""Remove all"" button is clicked, then all the items should be removed from the cart list and the page should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', async () => {  Tests from 2ProductDetails.js: it(':::RJSCPFOQQB_TEST_6:::When HTTP GET request made to productDetailsApiUrl is successful, then the page should consist of at least two HTML list items, and the similar products list should be rendered using a unique key as a prop for each similar product item:::5:::', async () => { it(':::RJSCPFOQQB_TEST_7:::When the Product Item Details Route is accessed, an HTTP GET request should be made to productDetailsApiUrl with the product id as path parameter:::5:::', async () => { it(':::RJSCPFOQQB_TEST_8:::When the Product Item Details Route is accessed, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the API call is in progress:::5:::', async () => { it(':::RJSCPFOQQB_TEST_9:::When the HTTP GET request in the Product Item Details route is successful, an HTML image element with alt as ""product"" and src equal to the value of the key ""image_url"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_10:::When the HTTP GET request in the Product Item Details route is successful, an HTML main heading element with text content as the value of the key ""title"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_11:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""price"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_12:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""rating"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_13:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""total_reviews"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_14:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""description"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_15:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""availability"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_16:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""brand"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_17:::JSX code implementation for Product Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package :::5:::', async () => { it(':::RJSCPFOQQB_TEST_18:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""plus"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_19:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""minus"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_20:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as ""1"" for quantity should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_21:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with text content as ""ADD TO CART"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_22:::When the HTML button with data-testid ""plus"" is clicked, the quantity should be incremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_23:::When the HTML button with data-testid ""minus"" is clicked, the quantity should be decremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_24:::When the HTML button with data-testid ""minus"" is clicked, the quantity should not be decremented below one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_25:::Page should consist of at least two HTML unordered list elements to display the links in the Header and the list of similar products:::5:::', async () => { it(':::RJSCPFOQQB_TEST_26:::Page should consist of at least six HTML list items to display the links in Header and the list of similar products:::5:::', async () => { it(':::RJSCPFOQQB_TEST_27:::Page should consist of HTML image elements with alt text starting with ""similar product"" and src as the value of the key ""image_url"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_28:::Page should consist of HTML paragraph element with text content as the value of the key ""title"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_29:::Page should consist of HTML paragraph element with text content as the value of the key ""brand"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_30:::Page should consist of HTML paragraph element with text content as the value of the key ""rating"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_31:::Page should consist of HTML paragraph element with text content as the value of the key ""price"" received in the similar_products list received in the response:::5:::', async () => {  Tests from 7NotFound.js: it(':::RJSCPFOQQB_TEST_98:::When the ""/bad-path"" is provided in the URL then the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt as ""not found"":::5:::', async () => {  Tests from 5Products.js: it(':::RJSCPFOQQB_TEST_41:::When the ""/products"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt as ""website login"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_42:::Products Route should consist of HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_43:::Products Route should consist of HTML paragraph elements with text content equal to the ""name"" value of each item in categoryOptions provided:::5:::', async () => { it(':::RJSCPFOQQB_TEST_44:::Products Route should consist of HTML image elements with alt value equal to ""rating {ratingId}"" and src value equal to ""imageUrl"" value of each item in ratingsList provided:::5:::', async () => { it(':::RJSCPFOQQB_TEST_45:::Products Route should consist of HTML button element with text content as ""Clear Filters"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_46:::When Products Route is opened, an HTTP GET request should be made to productsApiUrl with all the query parameters and their initial values:::5:::', async () => { it(':::RJSCPFOQQB_TEST_47:::When the Products Route is opened, then the products received in the HTTP GET request response should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_48:::When a value is provided in the HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""title_search"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_49:::When a category is clicked, an HTTP GET request should be made with the id of the category as the value to query parameter ""category"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_50:::When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value to query parameter ""rating"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_51:::When all the filters in Products Route are applied and the ""Clear Filters"" button is clicked, then an HTTP GET request should be made to productsApiUrl with initial values of the query parameters:::5:::', async () => { it(':::RJSCPFOQQB_TEST_52:::Each product card should be wrapped with the Link from react-router-dom:::5:::', async () => { it(':::RJSCPFOQQB_TEST_53:::When the HTTP GET request made is unsuccessful, then failure view should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_54:::When the HTTP GET request made to productsApiUrl returns products list as empty, then no products view should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_55:::When a Product card is clicked in Products Route, then the page should be navigated to the Product Item Details route with ""/product-details/:id"" in the URL path:::5:::', async () => {  Tests from 1ProductDetailsAuth.js: it(':::RJSCPFOQQB_TEST_1:::When the ""/product-details/:id"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPFOQQB_TEST_2:::When the HTTP GET request made in the Product Item Details Route gets the response status as 404, then an HTML image element with alt as ""error view"" and src as the URL for the error view image should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_3:::When the HTTP GET request made in Product Item Details Route gets the response status as 404, then an HTML main heading element with text content as ""Product Not Found"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_4:::When the HTTP GET request made in Product Item Details Route gets the response status as 404, then an HTML button element with text content as ""Continue Shopping"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_5:::When the HTTP GET request made in Product Item Details Route gets the response status as 404, and ""Continue Shopping"" button is clicked, then the page should be navigated to ProductsRoute:::5:::', async () => {  Tests from 4Home.js: it(':::RJSCPFOQQB_TEST_34:::When the ""/"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consist is an HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPFOQQB_TEST_35:::When the ""/"" is provided in the URL by an authenticated user then the page should be navigated to HomeRoute and consist of an HTML image element with the given home image URL as src and alt as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPFOQQB_TEST_36:::When the Products link is clicked then the page should be navigated to ProductsRoute and consist of an HTML main heading element with text content as ""Category"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_37:::When the Cart link is clicked then the page should be navigated to CartRoute and consist of an HTML image element with the given image URL as src and alt as ""cart"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_38:::When the logout button is clicked then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCPFOQQB_TEST_39:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_40:::When the logout button is clicked then the page should be navigated to LoginRoute and consist of an HTML button element with ""Login"" as text content:::5:::', async () => {  Tests from 3Login.js: it(':::RJSCPFOQQB_TEST_32:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute and consist of an HTML image element with the given image URL as src and alt as ""clothes that get you noticed"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_33:::When a valid username and password are provided, the login button is clicked and the user has successfully logged in then the history.replace() method should be called with the argument ""/"":::5:::', async () => { '"
d595dd02c5d04330bd3dac0275b02d8a,nxtTrendzCartFeatures,RJSCPFOQQB,/home/workspace/reactjs/coding-practices/nxtTrendzCartFeatures,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzCartFeatures/src,,"Tests from 6cart.js: it(':::RJSCPFOQQB_TEST_56:::When a product is added to the cart, the CartRoute should consist of at least two HTML list items and the cartList should be rendered using a unique key as a prop for each cart item:::5:::', () => { it(':::RJSCPFOQQB_TEST_57:::When the ""/cart"" is provided in the URL by an unauthenticated user then the page should be navigated to LoginRoute and consist of an HTML image element with the given login image URL as src and alt as ""website login"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_58:::When the cart is empty, the CartRoute should consist of an HTML image element with alt attribute value as ""cart empty"" and src attribute value as URL for cart empty image:::5:::', () => { it(':::RJSCPFOQQB_TEST_59:::When the cart is empty, the CartRoute should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', () => { it(':::RJSCPFOQQB_TEST_60:::When the cart is empty, the CartRoute should consist of an HTML button element with text content as ""Shop Now"":::5:::', () => { it(':::RJSCPFOQQB_TEST_61:::When the cart is empty, the CartRoute should consist of an HTML button element with text content as ""Shop Now"" and it is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPFOQQB_TEST_62:::When the ""Shop Now"" button is clicked then the page should be navigated to ProductsRoute and then the products received in the HTTP GET request response should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_63:::When the products are added to the cart, the count of the cart items should be displayed in the header after the cart link:::5:::', () => { it(':::RJSCPFOQQB_TEST_64:::When a product is added to the cart, the CartRoute should consist of an HTML main heading element with text content as ""My Cart"":::5:::', () => { it(':::RJSCPFOQQB_TEST_65:::When a product is added to the cart, the CartRoute should consist of an HTML button element with text content as ""Remove All"":::5:::', () => { it(':::RJSCPFOQQB_TEST_66:::When a product is added to the cart, the CartRoute should consist of an HTML unordered list to display the list of cart items:::5:::', () => { it(':::RJSCPFOQQB_TEST_67:::When a product is added to the cart, the page should consist of an HTML image element with alt attribute value as ""title"" of the product added in the cart and src value as ""imageUrl"" for product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_68:::When a product is added to the cart, the page should consist of an HTML element with text content as ""title"" of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_69:::When a product is added to the cart, then the page should consist of an HTML element with text content as ""brand"" of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_70:::JSX code implementation for Cart Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package :::5:::', async () => { it(':::RJSCPFOQQB_TEST_71:::When a product is added to the cart, the page should consist of an HTML button element with data-testid ""plus"" should be displayed:::5:::', () => { it(':::RJSCPFOQQB_TEST_72:::When a product is added to the cart, the page should consist of an HTML button element with data-testid ""minus"" should be displayed:::5:::', () => { it(':::RJSCPFOQQB_TEST_73:::When a product is added to the cart, the page should consist of an HTML paragraph element with text content as quantity of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_74:::When a product is added to the cart, then the page should consist of an HTML paragraph element with text content as price of the product added:::5:::', () => { it(':::RJSCPFOQQB_TEST_75:::JSX code implementation for Cart Item Details should use ""AiFillCloseCircle"" from the react-icons package :::5:::', async () => { it(':::RJSCPFOQQB_TEST_76:::When a product is added to the cart, then the page should consist of an HTML button element with data-testid ""remove"" should be displayed :::5:::', () => { it(':::RJSCPFOQQB_TEST_77:::When a product is added to the cart, then the page should consist of an HTML main heading element with text content as ""Order Total"":::5:::', () => { it(':::RJSCPFOQQB_TEST_78:::When a product is added to the cart, then the page should consist of an HTML main heading element with text content as total amount of the items in the cart:::5:::', () => { it(':::RJSCPFOQQB_TEST_79:::When a product is added to the cart, then the page should consist of an HTML paragraph element with cart items count as ""1"" and ending with ""Items in cart"":::5:::', () => { it(':::RJSCPFOQQB_TEST_80:::When multiple products are added to the cart, then the page should consist of an HTML paragraph element with text content as the number of items in the cart :::5:::', () => { it(':::RJSCPFOQQB_TEST_81:::When a product is added to the cart, the page should consist of an HTML button element with text content as ""Checkout"":::5:::', () => { it(':::RJSCPFOQQB_TEST_82:::When the HTML button element with data-testid ""plus"" is clicked, then the ""incrementCartItemQuantity"" function in ""CartContext"" should be called:::5:::', async () => { it(':::RJSCPFOQQB_TEST_83:::When the HTML button element with data-testid ""minus"" is clicked, then the ""decrementCartItemQuantity"" function in ""CartContext"" should be called:::5:::', async () => { it(':::RJSCPFOQQB_TEST_84:::When the HTML button element with data-testid ""plus"" is clicked, the quantity should be incremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_85:::When the HTML button element with data-testid ""minus"" is clicked, the quantity should be decremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_86:::When the HTML button element with data-testid ""minus"" is clicked, if the quantity is one then the item should be removed from the cart list and the page should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_87:::When the HTML button element with data-testid ""plus"" is clicked, the price of the cart item should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_88:::When the HTML button element with data-testid ""minus"" is clicked, the price of the cart item should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_89:::When the HTML button element with data-testid ""plus"" is clicked, the order total amount should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_90:::When the HTML button element with data-testid ""minus"" is clicked, the order total amount should be updated accordingly :::5:::', async () => { it(':::RJSCPFOQQB_TEST_91:::When a product is added multiple times in to the cart, the quantity of the respective item should be incremented accordingly:::5:::', async () => { it(':::RJSCPFOQQB_TEST_92:::When a product is added multiple times in to the cart, the count of the cart items displayed in the header should not be incremented:::5:::', async () => { it(':::RJSCPFOQQB_TEST_93:::When multiple products are added to the cart, the count of the cart items should be updated in the header after the cart link:::5:::', () => { it(':::RJSCPFOQQB_TEST_94:::When the remove icon is clicked, then the ""removeCartItem"" function in ""CartContext"" should be called:::5:::', () => { it(':::RJSCPFOQQB_TEST_95:::When the remove icon is clicked, then the respective cart item should be removed from the cart items list and the page should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_96:::When the ""Remove All"" button is clicked, then the ""removeAllCartItems"" function in ""CartContext"" should be called:::5:::', () => { it(':::RJSCPFOQQB_TEST_97:::When the ""Remove all"" button is clicked, then all the items should be removed from the cart list and the page should consist of an HTML main heading element with text content as ""Your Cart Is Empty"":::5:::', async () => {  Tests from 2ProductDetails.js: it(':::RJSCPFOQQB_TEST_6:::When HTTP GET request made to productDetailsApiUrl is successful, then the page should consist of at least two HTML list items, and the similar products list should be rendered using a unique key as a prop for each similar product item:::5:::', async () => { it(':::RJSCPFOQQB_TEST_7:::When the Product Item Details Route is accessed, an HTTP GET request should be made to productDetailsApiUrl with the product id as path parameter:::5:::', async () => { it(':::RJSCPFOQQB_TEST_8:::When the Product Item Details Route is accessed, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the API call is in progress:::5:::', async () => { it(':::RJSCPFOQQB_TEST_9:::When the HTTP GET request in the Product Item Details route is successful, an HTML image element with alt as ""product"" and src equal to the value of the key ""image_url"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_10:::When the HTTP GET request in the Product Item Details route is successful, an HTML main heading element with text content as the value of the key ""title"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_11:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""price"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_12:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""rating"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_13:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""total_reviews"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_14:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""description"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_15:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""availability"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_16:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key ""brand"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_17:::JSX code implementation for Product Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package :::5:::', async () => { it(':::RJSCPFOQQB_TEST_18:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""plus"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_19:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""minus"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_20:::When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as ""1"" for quantity should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_21:::When the HTTP GET request in the Product Item Details route is successful, an HTML button element with text content as ""ADD TO CART"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_22:::When the HTML button with data-testid ""plus"" is clicked, the quantity should be incremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_23:::When the HTML button with data-testid ""minus"" is clicked, the quantity should be decremented by one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_24:::When the HTML button with data-testid ""minus"" is clicked, the quantity should not be decremented below one:::5:::', async () => { it(':::RJSCPFOQQB_TEST_25:::Page should consist of at least two HTML unordered list elements to display the links in the Header and the list of similar products:::5:::', async () => { it(':::RJSCPFOQQB_TEST_26:::Page should consist of at least six HTML list items to display the links in Header and the list of similar products:::5:::', async () => { it(':::RJSCPFOQQB_TEST_27:::Page should consist of HTML image elements with alt text starting with ""similar product"" and src as the value of the key ""image_url"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_28:::Page should consist of HTML paragraph element with text content as the value of the key ""title"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_29:::Page should consist of HTML paragraph element with text content as the value of the key ""brand"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_30:::Page should consist of HTML paragraph element with text content as the value of the key ""rating"" received in the similar_products list received in the response:::5:::', async () => { it(':::RJSCPFOQQB_TEST_31:::Page should consist of HTML paragraph element with text content as the value of the key ""price"" received in the similar_products list received in the response:::5:::', async () => {  Tests from 7NotFound.js: it(':::RJSCPFOQQB_TEST_98:::When the ""/bad-path"" is provided in the URL then the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt as ""not found"":::5:::', async () => {  Tests from 5Products.js: it(':::RJSCPFOQQB_TEST_41:::When the ""/products"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt as ""website login"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_42:::Products Route should consist of HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_43:::Products Route should consist of HTML paragraph elements with text content equal to the ""name"" value of each item in categoryOptions provided:::5:::', async () => { it(':::RJSCPFOQQB_TEST_44:::Products Route should consist of HTML image elements with alt value equal to ""rating {ratingId}"" and src value equal to ""imageUrl"" value of each item in ratingsList provided:::5:::', async () => { it(':::RJSCPFOQQB_TEST_45:::Products Route should consist of HTML button element with text content as ""Clear Filters"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_46:::When Products Route is opened, an HTTP GET request should be made to productsApiUrl with all the query parameters and their initial values:::5:::', async () => { it(':::RJSCPFOQQB_TEST_47:::When the Products Route is opened, then the products received in the HTTP GET request response should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_48:::When a value is provided in the HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""title_search"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_49:::When a category is clicked, an HTTP GET request should be made with the id of the category as the value to query parameter ""category"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_50:::When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value to query parameter ""rating"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_51:::When all the filters in Products Route are applied and the ""Clear Filters"" button is clicked, then an HTTP GET request should be made to productsApiUrl with initial values of the query parameters:::5:::', async () => { it(':::RJSCPFOQQB_TEST_52:::Each product card should be wrapped with the Link from react-router-dom:::5:::', async () => { it(':::RJSCPFOQQB_TEST_53:::When the HTTP GET request made is unsuccessful, then failure view should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_54:::When the HTTP GET request made to productsApiUrl returns products list as empty, then no products view should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_55:::When a Product card is clicked in Products Route, then the page should be navigated to the Product Item Details route with ""/product-details/:id"" in the URL path:::5:::', async () => {  Tests from 1ProductDetailsAuth.js: it(':::RJSCPFOQQB_TEST_1:::When the ""/product-details/:id"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consists of an HTML image element with the given login image URL as src and alt text as ""website login"":::5:::', () => { it(':::RJSCPFOQQB_TEST_2:::When the HTTP GET request made in the Product Item Details Route gets the response status as 404, then an HTML image element with alt as ""error view"" and src as the URL for the error view image should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_3:::When the HTTP GET request made in Product Item Details Route gets the response status as 404, then an HTML main heading element with text content as ""Product Not Found"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_4:::When the HTTP GET request made in Product Item Details Route gets the response status as 404, then an HTML button element with text content as ""Continue Shopping"" should be displayed:::5:::', async () => { it(':::RJSCPFOQQB_TEST_5:::When the HTTP GET request made in Product Item Details Route gets the response status as 404, and ""Continue Shopping"" button is clicked, then the page should be navigated to ProductsRoute:::5:::', async () => {  Tests from 4Home.js: it(':::RJSCPFOQQB_TEST_34:::When the ""/"" is provided in the URL by an unauthenticated user then the page should be redirected to LoginRoute and consist is an HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPFOQQB_TEST_35:::When the ""/"" is provided in the URL by an authenticated user then the page should be navigated to HomeRoute and consist of an HTML image element with the given home image URL as src and alt as ""clothes that get you noticed"":::5:::', () => { it(':::RJSCPFOQQB_TEST_36:::When the Products link is clicked then the page should be navigated to ProductsRoute and consist of an HTML main heading element with text content as ""Category"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_37:::When the Cart link is clicked then the page should be navigated to CartRoute and consist of an HTML image element with the given image URL as src and alt as ""cart"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_38:::When the logout button is clicked then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCPFOQQB_TEST_39:::When the logout button is clicked then the history.replace() method should be called with the argument ""/login"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_40:::When the logout button is clicked then the page should be navigated to LoginRoute and consist of an HTML button element with ""Login"" as text content:::5:::', async () => {  Tests from 3Login.js: it(':::RJSCPFOQQB_TEST_32:::When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute and consist of an HTML image element with the given image URL as src and alt as ""clothes that get you noticed"":::5:::', async () => { it(':::RJSCPFOQQB_TEST_33:::When a valid username and password are provided, the login button is clicked and the user has successfully logged in then the history.replace() method should be called with the argument ""/"":::5:::', async () => { '"
c3fde2fb66224cacaa59b0d3b0e16ada,hamburgerMenu,RJSCPN3E00,/home/workspace/reactjs/coding-practices/hamburgerMenu,/home/workspace/.tmp/reactjs/coding-practices/hamburgerMenu/src,,"Tests from About.js: it(':::RJSCPN3E00_TEST_1:::About Route should consist of an HTML image element with alt attribute value as ""website logo"":::5:::', () => { it(':::RJSCPN3E00_TEST_2:::About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given logo URL is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPN3E00_TEST_3:::Home Route should consist of an HTML button element with data-testid as ""hamburgerIconButton"":::5:::', () => { it(':::RJSCPN3E00_TEST_4:::About Route should consist of an HTML image element with alt attribute value as ""about"":::5:::', () => { it(':::RJSCPN3E00_TEST_5:::When the website logo in the Header is clicked, then the page should be navigated to Home Route:::5:::', async () => { it(':::RJSCPN3E00_TEST_6:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of Popup from reactjs-popup:::5:::', () => { it(':::RJSCPN3E00_TEST_7:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"":::5:::', async () => { it(':::RJSCPN3E00_TEST_8:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page should consist of the HTML unordered list:::5:::', () => { it(':::RJSCPN3E00_TEST_9:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page should consist of at least two HTML list items:::5:::', () => { it(':::RJSCPN3E00_TEST_10:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page consists of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPN3E00_TEST_11:::About Route should consist of an HTML image element with src as the given About image URL:::5:::', () => { it(':::RJSCPN3E00_TEST_12:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page consists of an HTML element with text content as ""About"" wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPN3E00_TEST_13:::About Route should consist of an HTML image element with src as the given logo URL:::5:::', () => { it(':::RJSCPN3E00_TEST_14:::When the Home link in the Popup is clicked, then the page should be navigated to Home Route:::5:::', () => { it(':::RJSCPN3E00_TEST_15:::When the HTML button element with data-testid attribute value as ""closeButton"" is clicked inside the Popup, then the page should not consist of Popup from reactjs-popup:::5:::', async () => {  Tests from NotFound.js: it(':::RJSCPN3E00_TEST_34:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt as ""not found"" and src as the given Not Found Image URL:::5:::', () => { it(':::RJSCPN3E00_TEST_35:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Lost Your Way?"":::5:::', () => { it(':::RJSCPN3E00_TEST_36:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""Sorry, we cannot find that page. You will find lots to explore on the home page"":::5:::', () => {  Tests from Home.js: it(':::RJSCPN3E00_TEST_16:::Home Route should consist of an HTML image element with alt attribute value as ""website logo"":::5:::', () => { it(':::RJSCPN3E00_TEST_17:::Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given logo URL is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPN3E00_TEST_18:::Home Route should consist of an HTML button element with data-testid as ""hamburgerIconButton"":::5:::', () => { it(':::RJSCPN3E00_TEST_19:::JS code code implementation for Header Component should use ""GiHamburgerMenu"" from the react-icons package:::5:::', () => { it(':::RJSCPN3E00_TEST_20:::JS code code implementation for Header Component should use ""IoMdClose"" from the react-icons package:::5:::', () => { it(':::RJSCPN3E00_TEST_21:::JS code code implementation for Header Component should use ""AiFillHome"" from the react-icons package:::5:::', () => { it(':::RJSCPN3E00_TEST_22:::JS code code implementation for Header Component should use ""BsInfoCircleFill"" from the react-icons package:::5:::', () => { it(':::RJSCPN3E00_TEST_23:::Home Route should consist of an HTML image element with alt attribute value as ""home"":::5:::', () => { it(':::RJSCPN3E00_TEST_24:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of Popup from reactjs-popup:::5:::', () => { it(':::RJSCPN3E00_TEST_25:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"":::5:::', async () => { it(':::RJSCPN3E00_TEST_26:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page should consist of the HTML unordered list:::5:::', () => { it(':::RJSCPN3E00_TEST_27:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page should consist of at least two HTML list items:::5:::', () => { it(':::RJSCPN3E00_TEST_28:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page consists of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPN3E00_TEST_29:::Home Route should consist of an HTML image element with src as the given logo URL:::5:::', () => { it(':::RJSCPN3E00_TEST_30:::When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked"", then the page consists of an HTML element with text content as ""About"" wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPN3E00_TEST_31:::Home Route should consist of an HTML image element with src as the given Home image URL:::5:::', () => { it(':::RJSCPN3E00_TEST_32:::When the About link in the Popup is clicked, then the page should be navigated to About Route:::5:::', () => { it(':::RJSCPN3E00_TEST_33:::When the HTML button element with data-testid attribute value as ""closeButton"" is clicked inside the Popup, then the page should not consist of Popup from reactjs-popup:::5:::', async () => { '"
39dcf4999626454687b7ef780aefb2d1,navbarWithContext,RJSCPCMYYO,/home/workspace/reactjs/coding-practices/navbarWithContext,/home/workspace/.tmp/reactjs/coding-practices/navbarWithContext/src,,"Tests from AboutRouteTests.js: it(':::RJSCPCMYYO_TEST_1:::About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as given website logo URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_2:::Page should consist of an HTML unordered list to display the list of nav items:::5:::', () => { it(':::RJSCPCMYYO_TEST_3:::Page should consists of at least two HTML list items:::5:::', () => { it(':::RJSCPCMYYO_TEST_4:::Page should consists of ""Home"" text wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPCMYYO_TEST_5:::Page should consists of ""About"" text wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPCMYYO_TEST_6:::About Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given dark theme image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_7:::About Route should consist of an HTML image element with alt attribute value as ""about"" and src as the given light theme About image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_8:::About Route should consist of an HTML main heading element with text content as ""About"":::5:::', () => { it(':::RJSCPCMYYO_TEST_9:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the About Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given light theme image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_10:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the AboutRoute should consist of an HTML image element with alt attribute value as ""about"" and src as the given dark theme About image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_11:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the AboutRoute should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given dark theme website logo URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_12:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the page should consists of ""Home"" and ""About"" texts wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPCMYYO_TEST_13:::Page should consist of an HTML button element with data-testid ""theme"" should be displayed for theme image:::5:::', () => { it(':::RJSCPCMYYO_TEST_14:::When the theme button is clicked then the ""toggleTheme"" method in ""ThemeContext"" should be called:::5:::', () => { it(':::RJSCPCMYYO_TEST_15:::When the theme button is clicked then the About Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the light theme image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_16:::When the theme button is clicked then the About Route should consist of an HTML image element with alt attribute value as ""about"" and src as the dark theme about image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_17:::When the theme button is clicked then the About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the dark theme website logo URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_18:::When the Home link is clicked then the page should be navigated to Home Route:::5:::', () => { it(':::RJSCPCMYYO_TEST_19:::When the Home link is clicked then the page should be navigated to Home Route and the theme should be persisted:::5:::', () => { it(':::RJSCPCMYYO_TEST_20:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consists of an HTML main heading element with text content as ""Lost Your Way"":::5:::', () => { it(':::RJSCPCMYYO_TEST_21:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consists of an HTML paragraph element with text content as ""We cannot seem to find the page"":::5:::', () => { it(':::RJSCPCMYYO_TEST_22:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consists of an HTML image element with alt attribute value as ""not found"" and src as the given not found image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_23:::when the theme button is clicked in the NotFound Route then the page should consist of an HTML image element with alt attribute value as ""website logo"" and src as the dark theme website logo URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_24:::When the theme button is clicked in the NotFound Route then the page should consist of an HTML image element with alt attribute value as ""theme"" and src as the light theme image URL:::5:::', () => {  Tests from HomeRouteTests.js: it(':::RJSCPCMYYO_TEST_25:::Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_26:::Page should consist of an HTML unordered list to display the list of nav items:::5:::', () => { it(':::RJSCPCMYYO_TEST_27:::Page should consists of at least two HTML list items:::5:::', () => { it(':::RJSCPCMYYO_TEST_28:::Page should consists of ""Home"" text wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPCMYYO_TEST_29:::Page should consists of ""About"" text wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPCMYYO_TEST_30:::Home Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given dark theme image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_31:::Home Route should consist of an HTML image element with alt attribute value as ""home"" and src as the given light Home image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_32:::Home Route should consist of an HTML main heading element with text content as ""Home"":::5:::', () => { it(':::RJSCPCMYYO_TEST_33:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the Home Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given light theme image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_34:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the Home Route should consist of an HTML image element with alt attribute value as ""home"" and src as the given dark home image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_35:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given dark theme website logo:::5:::', () => { it(':::RJSCPCMYYO_TEST_36:::When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the page should consists of ""Home"" and ""About"" texts wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPCMYYO_TEST_37:::Page should consist of an HTML button element with data-testid as ""theme"" should be displayed for theme button:::5:::', () => { it(':::RJSCPCMYYO_TEST_38:::When the theme button is clicked then the ""toggleTheme"" method in ""ThemeContext"" should be called:::5:::', () => { it(':::RJSCPCMYYO_TEST_39:::When the theme button is clicked then the Home Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given light theme image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_40:::When the theme button is clicked then the Home Route should consist of an HTML image element with alt attribute value as ""home"" and src as the given dark home image URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_41:::When the theme button is clicked then the Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo URL:::5:::', () => { it(':::RJSCPCMYYO_TEST_42:::When the About link is clicked then the page should be navigated to About Route:::5:::', () => { it(':::RJSCPCMYYO_TEST_43:::When the About link is clicked then the page should be navigated to About Route and the theme should be persisted:::5:::', () => { '"
2b5a476d1e5f4a15bd666d5ad3ce3084,musicPlaylist,RJSCE7HLQ1,/home/workspace/reactjs/coding-practices/musicPlaylist,/home/workspace/.tmp/reactjs/coding-practices/musicPlaylist/src,,"Tests from App.js: it(':::RJSCE7HLQ1_TEST_1:::Page should consist of at least two HTML list items rendered using a unique key as a prop to display trackItem from the initialTracksList:::10:::', () => { it(':::RJSCE7HLQ1_TEST_2:::Page should consist of an HTML main heading element with text content as ""Ed Sheeran"":::5:::', () => { it(':::RJSCE7HLQ1_TEST_3:::Page should consist of an HTML paragraph element with text content as ""Singer"":::5:::', () => { it(':::RJSCE7HLQ1_TEST_4:::Page should consist of an HTML main heading element with text content as ""Songs Playlist"":::5:::', () => { it(':::RJSCE7HLQ1_TEST_5:::Page should consist of an HTML input element with type attribute value as ""search"":::10:::', () => { it(':::RJSCE7HLQ1_TEST_6:::Page should consist of an HTML input element with placeholder text as ""Search"":::5:::', () => { it(':::RJSCE7HLQ1_TEST_7:::Page should consist of an HTML unordered list element to display the trackItems:::5:::', () => { it(':::RJSCE7HLQ1_TEST_8:::Page should consist of at least ten HTML list elements to display the list of trackItems:::5:::', () => { it(':::RJSCE7HLQ1_TEST_9:::Page should consist of an HTML image element with alt attribute value as ""track"" and src as the given image URL:::5:::', () => { it(':::RJSCE7HLQ1_TEST_10:::Page should consist of an HTML paragraph elements with text content as the values of the key ""name"" in each trackItem of given initialTracksList:::10:::', () => { it(':::RJSCE7HLQ1_TEST_11:::Page should consist of an HTML paragraph elements with text content as the values of the key ""genre"" in each trackItem of given initialTracksList:::5:::', () => { it(':::RJSCE7HLQ1_TEST_12:::Page should consist of an HTML paragraph elements with text content as the values of the key ""duration"" in each trackItem of given initialTracksList:::5:::', () => { it(':::RJSCE7HLQ1_TEST_13:::Page should consist of at least ten HTML button elements with data-testid as ""delete"":::5:::', () => { it(':::RJSCE7HLQ1_TEST_14:::When a non-empty value is provided in the search input element, then that text should be displayed in the search input element:::10:::', () => { it(':::RJSCE7HLQ1_TEST_15:::When a non-empty value is provided in the search input element, the trackItems should be filtered irrespective of the case:::10:::', () => { it(':::RJSCE7HLQ1_TEST_16:::When a non-empty value is provided in the search input element, and no track item includes the value given in the search input, then the page should consist of an HTML paragraph element with text content as ""No Songs Found"" :::10:::', () => { it(':::RJSCE7HLQ1_TEST_17:::When an HTML button element with data-testid as ""delete"" of a track item is clicked, then the respective track item should be deleted:::10:::', () => { it(':::RJSCE7HLQ1_TEST_18:::When all track items are deleted, then the page should consist of an HTML paragraph element with text content as ""No Songs Found"":::10:::', () => { '"
7a44ad4dbab34e12bd239ab81096d4ce,projectsShowcase,RJSCEQHZ58,/home/workspace/reactjs/coding-practices/projectsShowcase,/home/workspace/.tmp/reactjs/coding-practices/projectsShowcase/src,,"Tests from App.js: it(':::RJSCEQHZ58_TEST_1:::Page should consist of at least two HTML list items and the categories list and the projects list received in the API response should be rendered using a unique key as a prop for each category option and project item respectively:::10:::', async () => { it(':::RJSCEQHZ58_TEST_2:::Page should consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL:::5:::', async () => { it(':::RJSCEQHZ58_TEST_3:::Page should initially consist of an HTML select element with a value attribute as ""ALL"":::5:::', async () => { it(':::RJSCEQHZ58_TEST_4:::Page should consist of HTML option elements with value attribute as the value of the key ""id"" from categoriesList provided:::10:::', async () => { it(':::RJSCEQHZ58_TEST_5:::Page should consist of the HTML option elements with text content as the value of the key ""displayText"" from categoriesList provided:::5:::', async () => { it(':::RJSCEQHZ58_TEST_6:::When the page is opened, then it should initially consist of an HTML container element with data-testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCEQHZ58_TEST_7:::When the page is opened, then an HTTP GET request should be made to projectsApiUrl:::5:::', async () => { it(':::RJSCEQHZ58_TEST_8:::When the page is opened initially, then an HTTP GET request should be made to projectsApiUrl with query parameter as ""category"" and its value as ""ALL"":::10:::', async () => { it(':::RJSCEQHZ58_TEST_9:::When the HTTP GET request is successful, then the page should consist of at least an HTML unordered list element to display the list of projects:::5:::', async () => { it(':::RJSCEQHZ58_TEST_10:::When the HTTP GET request is successful, then the page should consist of the HTML list items to display the project item received in the projects API response:::5:::', async () => { it(':::RJSCEQHZ58_TEST_11:::When the HTTP GET request is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""name"" and ""image_url"" in projects received in the projects API response respectively:::10:::', async () => { it(':::RJSCEQHZ58_TEST_12:::When the HTTP GET request is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""name"" in projects received in the projects API response:::5:::', async () => { it(':::RJSCEQHZ58_TEST_13:::When a category option is selected in the HTML select element, then the selected option should be updated as the value of the HTML select element:::10:::', async () => { it(':::RJSCEQHZ58_TEST_14:::When a category option is selected in the HTML select element, then an HTTP GET request should be made to projectsApiUrl with query parameter as ""category"" and its value as the value of the key ""id"" of the active category option:::15:::', async () => { it(':::RJSCEQHZ58_TEST_15:::When the HTTP GET request is unsuccessful, then the page should consist of an HTML image element with alt as ""failure view"" and src as the given failure view image URL:::5:::', async () => { it(':::RJSCEQHZ58_TEST_16:::When the HTTP GET request is unsuccessful, then the page should consist of an HTML main heading element with text content as ""Oops! Something Went Wrong"":::5:::', async () => { it(':::RJSCEQHZ58_TEST_17:::When the HTTP GET request is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""We cannot seem to find the page you are looking for"":::5:::', async () => { it(':::RJSCEQHZ58_TEST_18:::When the HTTP GET request is unsuccessful, then the page should consist of an HTML button element with text content as ""Retry"":::5:::', async () => { it(':::RJSCEQHZ58_TEST_19:::When the HTTP GET request is unsuccessful, and the Retry button is clicked, then an HTTP GET request should be made to projectsApiUrl:::10:::', async () => { '"
b99021bb23b24467a0c88e50e2123934,myTasks,RJSCEUU4M8,/home/workspace/reactjs/coding-practices/myTasks,/home/workspace/.tmp/reactjs/coding-practices/myTasks/src,,"Tests from App.js: it(':::RJSCEUU4M8_TEST_1:::When a task is added page should consist of at least two HTML list items and the tagsList should be rendered using a unique key as a prop for each tagItem:::10:::', () => { it(':::RJSCEUU4M8_TEST_2:::Page should consist of HTML main heading element with text content as ""Create a task"":::5:::', () => { it(':::RJSCEUU4M8_TEST_3:::Page should consist of HTML form element to display all the input elements and button element:::5:::', () => { it(':::RJSCEUU4M8_TEST_4:::Page should consist of the HTML input element with the label as ""Task"" and type as ""text"" with ""Enter the task here"" as a placeholder:::10:::', () => { it(':::RJSCEUU4M8_TEST_5:::Page should consist of HTML select element with the label as ""Tags"" and initial value should contain the value of key ""optionId"" from the first item provided in the tagsList:::10:::', () => { it(':::RJSCEUU4M8_TEST_6:::Page should consist of HTML option elements with value equal to the value of the key ""optionId"" in the tagsList provided:::10:::', () => { it(':::RJSCEUU4M8_TEST_7:::Page should consist of HTML option elements with text content equal to the value of the key ""displayText"" in the tagsList provided:::10:::', () => { it(':::RJSCEUU4M8_TEST_8:::Page should consist of HTML button element with text content as ""Add Task"":::10:::', () => { it(':::RJSCEUU4M8_TEST_9:::Page should consist of HTML main heading element with text content as ""Tags"":::5:::', () => { it(':::RJSCEUU4M8_TEST_10:::Page should consist of HTML list items to display the given list of tags in the tagsList:::5:::', () => { it(':::RJSCEUU4M8_TEST_11:::Page should consist of HTML Button elements with text content equal to the value of the key ""displayText"" in the tagsList provided:::10:::', () => { it(':::RJSCEUU4M8_TEST_12:::Page should consist of HTML main heading element with text content as ""Tasks"":::5:::', () => { it(':::RJSCEUU4M8_TEST_13::: When the tasks list is empty then page should consist of HTML paragraph element with text content as ""No Tasks Added Yet"":::5:::', () => { it(':::RJSCEUU4M8_TEST_14:::When a non-empty value is provided for the HTML input element with the label text ""Task"", the value provided should be updated in the value of the input element:::10:::', () => { it(':::RJSCEUU4M8_TEST_15:::When a value is provided for the HTML select element with the label text ""Tags"", the value provided should be updated in the value of the select element:::10:::', () => { it(':::RJSCEUU4M8_TEST_16:::When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, the values inside the HTML input and select elements should be updated to their initial values:::10:::', () => { it(':::RJSCEUU4M8_TEST_17:::When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, an HTML list item should be added:::10:::', () => { it(':::RJSCEUU4M8_TEST_18:::When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, then the page should consist of at least 2 HTML unordered list elements to display the list of tags and tasks :::10:::', () => { it(':::RJSCEUU4M8_TEST_19:::When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, an HTML list item should be added to the tasks list with a unique id imported from the UUID package :::10:::', () => { it(':::RJSCEUU4M8_TEST_20:::When a non-empty value is provided for the HTML input element with label text ""Task"" and the ""Add Task"" button is clicked, an HTML paragraph element with text content as ""Task"" provided should be displayed:::10:::', () => { it(':::RJSCEUU4M8_TEST_21:::When a value is provided for the HTML select element with label text ""Tags"", and the ""Add Task"" button is clicked, an HTML paragraph element with text content ""Tag"" provided should be displayed:::10:::', () => { it(':::RJSCEUU4M8_TEST_22:::When a tag in the list of tags is active, then the respective tasks should be filtered and displayed using HTML paragraph elements accordingly:::10:::', () => { it(':::RJSCEUU4M8_TEST_23:::When a tag in the list of tags is active, then the tag name of the respective tasks should be displayed using HTML paragraph elements:::10:::', () => { it(':::RJSCEUU4M8_TEST_24:::When no tag in the list of tags is inactive, then all the tasks should be displayed:::10:::', () => { '"
ca8c24707fd84518a1ec1d26115f0acd,gradientGenerator,RJSCP13IIH,/home/workspace/reactjs/coding-practices/gradientGenerator,/home/workspace/.tmp/reactjs/coding-practices/gradientGenerator/src,,"Tests from App.js: it(':::RJSCP13IIH_TEST_1:::Page should consist of at least two HTML list items and the gradientDirectionsList should be rendered using a unique key as a prop for each gradientDirection item respectively:::5:::', () => { it(':::RJSCP13IIH_TEST_2:::Page should consist of an HTML main heading element with text content starting with ""Generate a CSS Color Gradient"":::5:::', () => { it(':::RJSCP13IIH_TEST_3:::Page should consist of HTML paragraph element with text content as ""Choose Direction"":::5:::', () => { it(':::RJSCP13IIH_TEST_4:::Page should consist of HTML unordered list element to display the list of gradient directions:::5:::', () => { it(':::RJSCP13IIH_TEST_5:::Page should consist of at least four HTML list items to display the gradient directions:::5:::', () => { it(':::RJSCP13IIH_TEST_6:::Page should consist of HTML button elements with text content as values of the key ""displayText"" of each item in gradientDirectionsList provided:::5:::', () => { it(':::RJSCP13IIH_TEST_7:::Page should consist of HTML paragraph element with text content as ""Pick the Colors"":::5:::', () => { it(':::RJSCP13IIH_TEST_8:::Page should initially consist of HTML paragraph element with text content as ""#8ae323"":::5:::', () => { it(':::RJSCP13IIH_TEST_9:::Page should initially consist of HTML paragraph element with text content as ""#014f7b"":::5:::', () => { it(':::RJSCP13IIH_TEST_10:::Page should consist of two HTML input elements with HTML type attribute and value as ""color"":::5:::', () => { it(':::RJSCP13IIH_TEST_11:::Page should consist of HTML button element with text content as ""Generate"":::5:::', () => { it(':::RJSCP13IIH_TEST_12:::When a value is provided in the first HTML input element with type attribute value as ""color"", then the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCP13IIH_TEST_13:::When a value is provided in the second HTML input element with type attribute value as ""color"", then the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCP13IIH_TEST_14:::Page should consist of HTML container element with data-testid as ""gradientGenerator"":::5:::', () => { it(':::RJSCP13IIH_TEST_15:::The HTML container element with data-testid as ""gradientGenerator"" should initially have the linear gradient direction as ""top"":::5:::', () => { it(':::RJSCP13IIH_TEST_16:::When the gradient direction button is clicked, the active gradient direction button should have CSS property opacity with the value of 1:::5:::', () => { it(':::RJSCP13IIH_TEST_17:::When the gradient direction button is inactive, it should have CSS property opacity with the value of 0.5:::5:::', () => { it(':::RJSCP13IIH_TEST_18:::When the gradient direction and ""Generate"" button are clicked, then the active direction should be applied as the direction to the linear-gradient for the HTML container element with data-testid as ""gradientGenerator"":::5:::', () => { it(':::RJSCP13IIH_TEST_19:::When a value is provided in the first HTML input element with type attribute value as ""color"" and the ""Generate"" button is clicked, then the provided color should be applied as the first color to the linear-gradient for the HTML container element with data-testid as ""gradientGenerator"":::5:::', () => { it(':::RJSCP13IIH_TEST_20:::When a value is provided in the second HTML input element with type attribute value as ""color"" and the ""Generate"" button is clicked, then the provided color should be applied as the second color to the linear-gradient for the HTML container element with data-testid as ""gradientGenerator"":::5:::', () => { '"
972df3a82de4427fbc6b760bbf2564c6,multilingualGreetings,RJSCP42KBV,/home/workspace/reactjs/coding-practices/multilingualGreetings,/home/workspace/.tmp/reactjs/coding-practices/multilingualGreetings/src,,"Tests from App.js: it(':::RJSCP42KBV_TEST_1:::The page should consist of at least one HTML list item and the languageGreetingsList should be rendered using a unique key as a prop for each languageGreetingsItem :::10:::', () => { it(':::RJSCP42KBV_TEST_2:::The page should consist of HTML main heading element with text content as ""Multilingual Greetings"":::5:::', () => { it(':::RJSCP42KBV_TEST_3:::The page should consist of HTML unordered list element to display the languageGreetingsItems :::5:::', () => { it(':::RJSCP42KBV_TEST_4:::The Page should consist of at least three HTML list items to display the given list of languageGreetingsItems:::5:::', () => { it(':::RJSCP42KBV_TEST_5:::The Page should consist of at least three HTML button elements that have the text content with the value of the key ""buttonText"" provided in languageGreetingsList:::10:::', () => { it(':::RJSCP42KBV_TEST_6:::The page should consist of an HTML image element, which initially has alt text with the value of key ""imageAltText"" from the first item  provided in languageGreetingsList:::5:::', () => { it(':::RJSCP42KBV_TEST_7:::The page should consist of an HTML image element, which initially has src with the value of key ""imageUrl"" from the first item  provided in languageGreetingsList:::5:::', () => { it(':::RJSCP42KBV_TEST_8:::When a languageGreetingsItem is clicked, then the corresponding greeting image should have alt text with the value of key ""imageAltText"" provided in languageGreetingsList:::10:::', () => { it(':::RJSCP42KBV_TEST_9:::When a languageGreetingsItem is clicked, then the corresponding greeting image should have src with the value of key ""imageUrl"" provided in languageGreetingsList:::10:::', () => { '"
972df3a82de4427fbc6b760bbf2564c6,multilingualGreetings,RJSCP42KBV,/home/workspace/reactjs/coding-practices/multilingualGreetings,/home/workspace/.tmp/reactjs/coding-practices/multilingualGreetings/src,,"Tests from App.js: it(':::RJSCP42KBV_TEST_1:::The page should consist of at least one HTML list item and the languageGreetingsList should be rendered using a unique key as a prop for each languageGreetingsItem :::10:::', () => { it(':::RJSCP42KBV_TEST_2:::The page should consist of HTML main heading element with text content as ""Multilingual Greetings"":::5:::', () => { it(':::RJSCP42KBV_TEST_3:::The page should consist of HTML unordered list element to display the languageGreetingsItems :::5:::', () => { it(':::RJSCP42KBV_TEST_4:::The Page should consist of at least three HTML list items to display the given list of languageGreetingsItems:::5:::', () => { it(':::RJSCP42KBV_TEST_5:::The Page should consist of at least three HTML button elements that have the text content with the value of the key ""buttonText"" provided in languageGreetingsList:::10:::', () => { it(':::RJSCP42KBV_TEST_6:::The page should consist of an HTML image element, which initially has alt text with the value of key ""imageAltText"" from the first item  provided in languageGreetingsList:::5:::', () => { it(':::RJSCP42KBV_TEST_7:::The page should consist of an HTML image element, which initially has src with the value of key ""imageUrl"" from the first item  provided in languageGreetingsList:::5:::', () => { it(':::RJSCP42KBV_TEST_8:::When a languageGreetingsItem is clicked, then the corresponding greeting image should have alt text with the value of key ""imageAltText"" provided in languageGreetingsList:::10:::', () => { it(':::RJSCP42KBV_TEST_9:::When a languageGreetingsItem is clicked, then the corresponding greeting image should have src with the value of key ""imageUrl"" provided in languageGreetingsList:::10:::', () => { '"
de122a7977054a89b08770eb23ead16c,debuggingFruitsCounter,RJSCP431W5,/home/workspace/reactjs/coding-practices/debuggingFruitsCounter,/home/workspace/.tmp/reactjs/coding-practices/debuggingFruitsCounter/src,,"Tests from App.js: it(':::RJSCP431W5_TEST_1:::Page should initially consist of HTML main heading element with text content as ""Bob ate 4 mangoes 5 bananas"":::5:::', () => { it(':::RJSCP431W5_TEST_2:::Page should consist of HTML image element with alt attribute value as ""mango"":::5:::', () => { it(':::RJSCP431W5_TEST_3:::Page should consist of HTML image element with alt attribute value as ""banana"":::5:::', () => { it(':::RJSCP431W5_TEST_4:::Page should consist of HTML button element with text content as ""Eat Banana"":::5:::', () => { it(':::RJSCP431W5_TEST_5:::Page should consist of HTML button element with text content as ""Eat Mango"":::5:::', () => { it(':::RJSCP431W5_TEST_6:::JSX Code implementation should consist of at least fourteen HTML elements with attribute ""className"":::5:::', () => { it(':::RJSCP431W5_TEST_7:::When the Eat Mango button is clicked, then the count of the mangoes eaten should be incremented by one:::5:::', () => { it(':::RJSCP431W5_TEST_8:::When the Eat Banana button is clicked, then the count of the bananas eaten should be incremented by one:::5:::', () => { '"
d6b6c6c3bb8d407bb0c21f4578bbe529,planetsApp,RJSCP4DA5Y,/home/workspace/reactjs/coding-practices/planetsApp,/home/workspace/.tmp/reactjs/coding-practices/planetsApp/src,,"Tests from App.js: it(':::RJSCP4DA5Y_TEST_1:::Page should consist of an HTML container element with data-testid as ""planets"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_2:::Page should consist of HTML main heading element with text content as ""PLANETS"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_3:::Page should consist of HTML image elements with alt attribute value as ""planet {planetName}"" of the planet item in the ""planetsList"":::5:::', async () => { it(':::RJSCP4DA5Y_TEST_4:::Page should consist of HTML main heading elements with text content as value of the key ""name"" of the planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_5:::Page should consist of HTML paragraph elements with text content as value of the key ""description"" of the planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_6:::The ""PlanetsSlider"" component should be rendered by using Slider component:::5:::', () => { it(':::RJSCP4DA5Y_TEST_7:::When the next arrow button is clicked, then the page should consist of HTML image element with alt attribute value as ""planet {planetName}"" of the next planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_8:::When the next arrow button is clicked, then the page should consist of HTML main heading element with text content as value of the key ""name"" of the next planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_9:::When the next arrow button is clicked, then the page should consist of HTML paragraph element with text content as value of the key ""description"" of the next planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_10:::When the previous arrow button is clicked, then the page should consist of HTML image element with alt attribute value as ""planet {planetName}"" and src value as ""imageUrl"" of the previous planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_11:::When the previous arrow button is clicked, then the page should consist of HTML main heading element with text content as value of the key ""name"" of the previous planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_12:::When the previous arrow button is clicked, then the page should consist of HTML paragraph element with text content as value of the key ""description"" of the previous planet item in the ""planetsList"":::5:::', () => { it(':::RJSCP4DA5Y_TEST_13:::Page should consist of HTML image elements with src value as ""imageUrl"" of the planet item in the ""planetsList"":::5:::', async () => { it(':::RJSCP4DA5Y_TEST_14:::When the next arrow button is clicked, then the page should consist of HTML image element with src value as ""imageUrl"" of the next planet item in the ""planetsList"":::5:::', () => { '"
fd703f949ecf4fc3a1eb578ba8c08a80,alertNotifications,RJSCP4QWZN,/home/workspace/reactjs/coding-practices/alertNotifications,/home/workspace/.tmp/reactjs/coding-practices/alertNotifications/src,,"Tests from App.js: it(':::RJSCP4QWZN_TEST_1:::Page should consist of HTML main heading element with text content as ""Alert Notifications"":::5:::', () => { it(':::RJSCP4QWZN_TEST_2:::In AlertNotifications component JS code implementation should use ""AiFillCheckCircle"" for the Success notification from the react-icons package :::5:::', async () => { it(':::RJSCP4QWZN_TEST_3:::Page should consist of HTML main heading element with text content as ""Success"":::5:::', () => { it(':::RJSCP4QWZN_TEST_4:::Page should consist of HTML paragraph element with text content as ""You can access all the files in the folder"":::5:::', () => { it(':::RJSCP4QWZN_TEST_5:::In AlertNotifications component JS code implementation should use ""RiErrorWarningFill"" for the Error notification from the react-icons package :::5:::', async () => { it(':::RJSCP4QWZN_TEST_6:::Page should consist of HTML main heading element with text content as ""Error"":::5:::', () => { it(':::RJSCP4QWZN_TEST_7:::Page should consist of HTML paragraph element with text content as ""Sorry, you are not authorized to have access to delete the file"":::5:::', () => { it(':::RJSCP4QWZN_TEST_8:::In AlertNotifications component JS code implementation should use ""MdWarning"" for the Warning notification from the react-icons package :::5:::', async () => { it(':::RJSCP4QWZN_TEST_9:::Page should consist of HTML main heading element with text content as ""Warning"":::5:::', () => { it(':::RJSCP4QWZN_TEST_10:::Page should consist of HTML paragraph element with text content as ""Viewers of this file can see comments and suggestions"":::5:::', () => { it(':::RJSCP4QWZN_TEST_11:::In AlertNotifications component JS code implementation should use ""MdInfo"" for the Info notification from the react-icons package :::5:::', async () => { it(':::RJSCP4QWZN_TEST_12:::Page should consist of HTML main heading element with text content as ""Info"":::5:::', () => { it(':::RJSCP4QWZN_TEST_13:::Page should consist of HTML paragraph element with text content as ""Anyone on the internet can view these files"":::5:::', () => { it(':::RJSCP4QWZN_TEST_14:::In Notification component JS code implementation should use ""GrFormClose"" for each notification from the react-icons package :::5:::', async () => { it(':::RJSCP4QWZN_TEST_15:::Notification component should render the children props that have been passed from the AlertNotifications component:::5:::', () => { '"
056fd844d6c747419122eae1cf79df92,debuggingSimpleTodos,RJSCP52YXK,/home/workspace/reactjs/coding-practices/debuggingSimpleTodos,/home/workspace/.tmp/reactjs/coding-practices/debuggingSimpleTodos/src,,"Tests from App.js: it(':::RJSCP52YXK_TEST_1:::Page should consist of at least two HTML list items and the initialTodosList should be rendered using a unique key as a prop for each todo item:::5:::', () => { it(':::RJSCP52YXK_TEST_2:::Page should consist of HTML main heading element with text content as ""Simple Todos"":::5:::', () => { it(':::RJSCP52YXK_TEST_3:::Page should initially consist of HTML paragraph elements with text content equal to the ""title"" in initialTodosList provided:::5:::', () => { it(':::RJSCP52YXK_TEST_4:::Page should initially consist of at least eight HTML button elements with text content as ""Delete"":::5:::', () => { it(':::RJSCP52YXK_TEST_5:::When the Delete button of a todo item is clicked, then the respective todo should be deleted:::5:::', () => { '"
b4dd649002384ed3a702805f7d020dfc,matchGame,RJSCP5ZAQU,/home/workspace/reactjs/coding-practices/matchGame,/home/workspace/.tmp/reactjs/coding-practices/matchGame/src,,"Tests from App.js: it(':::RJSCP5ZAQU_TEST_1:::Page should consist of at least two HTML list items and the tabsList, thumbnailsList should be rendered using a unique key as a prop for each tab item and thumbnail item respectively:::5:::', () => { it(':::RJSCP5ZAQU_TEST_2:::Page should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo URL:::5:::', () => { it(':::RJSCP5ZAQU_TEST_3:::Page should consist of at least three HTML unordered list elements to display the list of nav items, tab items, and thumbnail items:::5:::', () => { it(':::RJSCP5ZAQU_TEST_4:::Page should consist of at least fifteen HTML list items to display the list of nav items, tab items, and thumbnail items:::5:::', () => { it(':::RJSCP5ZAQU_TEST_5:::Page should consist of an HTML paragraph element with text content as ""Score:"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_6:::Page should initially consist of the user score as ""0"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_7:::Page should consist of an HTML image element with alt attribute value as ""timer"" and src as the given timer image URL:::5:::', () => { it(':::RJSCP5ZAQU_TEST_8:::Page should initially consist of an HTML paragraph element to display the timer limit with text content as ""60 sec"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_9:::Page should initially consist of an HTML image element with alt attribute value as ""match"" and src as the value of the key ""imageUrl"" from the first object in imagesList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_10:::Page should consist of at least thirteen HTML button elements each inside an HTML list item:::5:::', () => { it(':::RJSCP5ZAQU_TEST_11:::Page should consist of at least three HTML button elements with text content equal to the ""displayText"" value of each item in tabsList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_12:::When the page is opened, the Fruits tab should be active, and the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""FRUIT"" from imagesList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_13:::When the page is opened, the timer should start running backwards, and should consist of an HTML paragraph element with text content displaying the remaining time:::5:::', () => { it(':::RJSCP5ZAQU_TEST_14:::When the Animals tab is clicked, then the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""ANIMAL"" from imagesList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_15:::When the Places tab is clicked, then the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""PLACE"" from imagesList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_16:::When the Fruits tab is clicked, then the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""FRUIT"" from imagesList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_17:::When a thumbnail is clicked that is matched with the image to be matched, then the score should be incremented by one:::5:::', () => { it(':::RJSCP5ZAQU_TEST_18:::When a thumbnail is clicked that is matched with the image to be matched, then the HTML image element with alt attribute value ""match"" should be changed randomly from imagesList provided:::5:::', () => { it(':::RJSCP5ZAQU_TEST_19:::When the timer reached 0 sec, then the page should have an HTML image element with alt attribute value as ""trophy"" and src as the given trophy image URL:::5:::', () => { it(':::RJSCP5ZAQU_TEST_20:::When the timer reached 0 sec, then the page should have an HTML paragraph element with text content as ""YOUR SCORE"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_21:::When the timer reached 0 sec, then the page should have a score achieved by the user in the header and scorecard:::5:::', () => { it(':::RJSCP5ZAQU_TEST_22:::When the timer reached 0 sec, then the page should have an HTML image element with alt attribute value as ""reset"" and src as the given reset image URL:::5:::', () => { it(':::RJSCP5ZAQU_TEST_23:::When the timer reached 0 sec, then the page should have an HTML button element with text content as ""PLAY AGAIN"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_24:::When the ""PLAY AGAIN"" button is clicked, then the timer should be reset to ""60 Sec"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_25:::When the ""PLAY AGAIN"" button is clicked, then the score should be reset to ""0"":::5:::', () => { it(':::RJSCP5ZAQU_TEST_26:::When the ""PLAY AGAIN"" button is clicked, then the new game should be started and the page should consist of at least fifteen HTML list items:::5:::', () => { it(':::RJSCP5ZAQU_TEST_27:::When a thumbnail is clicked that is mismatched with the image to be matched, then the page should show the scorecard view:::5:::', () => { '"
6e891af2a9fc4cb1ad08fda827c154fb,coinTossGame,RJSCP7IIZJ,/home/workspace/reactjs/coding-practices/coinTossGame,/home/workspace/.tmp/reactjs/coding-practices/coinTossGame/src,,"Tests from App.js: it(':::RJSCP7IIZJ_TEST_1:::Page should consist of an HTML main heading element with ""Coin Toss Game"" as text content:::5:::', () => { it(':::RJSCP7IIZJ_TEST_2:::Page should consist of an HTML paragraph element with ""Heads (or) Tails"" as text content:::5:::', () => { it(':::RJSCP7IIZJ_TEST_3:::Page should initially consist of an HTML image element with alt attribute value as ""toss result"" and src attribute value as the URL for heads image:::5:::', () => { it(':::RJSCP7IIZJ_TEST_4:::Page should consist of HTML button element with text content as ""Toss Coin"":::5:::', () => { it(':::RJSCP7IIZJ_TEST_5:::Page should initially consist of HTML paragraph element with text content as ""Total: 0"":::5:::', () => { it(':::RJSCP7IIZJ_TEST_6:::Page should initially consist of HTML paragraph element with text content as ""Heads: 0"":::5:::', () => { it(':::RJSCP7IIZJ_TEST_7:::Page should initially consist of HTML paragraph element with text content as ""Tails: 0"":::5:::', () => { it(':::RJSCP7IIZJ_TEST_8:::When the Toss Coin button is clicked, if the result is ""heads"" then the heads image should be displayed:::5:::', () => { it(':::RJSCP7IIZJ_TEST_9:::When the Toss Coin button is clicked, if the result is ""heads"" then the heads count should be incremented by one:::5:::', () => { it(':::RJSCP7IIZJ_TEST_10:::When the Toss Coin button is clicked, if the result is ""tails"" then the tails image should be displayed:::5:::', () => { it(':::RJSCP7IIZJ_TEST_11:::When the Toss Coin button is clicked, if the result is ""tails"" then the tails count should be incremented by one:::5:::', () => { it(':::RJSCP7IIZJ_TEST_12:::When the Toss Coin button is clicked, the total should be incremented by one:::5:::', () => { '"
30c05de218854e8e839c8398ea94bbc8,debuggingStopwatch,RJSCP90ZT3,/home/workspace/reactjs/coding-practices/debuggingStopwatch,/home/workspace/.tmp/reactjs/coding-practices/debuggingStopwatch/src,,"Tests from App.js: it(':::RJSCP90ZT3_TEST_1:::Page should consist of HTML heading element with text content as ""Stopwatch"":::5:::', () => { it(':::RJSCP90ZT3_TEST_2:::Page should consist of HTML button element with text content as ""Start"":::5:::', () => { it(':::RJSCP90ZT3_TEST_3:::Page should consist of two HTML button elements with text content as ""Stop"" and ""Reset"":::5:::', () => { it(':::RJSCP90ZT3_TEST_4:::Page should initially consist of HTML heading element with text content as ""00:00"":::5:::', () => { it(':::RJSCP90ZT3_TEST_5:::Page should consist of HTML image element with alt as ""stopwatch"" and src attribute value as the URL for the stopwatch image:::5:::', () => { it(':::RJSCP90ZT3_TEST_6:::When the Start button is clicked, then the timer should start:::5:::', () => { it(':::RJSCP90ZT3_TEST_7:::When the Stop button is clicked, then the timer should stop:::5:::', () => { it(':::RJSCP90ZT3_TEST_8:::When the Reset button is clicked, then the timer should be reset to zero:::5:::', () => { it(':::RJSCP90ZT3_TEST_9:::When the Start button is clicked after stopping the timer, then the timer should run from where it was stopped:::5:::', () => { it(':::RJSCP90ZT3_TEST_10:::When the Start button is clicked, then the ""setInterval"" method should be called:::5:::', () => { it(':::RJSCP90ZT3_TEST_11:::When the Stop button is clicked after starting the timer, then the ""clearInterval"" method should be called:::5:::', () => { it(':::RJSCP90ZT3_TEST_12:::When the Reset button is clicked after starting the timer, then the ""clearInterval"" method should be called:::5:::', () => { '"
7fb9a5428b7e4075bd5f78787914760b,appStore,RJSCPA6SPQ,/home/workspace/reactjs/coding-practices/appStore,/home/workspace/.tmp/reactjs/coding-practices/appStore/src,,"Tests from App.js: it(':::RJSCPA6SPQ_TEST_1:::Page should consist of at least two HTML list items and the tabsList, appsList should be rendered using a unique key as a prop for each tab item and app item respectively:::5:::', () => { it(':::RJSCPA6SPQ_TEST_2:::Page should consist of HTML main heading element with text content as ""App Store"":::5:::', () => { it(':::RJSCPA6SPQ_TEST_3:::Page should consist of HTML input element with type attribute value as ""search"":::5:::', () => { it(':::RJSCPA6SPQ_TEST_4:::Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as URL for the search icon:::5:::', () => { it(':::RJSCPA6SPQ_TEST_5:::Page should consist of at least two HTML unordered list elements to display the tabsList and appsList respectively:::5:::', () => { it(':::RJSCPA6SPQ_TEST_6:::Page should initially consist of at least fourteen HTML list items:::5:::', () => { it(':::RJSCPA6SPQ_TEST_7:::Page should consist of at least four HTML button elements each inside a HTML list item:::5:::', () => { it(':::RJSCPA6SPQ_TEST_8:::Page should consist of at least four HTML button elements with text content equal to the ""displayText"" value of each item in tabsList provided:::5:::', () => { it(':::RJSCPA6SPQ_TEST_9:::Page should initially consist of at least ten HTML image elements inside HTML list items:::5:::', () => { it(':::RJSCPA6SPQ_TEST_10:::Page should initially consist of at least ten HTML paragraph elements inside HTML list items:::5:::', () => { it(':::RJSCPA6SPQ_TEST_11:::Page should initially display the apps from the ""Social"" category:::5:::', () => { it(':::RJSCPA6SPQ_TEST_12:::Page should initially consist of HTML image elements with alt value equal to ""appName"" value and src value equal to ""imageUrl"" value of each item with ""category"" equal to ""Social"" in appsList provided:::5:::', () => { it(':::RJSCPA6SPQ_TEST_13:::Page should initially consist of HTML paragraph elements with text content equal to the ""appName"" value of each item with ""category"" equal to ""Social"" in appsList provided:::5:::', () => { it(':::RJSCPA6SPQ_TEST_14:::When a non-empty value is provided in search input, the list of apps displayed should consist of the search input provided in the app name irrespective of the case:::5:::', () => { it(':::RJSCPA6SPQ_TEST_15:::When a tab is clicked, the filtered apps list should be displayed according to the active tab:::5:::', () => { it(':::RJSCPA6SPQ_TEST_16:::When a non-empty search text ""m"" is provided in search input, and a tab is clicked the filtered search results should be displayed:::5:::', () => { it(':::RJSCPA6SPQ_TEST_17:::When a non-empty random search text is provided in search input, and a tab is clicked the filtered search results should be displayed:::5:::', () => { '"
f938020c49df48649081328ac265726b,googleSearchSuggestions,RJSCPEAC7M,/home/workspace/reactjs/coding-practices/googleSearchSuggestions,/home/workspace/.tmp/reactjs/coding-practices/googleSearchSuggestions/src,,"Tests from App.js: it(':::RJSCPEAC7M_TEST_1:::Page should consist of at least two HTML list items and the suggestionsList should be rendered using a unique key as a prop for each suggestion item:::5:::', () => { it(':::RJSCPEAC7M_TEST_2:::Page should consist of HTML image element with alt attribute value as ""google logo"" and src attribute value as URL for google logo:::5:::', () => { it(':::RJSCPEAC7M_TEST_3:::Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as URL for search icon:::5:::', () => { it(':::RJSCPEAC7M_TEST_4:::Page should consist of HTML input element with type attribute value as ""search"":::5:::', () => { it(':::RJSCPEAC7M_TEST_5:::Page should consist of HTML unordered list element to display the list of suggestions received from suggestionsList:::5:::', () => { it(':::RJSCPEAC7M_TEST_6:::Page should consist of at least six HTML list items to display the list of suggestions received from suggestionsList:::5:::', () => { it(':::RJSCPEAC7M_TEST_7:::Page should initially consist of HTML paragraph elements with text content as the values of the key ""suggestion"" from the suggestionsList provided:::5:::', () => { it(':::RJSCPEAC7M_TEST_8:::Page should consist of at least six HTML image elements with alt attribute value as ""arrow"" and src attribute value as the URL for arrow icon:::5:::', () => { it(':::RJSCPEAC7M_TEST_9:::When a value is provided in the search input field, the suggestions should be filtered irrespective of the case:::5:::', () => { it(':::RJSCPEAC7M_TEST_10:::When the arrow of a suggestion is clicked, the value inside the search input should be updated to the respective suggestion that has been clicked:::5:::', () => { '"
0ec61da3e50a4f6097095a36355780c9,debuggingGoogleSearchSuggestions,RJSCPH6MBO,/home/workspace/reactjs/coding-practices/debuggingGoogleSearchSuggestions,/home/workspace/.tmp/reactjs/coding-practices/debuggingGoogleSearchSuggestions/src,,"Tests from App.js: it(':::RJSCPH6MBO_TEST_1:::Page should consist of at least two HTML list items and the suggestionsList should be rendered using a unique key as a prop for each suggestion item:::5:::', () => { it(':::RJSCPH6MBO_TEST_2:::Page should consist of HTML image element with alt attribute value as ""google logo"" and src attribute value as URL for google logo:::5:::', () => { it(':::RJSCPH6MBO_TEST_3:::Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as URL for search icon:::5:::', () => { it(':::RJSCPH6MBO_TEST_4:::Page should consist of HTML input element with type attribute value as ""search"":::5:::', () => { it(':::RJSCPH6MBO_TEST_5:::Page should consist of HTML unordered list element to display the list of suggestions received from suggestionsList:::5:::', () => { it(':::RJSCPH6MBO_TEST_6:::Page should consist of at least six HTML list items to display the list of suggestions received from suggestionsList:::5:::', () => { it(':::RJSCPH6MBO_TEST_7:::Page should initially consist of HTML paragraph elements with text content equal to the ""suggestion"" from the suggestionsList provided:::5:::', () => { it(':::RJSCPH6MBO_TEST_8:::Page should consist of at least six HTML image elements with alt attribute value as ""arrow"" and src attribute value as the URL for arrow icon:::5:::', () => { it(':::RJSCPH6MBO_TEST_9:::When a value is provided in the search input field, the suggestions should be filtered irrespective of the case:::5:::', () => { it(':::RJSCPH6MBO_TEST_10:::When the arrow of a suggestion is clicked, the value inside the search input should be updated to the respective suggestion that has been clicked:::5:::', () => { '"
7ad0f249f4bf466ba1991bc34da312d2,debuggingCounter,RJSCPII2BU,/home/workspace/reactjs/coding-practices/debuggingCounter,/home/workspace/.tmp/reactjs/coding-practices/debuggingCounter/src,,"Tests from App.js: it(':::RJSCPII2BU_TEST_1:::Page should initially consist of HTML main heading element with text content as ""Count 0"":::5:::', () => { it(':::RJSCPII2BU_TEST_2:::Page should consist of HTML button element with text content as ""Increase"":::5:::', () => { it(':::RJSCPII2BU_TEST_3:::Page should consist of HTML button element with text content as ""Decrease"":::5:::', () => { it(':::RJSCPII2BU_TEST_4:::When the Increase button is clicked, then the count should be incremented by one:::5:::', () => { it(':::RJSCPII2BU_TEST_5:::When the Decrease button is clicked, then the count should be decremented by one:::5:::', () => { '"
20ad2864bbc34582a4885725f4e9292c,moneyManager,RJSCPIK4G2,/home/workspace/reactjs/coding-practices/moneyManager,/home/workspace/.tmp/reactjs/coding-practices/moneyManager/src,,"Tests from App.js: it(':::RJSCPIK4G2_TEST_1:::When a transaction is added, then the page should consist of at least one HTML list item and the transactionsList should be rendered using a unique key as a prop for each transaction item:::5:::', () => { it(':::RJSCPIK4G2_TEST_2:::Page should initially consist of HTML paragraph element with text content starting with ""Welcome back to your"":::5:::', () => { it(':::RJSCPIK4G2_TEST_3:::Page should initially consist of HTML image element with alt attribute value as ""balance"" and src attribute value as URL for balance image:::5:::', () => { it(':::RJSCPIK4G2_TEST_4:::Page should consist of HTML paragraph element with text content as ""Your Balance"":::5:::', () => { it(':::RJSCPIK4G2_TEST_5:::Page should initially consist of an HTML paragraph element with data-testid attribute value as ""balanceAmount"" and text content as ""0"":::5:::', () => { it(':::RJSCPIK4G2_TEST_6:::Page should initially consist of HTML image element with alt attribute value as ""income"" and src attribute value as URL for income image:::5:::', () => { it(':::RJSCPIK4G2_TEST_7:::Page should consist of HTML paragraph element with text content as ""Your Income"":::5:::', () => { it(':::RJSCPIK4G2_TEST_8:::Page should initially consist of an HTML paragraph element with data-testid attribute value as ""incomeAmount"" and text content as ""0"":::5:::', () => { it(':::RJSCPIK4G2_TEST_9:::Page should initially consist of HTML image element with alt attribute value as ""expenses"" and src attribute value as URL for expenses image:::5:::', () => { it(':::RJSCPIK4G2_TEST_10:::Page should consist of HTML paragraph element with text content as ""Your Expenses"":::5:::', () => { it(':::RJSCPIK4G2_TEST_11:::Page should initially consist of an HTML paragraph element with data-testid attribute value as ""expensesAmount"" and text content as ""0"":::5:::', () => { it(':::RJSCPIK4G2_TEST_12:::Page should consist of HTML heading element with text content as ""Add Transaction"":::5:::', () => { it(':::RJSCPIK4G2_TEST_13:::Page should consist of HTML input element with label text as ""TITLE"":::5:::', () => { it(':::RJSCPIK4G2_TEST_14:::Page should consist of HTML input element with label text as ""AMOUNT"":::5:::', () => { it(':::RJSCPIK4G2_TEST_15:::Page should consist of HTML select element with label text as ""TYPE"":::5:::', () => { it(':::RJSCPIK4G2_TEST_16:::Page should consist of HTML option element with text content as the value of the key ""displayText"" of the first object in transactionTypeOptions provided:::5:::', () => { it(':::RJSCPIK4G2_TEST_17:::Page should consist of HTML option element with text content as the value of the key ""displayText"" of the second object in transactionTypeOptions provided:::5:::', () => { it(':::RJSCPIK4G2_TEST_18:::Page should consist of HTML option elements with value attribute as the value of the keys ""optionId"" in transactionTypeOptions provided:::5:::', () => { it(':::RJSCPIK4G2_TEST_19:::Page should consist of HTML select element which contains ""Income"" and ""Expenses"" as options:::5:::', () => { it(':::RJSCPIK4G2_TEST_20:::Page should consist of HTML button element with text content as ""Add"":::5:::', () => { it(':::RJSCPIK4G2_TEST_21:::Page should consist of HTML heading element with text content as ""History"":::5:::', () => { it(':::RJSCPIK4G2_TEST_22:::Page should consist of HTML paragraph element with text content as ""Title"":::5:::', () => { it(':::RJSCPIK4G2_TEST_23:::Page should consist of HTML paragraph element with text content as ""Amount"":::5:::', () => { it(':::RJSCPIK4G2_TEST_24:::Page should consist of HTML paragraph element with text content as ""Type"":::5:::', () => { it(':::RJSCPIK4G2_TEST_25:::When non-empty values are provided in the HTML input elements, selected type and Add button is clicked, an HTML list item should be added to the transactions list with a unique id imported from the uuid package:::5:::', () => { it(':::RJSCPIK4G2_TEST_26:::When a transaction is added, then the HTML input element for title should be empty:::5:::', () => { it(':::RJSCPIK4G2_TEST_27:::When a transaction is added, then the HTML input element for amount should be empty:::5:::', () => { it(':::RJSCPIK4G2_TEST_28:::When a transaction is added with ""Income"" as the type, the balance amount should be displayed accordingly:::5:::', () => { it(':::RJSCPIK4G2_TEST_29:::When a transaction is added with ""Income"" as the type, the income amount should be displayed accordingly:::5:::', () => { it(':::RJSCPIK4G2_TEST_30:::When a transaction is added with ""Income"" as the type, the expenses amount should remain the same:::5:::', () => { it(':::RJSCPIK4G2_TEST_31:::When transactions are added with ""Income"" and ""Expenses"" as types, the balance amount, income amount and expenses amount should be displayed accordingly:::5:::', () => { it(':::RJSCPIK4G2_TEST_32:::When a transaction is added, then the page should consist of an HTML unordered list element to display the list of transactions:::5:::', () => { it(':::RJSCPIK4G2_TEST_33:::When a non-empty value is provided in the HTML input element for title, the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCPIK4G2_TEST_34:::When a non-empty value is provided in the HTML input element for amount, the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCPIK4G2_TEST_35:::When a value is selected in the HTML select element for type, the value provided should be updated in the value of the select element:::5:::', () => { it(':::RJSCPIK4G2_TEST_36:::When a transaction is added, then it should be added to the list of transactions:::5:::', () => { it(':::RJSCPIK4G2_TEST_37:::Each transaction should consist of an HTML image element with alt attribute value as ""delete"" and src attribute value as URL for delete image:::5:::', () => { it(':::RJSCPIK4G2_TEST_38:::When a transaction is added, then the HTML select element should be selected by default value:::5:::', () => { it(':::RJSCPIK4G2_TEST_39:::When a transaction is added, and the HTML button with data-testid as ""delete"" is clicked, the transaction item should be removed:::5:::', () => { it(':::RJSCPIK4G2_TEST_40:::When a single transaction is added, and the HTML button with data-testid as ""delete"" is clicked, then the Balance, Income, Expenses should be updated to their initial values:::5:::', () => { it(':::RJSCPIK4G2_TEST_41:::When multiple transactions are added, and one transaction is deleted, then the Balance, Income, Expenses should be updated accordingly:::5:::', () => { '"
bae5a70923b945c6a7f153ef02445192,commentsApp,RJSCPJO5SO,/home/workspace/reactjs/coding-practices/commentsApp,/home/workspace/.tmp/reactjs/coding-practices/commentsApp/src,,"Tests from App.js: it(':::RJSCPJO5SO_TEST_1:::When a comment is added, then the page should consist of at least one HTML list item and the commentsList should be rendered using a unique key as a prop for each comment item:::5:::', () => { it(':::RJSCPJO5SO_TEST_2:::Page should consist of HTML main heading element with text content as ""Comments"":::5:::', () => { it(':::RJSCPJO5SO_TEST_3:::Page should consist of HTML paragraph element with text content starting with ""Say Something"":::5:::', () => { it(':::RJSCPJO5SO_TEST_4:::Page should consist of an HTML form element:::5:::', () => { it(':::RJSCPJO5SO_TEST_5:::Page should consist of HTML input element with a placeholder as ""Your Name"":::5:::', () => { it(':::RJSCPJO5SO_TEST_6:::Page should consist of HTML textarea element with a placeholder as ""Your Comment"":::5:::', () => { it(':::RJSCPJO5SO_TEST_7:::Page should consist of HTML button element with text content as ""Add Comment"":::5:::', () => { it(':::RJSCPJO5SO_TEST_8:::Page should consist of HTML image element with alt as ""comments"" and src value as URL for comments image:::5:::', () => { it(':::RJSCPJO5SO_TEST_9:::Page should initially consist of HTML element with text content as ""0"":::5:::', () => { it(':::RJSCPJO5SO_TEST_10:::When a non-empty value is provided in the HTML input element for name, then the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCPJO5SO_TEST_11:::When a non-empty value is provided in the HTML textarea element for comment, then the value provided should be updated in the value of the textarea element:::5:::', () => { it(':::RJSCPJO5SO_TEST_12:::When non-empty values are provided in the HTML input element and HTML text area element and the ""Add Comment"" button is clicked, then the values inside the input elements should be updated to their initial state:::5:::', () => { it(':::RJSCPJO5SO_TEST_13:::When a comment is added, then the comments count should be incremented by one:::5:::', () => { it(':::RJSCPJO5SO_TEST_14:::When a comment is added, then the page should consist of an HTML unordered list to display the list of comments:::5:::', () => { it(':::RJSCPJO5SO_TEST_15:::When a comment is added, then the page should consist of at least one HTML list item to display the comment:::5:::', () => { it(':::RJSCPJO5SO_TEST_16:::When a comment is added, then the name provided in the HTML input element should be displayed in the comment:::5:::', () => { it(':::RJSCPJO5SO_TEST_17:::When a comment is added, then the comment provided in the HTML textarea element should be displayed in the comment:::5:::', () => { it(':::RJSCPJO5SO_TEST_18:::When a comment is added, then the comment should contain an HTML paragraph element with text containing how long ago the comment was posted:::5:::', () => { it(':::RJSCPJO5SO_TEST_19:::When a comment is added, then the comment should contain an HTML image element with alt as ""like"" and src as the URL for the Like image:::5:::', () => { it(':::RJSCPJO5SO_TEST_20:::When a comment is added, then the comment should contain an HTML button element with text content as ""Like"":::5:::', () => { it(':::RJSCPJO5SO_TEST_21:::When a comment is added, then the comment should contain an HTML button element with data-testid attribute value as ""delete"":::5:::', () => { it(':::RJSCPJO5SO_TEST_22:::When a comment is added, then the comment should contain an HTML image element with alt as ""delete"" and src as the URL for the delete image:::5:::', () => { it(':::RJSCPJO5SO_TEST_23:::When a comment is added, and the HTML button with text content as ""Like"" is clicked, then the src value of the HTML image with alt text as ""like"" should be changed to URL for the Liked image:::5:::', () => { it(':::RJSCPJO5SO_TEST_24:::When a comment is added and liked, and the HTML button with text content as ""Like"" is clicked again, then the src value of the HTML image with alt text as ""like"" should be changed to URL for the Like image:::5:::', () => { it(':::RJSCPJO5SO_TEST_25:::When a comment is added, and the HTML button with data-testid as ""delete"" is clicked, then the comment item should be deleted from the list of comments:::5:::', () => { it(':::RJSCPJO5SO_TEST_26:::When a comment is added, and the HTML button with data-testid as ""delete"" is clicked, then the count of the comments should be decremented by one:::5:::', () => { '"
9a69b39349484ea8bd5cf45d87651099,browserHistory,RJSCPK3BCW,/home/workspace/reactjs/coding-practices/browserHistory,/home/workspace/.tmp/reactjs/coding-practices/browserHistory/src,,"Tests from App.js: it(':::RJSCPK3BCW_TEST_1:::Page should consist of at least two HTML list items rendered using a unique key as a prop to display historyItem from the initialHistoryList:::5:::', () => { it(':::RJSCPK3BCW_TEST_2:::Page should consist of an HTML image element with alt attribute value as ""app logo"" and src as the given logo URL:::5:::', () => { it(':::RJSCPK3BCW_TEST_3:::Page should consist of an HTML image element with alt attribute value as ""search"" and src as the given search image URL:::5:::', () => { it(':::RJSCPK3BCW_TEST_4:::Page should consist of an HTML input element with type attribute value as ""search"":::5:::', () => { it(':::RJSCPK3BCW_TEST_5:::Page should consist of an HTML unordered list element to display the list of historyItems:::5:::', () => { it(':::RJSCPK3BCW_TEST_6:::Page should consist of at least ten HTML list elements to display the list of historyItems:::5:::', () => { it(':::RJSCPK3BCW_TEST_7:::Page should consist of an HTML paragraph elements with text content as the values of the key ""timeAccessed"" in each historyItem of given initialHistoryList:::5:::', () => { it(':::RJSCPK3BCW_TEST_8:::Page should consist of an HTML image elements with alt attribute value as ""domain logo"" and src as the value of key ""logoUrl"" in each historyItem of given initialHistoryList:::5:::', () => { it(':::RJSCPK3BCW_TEST_9:::Page should consist of an HTML paragraph elements with text content as the values of the key ""title"" in each historyItem of given initialHistoryList:::5:::', () => { it(':::RJSCPK3BCW_TEST_10:::Page should consist of an HTML paragraph elements with text content as the values of the key ""domainUrl"" in each historyItem of given initialHistoryList:::5:::', () => { it(':::RJSCPK3BCW_TEST_11:::Page should consist of at least ten HTML button elements with data-testid as ""delete"":::5:::', () => { it(':::RJSCPK3BCW_TEST_12:::Page should consist of at least ten HTML image elements with alt attribute value as ""delete"" and src as the given delete image URL:::5:::', () => { it(':::RJSCPK3BCW_TEST_13:::When a non-empty value is provided in the search input element, then the text provided should be displayed in the search input element:::5:::', () => { it(':::RJSCPK3BCW_TEST_14:::When a non-empty value is provided in the search input element, the historyItems should be filtered irrespective of the case:::5:::', () => { it(':::RJSCPK3BCW_TEST_15:::When a non-empty value is provided in the search input element, and no history item includes the value given in the search input, then the page should consist of an HTML paragraph element with text content as ""There is no history to show"" :::5:::', () => { it(':::RJSCPK3BCW_TEST_16:::When an HTML button element with data-testid as ""delete"" of a history item is clicked, then the respective history item should be deleted:::5:::', () => { it(':::RJSCPK3BCW_TEST_17:::When all historyItems are deleted, then the page should consist of an HTML paragraph element with text content as ""There is no history to show"":::5:::', () => { '"
d3d58b27a7b94facabc9be5787acc77f,passwordManager,RJSCPKS537,/home/workspace/reactjs/coding-practices/passwordManager,/home/workspace/.tmp/reactjs/coding-practices/passwordManager/src,,"Tests from App.js: it(':::RJSCPKS537_TEST_1:::When two passwords are added, then the page should consist of at least two HTML list items and the passwords list should be rendered using a unique key as a prop for each password item:::5:::', () => { it(':::RJSCPKS537_TEST_2:::Page should consist of an HTML image element with alt attribute value as ""app logo"" and src as the given logo URL:::5:::', () => { it(':::RJSCPKS537_TEST_3:::Page should consist of an HTML main heading element with text content as ""Add New Password"":::5:::', () => { it(':::RJSCPKS537_TEST_4:::Page should consist of an HTML form element:::5:::', () => { it(':::RJSCPKS537_TEST_5:::Page should consist of an HTML image element with alt attribute value as ""website"" and src as the given website image URL:::5:::', () => { it(':::RJSCPKS537_TEST_6:::Page should consist of an HTML input element with the placeholder as ""Enter Website"" and type as ""text"":::5:::', () => { it(':::RJSCPKS537_TEST_7:::Page should consist of an HTML image element with alt attribute value as ""username"" and src as the given username image URL:::5:::', () => { it(':::RJSCPKS537_TEST_8:::Page should consist of an HTML input element with the placeholder as ""Enter Username"" and type as ""text"":::5:::', () => { it(':::RJSCPKS537_TEST_9:::Page should consist of an HTML image element with alt attribute value as ""password"" and src as the given password image URL:::5:::', () => { it(':::RJSCPKS537_TEST_10:::Page should consist of an HTML input element with the placeholder as ""Enter Password"" and type as ""password"":::5:::', () => { it(':::RJSCPKS537_TEST_11:::Page should consist of an HTML button element with ""Add"" as text content and type as ""submit"":::5:::', () => { it(':::RJSCPKS537_TEST_12:::Page should consist of an HTML image element with alt attribute value as ""password manager"" and src as the given password manager URL:::5:::', () => { it(':::RJSCPKS537_TEST_13:::Page should consist of an HTML main heading element with text content as ""Your Passwords"":::5:::', () => { it(':::RJSCPKS537_TEST_14:::Page should initially consist of an HTML paragraph element to display the count of the passwords with text content as ""0"":::5:::', () => { it(':::RJSCPKS537_TEST_15:::Page should consist of an HTML image element with alt attribute value as ""search"" and src as the given search image URL:::5:::', () => { it(':::RJSCPKS537_TEST_16:::Page should consist of an HTML input element with type attribute value as ""search"":::5:::', () => { it(':::RJSCPKS537_TEST_17:::Page should consist of an HTML input element with type attribute value as ""checkbox"" and label text as ""Show passwords"":::5:::', async () => { it(':::RJSCPKS537_TEST_18:::Page should initially consist of an HTML image element with alt attribute value as ""no passwords"" and src as the given no passwords image URL:::5:::', () => { it(':::RJSCPKS537_TEST_19:::Page should initially consist of an HTML paragraph element with text content as ""No Passwords"":::5:::', () => { it(':::RJSCPKS537_TEST_20:::When a non-empty value is provided in an HTML input element with the placeholder as ""Enter Website"", then that text should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPKS537_TEST_21:::When a non-empty value is provided in an HTML input element with the placeholder as ""Enter UserName"", then that text should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPKS537_TEST_22:::When a non-empty value is provided in an HTML input element with the placeholder as ""Enter Password"", then that text should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPKS537_TEST_23:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of at least one HTML unordered list element to display the list of password items:::5:::', () => { it(':::RJSCPKS537_TEST_24:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of at least one HTML list item to display the list of password items:::5:::', () => { it(':::RJSCPKS537_TEST_25:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML paragraph element with text content as website provided:::5:::', () => { it(':::RJSCPKS537_TEST_26:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML paragraph element with text content as username provided:::5:::', () => { it(':::RJSCPKS537_TEST_27:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML image element with alt attribute value as ""stars"" and src as the given stars image URL:::5:::', () => { it(':::RJSCPKS537_TEST_28:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML button element with data-testid as ""delete"":::5:::', () => { it(':::RJSCPKS537_TEST_29:::When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML image element with alt attribute value as ""delete"" and src as the given delete URL:::5:::', () => { it(':::RJSCPKS537_TEST_30:::When a new password is added, then the count of the passwords should be incremented by one:::5:::', () => { it(':::RJSCPKS537_TEST_31:::When a new password is added and ""Show passwords"" is checked, then the page should consist of an HTML paragraph element with text content as password provided:::5:::', () => { it(':::RJSCPKS537_TEST_32:::When a non-empty value is provided in the search input element, then that text should be displayed in the search input element:::5:::', () => { it(':::RJSCPKS537_TEST_33:::When new passwords are added and a non-empty value is provided in the search input element, the password items should be filtered irrespective of the case:::5:::', () => { it(':::RJSCPKS537_TEST_34:::When new passwords are added and a non-empty value is provided in the search input element, and no password item includes the value given in the search input, then the page should consist of an HTML image element with alt attribute value as ""no passwords"" and src as the given no passwords image URL:::5:::', () => { it(':::RJSCPKS537_TEST_35:::When a new password is added and a non-empty value is provided in the search input element, and no password item includes the value given in the search input, then the page should consist of an HTML paragraph element with text content as ""No Passwords"":::5:::', () => { it(':::RJSCPKS537_TEST_36:::When a new password is added and the delete button of a password item is clicked, then the respective password item should be deleted:::5:::', () => { it(':::RJSCPKS537_TEST_37:::When a new password is added and the delete button of a password item is clicked, then the page should consist of an HTML image element with alt attribute value as ""no passwords"" and src as the given no passwords image URL:::5:::', () => { it(':::RJSCPKS537_TEST_38:::When a new password is added and the delete button of a password item is clicked, then the page should consist of an HTML paragraph element with text content as ""No Passwords"":::5:::', () => { '"
17f08f957f274e21a929cca06083e4f3,capitalsApp,RJSCPLC7S2,/home/workspace/reactjs/coding-practices/capitalsApp,/home/workspace/.tmp/reactjs/coding-practices/capitalsApp/src,,"Tests from App.js: it(':::RJSCPLC7S2_TEST_1:::Page should consist of at least two HTML options and the countryAndCapitalsList should be rendered using a unique key as a prop for each capital option:::5:::', () => { it(':::RJSCPLC7S2_TEST_2:::Page should consist of HTML main heading element with text content as ""Countries And Capitals"":::5:::', () => { it(':::RJSCPLC7S2_TEST_3:::Page should initially consist of HTML select element with value attribute equal to ""NEW_DELHI"":::5:::', () => { it(':::RJSCPLC7S2_TEST_4:::Page should consist of HTML option elements with text content equal to ""capitalDisplayText"" of each object in countryAndCapitalsList provided:::5:::', () => { it(':::RJSCPLC7S2_TEST_5:::Page should consist of HTML option elements with value attribute equal to ""id"" of each object in countryAndCapitalsList provided:::5:::', () => { it(':::RJSCPLC7S2_TEST_6:::Page should consist of HTML paragraph element with text content as ""is capital of which country"":::5:::', () => { it(':::RJSCPLC7S2_TEST_7:::Page should initially consist of HTML paragraph element with text content equal to ""country"" value of first item in countryAndCapitalsList provided:::5:::', () => { it(':::RJSCPLC7S2_TEST_8:::When HTML option with value attribute ""PARIS"" is selected, then the value attribute of the HTML select element should be ""PARIS"":::5:::', () => { it(':::RJSCPLC7S2_TEST_9:::When HTML option with the value attribute ""PARIS"" is selected, then ""France"" should be displayed in the HTML paragraph element for the country:::5:::', () => { '"
ed6ba20efe024f8dbe3dbd4bc2ad219d,layoutBuilder,RJSCPPC2A0,/home/workspace/reactjs/coding-practices/layoutBuilder,/home/workspace/.tmp/reactjs/coding-practices/layoutBuilder/src,,"Tests from App.js: it(':::RJSCPPC2A0_TEST_1:::Initially when the page is opened all the elements in the layout should be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_2:::Page should consist of HTML main heading element with text content as ""Layout"":::5:::', () => { it(':::RJSCPPC2A0_TEST_3:::Page should consist of an HTML checkbox input element with label text as ""Content"":::5:::', () => { it(':::RJSCPPC2A0_TEST_4:::Page should consist of an HTML checkbox input element with label text as ""Left Navbar"":::5:::', () => { it(':::RJSCPPC2A0_TEST_5:::Page should consist of an HTML checkbox input element with label text as ""Right Navbar"":::5:::', () => { it(':::RJSCPPC2A0_TEST_6:::Page should consist of HTML main heading element with text content as ""Header"" :::5:::', () => { it(':::RJSCPPC2A0_TEST_7:::Page should consist of HTML main heading element with text content as ""Left Navbar Menu"" :::5:::', () => { it(':::RJSCPPC2A0_TEST_8:::Page should consist of HTML unordered list to display the list of items in left navbar :::5:::', () => { it(':::RJSCPPC2A0_TEST_9:::Page should consist of HTML main heading element with text content as ""Content"" :::5:::', () => { it(':::RJSCPPC2A0_TEST_10:::Page should consist of HTML paragraph element with text content starting with ""Lorem ipsum"" :::5:::', () => { it(':::RJSCPPC2A0_TEST_11:::Page should consist of HTML main heading element with text content as ""Right Navbar Menu"" :::5:::', () => { it(':::RJSCPPC2A0_TEST_12:::Page should consist of HTML paragraph elements with text content as ""Ad 1"":::5:::', () => { it(':::RJSCPPC2A0_TEST_13:::Page should consist of HTML paragraph elements with text content as ""Ad 2"":::5:::', () => { it(':::RJSCPPC2A0_TEST_14:::Page should consist of HTML main heading element with text content as ""Footer"" :::5:::', () => { it(':::RJSCPPC2A0_TEST_15:::When the value of the ""showContent"" key in ""ConfigurationContext"" is true, then the content should be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_16:::When the value of the ""showContent"" key in ""ConfigurationContext"" is false, then the content should not be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_17:::When the value of the ""showLeftNavbar"" key in ""ConfigurationContext"" is true, then the Left Navbar Menu should be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_18:::When the value of the ""showLeftNavbar"" key in ""ConfigurationContext"" is false, then the Left Navbar Menu should not be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_19:::When the value of the ""showRightNavbar"" key in ""ConfigurationContext"" is true, then the Right Navbar should be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_20:::When the value of the ""showRightNavbar"" key in ""ConfigurationContext"" is false, then the Right Navbar should not be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_21:::When the Content checkbox is unchecked the ""onToggleShowContent"" method in ""ConfigurationContext"" should be called:::5:::', () => { it(':::RJSCPPC2A0_TEST_22:::When the Left Navbar checkbox is unchecked the ""onToggleShowLeftNavbar"" method in ""ConfigurationContext"" should be called:::5:::', () => { it(':::RJSCPPC2A0_TEST_23:::When the Right Navbar checkbox is unchecked the ""onToggleShowRightNavbar"" method in ""ConfigurationContext"" should be called:::5:::', () => { it(':::RJSCPPC2A0_TEST_24:::When the Content checkbox is unchecked then the Content should not be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_25:::When the Left Navbar checkbox is unchecked then the Left Navbar should not be displayed:::5:::', () => { it(':::RJSCPPC2A0_TEST_26:::When the Right Navbar checkbox is unchecked then the Right Navbar should not be displayed:::5:::', () => { '"
3b92b48f9ec9492e91acb228a572b6be,clickCounter,RJSCPRD0XO,/home/workspace/reactjs/coding-practices/clickCounter,/home/workspace/.tmp/reactjs/coding-practices/clickCounter/src,,"Tests from App.js: it(':::RJSCPRD0XO_TEST_1:::Page should initially consist of HTML heading element with text content as ""The Button has been clicked 0 times"":::5:::', () => { it(':::RJSCPRD0XO_TEST_2:::Page should consist of HTML paragraph element with text content as ""Click the button to increase the count"":::5:::', () => { it(':::RJSCPRD0XO_TEST_3:::Page should consist of HTML button element with text content as ""Click Me"":::5:::', () => { it(':::RJSCPRD0XO_TEST_4:::When the HTML button is clicked the clicks count should be incremented by 1:::5:::', () => { '"
d2b2fa7044b340b39ecc3a189e72cde7,ccbpTimeline,RJSCPRXL8I,/home/workspace/reactjs/coding-practices/ccbpTimeline,/home/workspace/.tmp/reactjs/coding-practices/ccbpTimeline/src,,"Tests from App.js: it(':::RJSCPRXL8I_TEST_1:::Page should consist of HTML main heading element with text content as ""MY JOURNEY OF CCBP 4.0"":::5:::', () => { it(':::RJSCPRXL8I_TEST_2:::Page should consist of HTML main heading elements with text content as value of the key ""courseTitle"" in the timeline item with categoryId as ""COURSE"" in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_3:::Page should consist of HTML main heading elements with text content as value of the key ""projectTitle"" in the timeline item with categoryId as ""PROJECT"" in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_4:::Page should consist of HTML paragraph elements with text content as value of the key ""description"" in the timeline item in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_5:::Page should consist of HTML element with text content as value of the key ""title"" in the timeline item in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_6:::Page should consist of HTML image elements with alt attribute value as ""project"" and src value as ""imageUrl"" in the timeline item with categoryId as ""PROJECT"" in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_7:::JSX code implementation for ""Clock"" icon should use ""AiFillClockCircle"" from the react-icons package :::5:::', () => { it(':::RJSCPRXL8I_TEST_8:::JSX code implementation for ""Calendar"" icon should use ""AiFillCalendar"" from the react-icons package :::5:::', () => { it(':::RJSCPRXL8I_TEST_9:::Page should consist of HTML paragraph element with text content as value of the key ""duration"" in the timeline item in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_10:::Page should consist of at least six HTML anchor elements with text content as ""Visit"" in the card:::5:::', () => { it(':::RJSCPRXL8I_TEST_11:::Page should consist of HTML anchor elements with text content as ""Visit"" and the ""href"" value of the key ""projectUrl"" in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_12:::Page should consist of HTML paragraph elements with text content as values of the key ""name"" in the tagsList inside the timeline item with categoryId as ""COURSE"" in the ""timelineItemsList"":::5:::', () => { it(':::RJSCPRXL8I_TEST_13:::Page should consist of ""timelineItemsList"" and it is wrapped with Chrono component from react-chrono:::5:::', () => { it(':::RJSCPRXL8I_TEST_14:::The ""TimelineView"" component rendered using Chrono component with prop ""mode"" should have its value as ""VERTICAL_ALTERNATING"":::5:::', () => { it(':::RJSCPRXL8I_TEST_15:::Page should consist of ""timelineItemsList"" and rendered as card inside the Chrono component from react-chrono:::5:::', () => { it(':::RJSCPRXL8I_TEST_16:::Page should consist of HTML element with text content as ""10 DECEMBER 2020"":::5:::', () => { it(':::RJSCPRXL8I_TEST_17:::Page should consist of HTML element with text content as ""21 DECEMBER 2020"":::5:::', () => { '"
0c321ac91643458fa8515edcbcdc6a7f,memeGenerator,RJSCPSMPT7,/home/workspace/reactjs/coding-practices/memeGenerator,/home/workspace/.tmp/reactjs/coding-practices/memeGenerator/src,,"Tests from App.js: it(':::RJSCPSMPT7_TEST_1:::Page should consist of at least two HTML options elements and the fontSizesOptionsList should be rendered using a unique key as a prop for each font size option respectively:::5:::', () => { it(':::RJSCPSMPT7_TEST_2:::Page should consist of HTML main heading element with text content as ""Meme Generator"":::5:::', () => { it(':::RJSCPSMPT7_TEST_3:::Page should consist of an HTML input element with label text as ""Image URL"":::5:::', () => { it(':::RJSCPSMPT7_TEST_4:::Page should consist of an HTML input element with label text as ""Top Text"":::5:::', () => { it(':::RJSCPSMPT7_TEST_5:::Page should consist of an HTML input element with label text as ""Bottom Text"":::5:::', () => { it(':::RJSCPSMPT7_TEST_6:::Page should consist of an HTML select element with label text as ""Font Size"":::5:::', () => { it(':::RJSCPSMPT7_TEST_7:::Page should consist of HTML form element to display all the input and select elements:::5:::', () => { it(':::RJSCPSMPT7_TEST_8:::Page should initially consist of HTML select element with value equal to ""8"":::5:::', () => { it(':::RJSCPSMPT7_TEST_9:::Page should consist of HTML button element with text content as ""Generate"":::5:::', () => { it(':::RJSCPSMPT7_TEST_10:::Page should consist of HTML option elements with values equal to the value of the key ""optionId"" in the fontSizesOptionsList provided:::5:::', () => { it(':::RJSCPSMPT7_TEST_11:::Page should consist of HTML option elements with text content as the value of the key ""displayText"" in the fontSizesOptionsList provided:::5:::', () => { it(':::RJSCPSMPT7_TEST_12:::When a non-empty value is provided for the HTML input element with label text ""Image URL"", the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCPSMPT7_TEST_13:::When a non-empty value is provided for the HTML input element with label text ""Top Text"", the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCPSMPT7_TEST_14:::When a non-empty value is provided for the HTML input element with label text ""Bottom Text"", the value provided should be updated in the value of the input element:::5:::', () => { it(':::RJSCPSMPT7_TEST_15:::When a option is selected in the HTML select element, the selected option should be updated as the value of the select element:::5:::', () => { it(':::RJSCPSMPT7_TEST_16:::Page should consist of a styled component as container element with data-testid as ""meme"":::5:::', () => { it(':::RJSCPSMPT7_TEST_17:::When a valid image url is provided for the HTML input element with label text ""Image URL"" and ""Generate"" button is clicked, then the provided image Url should be applied as a background-image for the styled component with data-testid as ""meme"":::5:::', () => { it(':::RJSCPSMPT7_TEST_18:::When a non-empty value is provided for the HTML input element with label text as ""Top Text"" and ""Generate"" button is clicked, then a paragraph styledComponent with text content as provided value should be displayed:::5:::', () => { it(':::RJSCPSMPT7_TEST_19:::When a non-empty value is provided for the HTML input element with label text as ""Bottom Text"" and ""Generate"" button is clicked, then a paragraph styledComponent with text content as provided value should be displayed:::5:::', () => { it(':::RJSCPSMPT7_TEST_20:::When non-empty values are provided for the HTML input and select elements and ""Generate"" button is clicked then provided font size value in the select element should be applied to both top and bottom text in the generated meme:::5:::', () => { '"
9a50c807bcbd47e9898b786b4f719711,cashWithdrawal,RJSCPTT9ER,/home/workspace/reactjs/coding-practices/cashWithdrawal,/home/workspace/.tmp/reactjs/coding-practices/cashWithdrawal/src,,"Tests from App.js: it(':::RJSCPTT9ER_TEST_1:::Page should consist of at least two HTML list items and the denominationsList should be rendered using a unique key as a prop for each denomination item:::5:::', () => { it(':::RJSCPTT9ER_TEST_2:::Page should consist of HTML paragraph element with text content as ""Your Balance"":::5:::', () => { it(':::RJSCPTT9ER_TEST_3:::Page should initially consist of HTML paragraph element with text content as ""2000"":::5:::', () => { it(':::RJSCPTT9ER_TEST_4:::Page should consist of HTML paragraph element with text content as ""Withdraw"":::5:::', () => { it(':::RJSCPTT9ER_TEST_5:::Page should consist of HTML paragraph element with text content as ""CHOOSE SUM (IN RUPEES)"":::5:::', () => { it(':::RJSCPTT9ER_TEST_6:::Page should consist of HTML unordered list element to display the list of denominations:::5:::', () => { it(':::RJSCPTT9ER_TEST_7:::Page should consist of at least four HTML list items to display the given list of denominations in denominationsList:::5:::', () => { it(':::RJSCPTT9ER_TEST_8:::Page should consist of HTML button elements with text content as values of the key ""value"" from denominationsList provided:::5:::', () => { it(':::RJSCPTT9ER_TEST_9:::When a denomination button is clicked, then the respective amount should be deducted from the balance available:::5:::', () => { '"
b7b9cdb95102411fbf5a508b23629103,events,RJSCPVRPWT,/home/workspace/reactjs/coding-practices/events,/home/workspace/.tmp/reactjs/coding-practices/events/src,,"Tests from App.js: it(':::RJSCPVRPWT_TEST_1:::Page should consist of at least two HTML list items and the eventsList should be rendered using a unique key as a prop for each event item:::5:::', () => { it(':::RJSCPVRPWT_TEST_2:::Page should consist of HTML main heading element with text content as ""Events"":::5:::', () => { it(':::RJSCPVRPWT_TEST_3:::Page should consist of HTML unordered list element to display the list of events:::5:::', () => { it(':::RJSCPVRPWT_TEST_4:::Page should consist of at least six HTML list items to display the list of events:::5:::', () => { it(':::RJSCPVRPWT_TEST_5:::Page should consist of at least six HTML button elements to wrap the image of each inside an HTML list item:::5:::', () => { it(':::RJSCPVRPWT_TEST_6:::Page should consist of HTML image elements with alt as ""event"" and src attribute value of the key ""imageUrl"" from each object in eventsList provided:::5:::', () => { it(':::RJSCPVRPWT_TEST_7:::Page should consist of HTML paragraph elements with text content as the value of the key ""name"" from each object in eventsList provided:::5:::', () => { it(':::RJSCPVRPWT_TEST_8:::Page should consist of HTML paragraph elements with text content as the value of the key ""location"" from each object in eventsList provided:::5:::', () => { it(':::RJSCPVRPWT_TEST_9:::Page should initially consist of HTML paragraph element with text content as ""Click on an event, to view its registration details"":::5:::', () => { it(':::RJSCPVRPWT_TEST_10:::When the image of an event item with ""registrationStatus"" as ""YET_TO_REGISTER"" is clicked, then the page should consist of an HTML image element with alt as ""yet to register"" and src attribute value as the given yet to register image URL:::5:::', () => { it(':::RJSCPVRPWT_TEST_11:::When the image of an event item with ""registrationStatus"" as ""YET_TO_REGISTER"" is clicked, then the page should consist of an HTML paragraph element starting with ""A live performance brings so much to your relationship with dance"":::5:::', () => { it(':::RJSCPVRPWT_TEST_12:::When the image of an event item with ""registrationStatus"" as ""YET_TO_REGISTER"" is clicked, then the page should consist of an HTML button element with text content as ""Register Here"":::5:::', () => { it(':::RJSCPVRPWT_TEST_13:::When the image of an event item with ""registrationStatus"" as ""REGISTER"" is clicked, then the page should consist of an HTML image element with alt as ""registered"" and src attribute value as the given registered image URL:::5:::', () => { it(':::RJSCPVRPWT_TEST_14:::When the image of an event item with ""registrationStatus"" as ""REGISTER"" is clicked, then the page should consist of an HTML main heading element with text content as ""You have already registered for the event"":::5:::', () => { it(':::RJSCPVRPWT_TEST_15:::When the image of an event item with ""registrationStatus"" as ""REGISTRATIONS_CLOSED"" is clicked, then the page should consist of an HTML image element with alt as ""registrations closed"" and src attribute value as the given registrations closed image URL:::5:::', () => { it(':::RJSCPVRPWT_TEST_16:::When the image of an event item with ""registrationStatus"" as ""REGISTRATIONS_CLOSED"" is clicked, then the page should consist of an HTML main heading element with text content as ""Registrations Are Closed Now!"":::5:::', () => { it(':::RJSCPVRPWT_TEST_17:::When the image of an event item with ""registrationStatus"" as ""REGISTRATIONS_CLOSED"" is clicked then the page should consist of an HTML paragraph element starting with ""Stay tuned. We will reopen"":::5:::', () => { '"
e9112781e43140f48d0ad4bb4fa35403,appointmentsApp,RJSCPW369F,/home/workspace/reactjs/coding-practices/appointmentsApp,/home/workspace/.tmp/reactjs/coding-practices/appointmentsApp/src,,"Tests from App.js: it(':::RJSCPW369F_TEST_1:::When a new appointment is added, the page should consist of at least one HTML list item and the appointments list should be rendered using a unique key as a prop for each appointment item:::5:::', () => { it(':::RJSCPW369F_TEST_2:::Page should consist of HTML main heading element with text content as ""Add Appointment"":::5:::', () => { it(':::RJSCPW369F_TEST_3:::Page should consist of HTML input element with label text as ""Title"":::5:::', () => { it(':::RJSCPW369F_TEST_4:::Page should consist of HTML input element with label text as ""Date"" and type attribute value as ""date"":::5:::', () => { it(':::RJSCPW369F_TEST_5:::Page should consist of HTML button element with text content as ""Add"":::5:::', () => { it(':::RJSCPW369F_TEST_6:::Page should consist of HTML image element with alt as ""appointments"" and src attribute value as the URL for appointments image:::5:::', () => { it(':::RJSCPW369F_TEST_7:::Page should consist of HTML main heading element with text content as ""Appointments"":::5:::', () => { it(':::RJSCPW369F_TEST_8:::Page should consist of HTML button element with text content as ""Starred"":::5:::', () => { it(':::RJSCPW369F_TEST_9:::Page should consist of HTML unordered list element to display the list of appointments:::5:::', () => { it(':::RJSCPW369F_TEST_10:::When a non-empty value is provided in the HTML input element with the label text ""Title"", the value inside the input element should be updated:::5:::', () => { it(':::RJSCPW369F_TEST_11:::When a non-empty value is provided in the HTML input element with the label text ""Date"", the value inside the input element should be updated:::5:::', () => { it(':::RJSCPW369F_TEST_12:::When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, the values inside the HTML input elements should be updated to their initial values:::5:::', () => { it(':::RJSCPW369F_TEST_13:::When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, the page should consist of an HTML list item to display the appointment:::5:::', () => { it(':::RJSCPW369F_TEST_14:::When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, an HTML paragraph element with text content as the title provided should be displayed:::5:::', () => { it(':::RJSCPW369F_TEST_15:::When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, an HTML paragraph element with text content as the formatted date should be displayed:::5:::', () => { it(':::RJSCPW369F_TEST_16:::When a new appointment is added, the appointment should consist of an HTML button element with data-testid as ""star"":::5:::', () => { it(':::RJSCPW369F_TEST_17:::When a new appointment is added, the appointment should consist of an HTML image element with alt as ""star"" and src value as URL for the star image:::5:::', () => { it(':::RJSCPW369F_TEST_18:::When a new appointment is added and the HTML button with data-testid as ""star"" is clicked, the appointment should consist of an HTML image with alt as ""star"" and src value as URL for the filled star image:::5:::', () => { it(':::RJSCPW369F_TEST_19:::When the HTML button with text content as ""Starred"" is active, only the list of starred appointments should be displayed:::5:::', () => { it(':::RJSCPW369F_TEST_20:::When the HTML button with text content as ""Starred"" is inactive, all the list of appointments should be displayed:::5:::', () => { '"
1370492dd0dd4dbcb0003de7133ec5a4,randomNumberGenerator,RJSCPWGO67,/home/workspace/reactjs/coding-practices/randomNumberGenerator,/home/workspace/.tmp/reactjs/coding-practices/randomNumberGenerator/src,,"Tests from App.js: it(':::RJSCPWGO67_TEST_1:::Page should consist of HTML main heading element with text content as ""Random Number"":::5:::', () => { it(':::RJSCPWGO67_TEST_2:::Page should consist of HTML paragraph element with text content as ""Generate a random number in the range of 0 to 100"":::5:::', () => { it(':::RJSCPWGO67_TEST_3:::Page should consist of HTML button element with text content as ""Generate"":::5:::', () => { it(':::RJSCPWGO67_TEST_4:::Page should initially consist of HTML paragraph element with text content as ""0"":::5:::', () => { it(':::RJSCPWGO67_TEST_5:::When Generate button is clicked, Math.random() should be used to generate a random number:::5:::', () => { it(':::RJSCPWGO67_TEST_6:::When Generate button is clicked, a random number should be generated between zero to hundred and displayed:::5:::', () => { '"
28c8e132753849f798495bc1c15a2763,fruitsCounter,RJSCPXAS42,/home/workspace/reactjs/coding-practices/fruitsCounter,/home/workspace/.tmp/reactjs/coding-practices/fruitsCounter/src,,"Tests from App.js: it(':::RJSCPXAS42_TEST_1:::Page should initially consist of HTML main heading element with text content as ""Bob ate 0 mangoes 0 bananas"":::5:::', () => { it(':::RJSCPXAS42_TEST_2:::Page should consist of HTML image element with alt attribute value as ""mango"":::5:::', () => { it(':::RJSCPXAS42_TEST_3:::Page should consist of HTML image element with alt attribute value as ""banana"":::5:::', () => { it(':::RJSCPXAS42_TEST_4:::Page should consist of HTML button element with text content as ""Eat Banana"":::5:::', () => { it(':::RJSCPXAS42_TEST_5:::Page should consist of HTML button element with text content as ""Eat Mango"":::5:::', () => { it(':::RJSCPXAS42_TEST_6:::When the ""Eat Mango"" button is clicked, the count of the mangoes eaten should be incremented by one:::5:::', () => { it(':::RJSCPXAS42_TEST_7:::When the ""Eat Banana"" button is clicked, the count of the bananas eaten should be incremented by one:::5:::', () => { '"
e82de0be74f34f0fb53d9e369e282b6f,rockPaperScissors,RJSCPYF1D1,/home/workspace/reactjs/coding-practices/rockPaperScissors,/home/workspace/.tmp/reactjs/coding-practices/rockPaperScissors/src,,"Tests from App.js: it(':::RJSCPYF1D1_TEST_1:::Page should consist of HTML main heading element with text content as ""Rock Paper Scissors"":::5:::', () => { it(':::RJSCPYF1D1_TEST_2:::Page should consist of HTML paragraph element with text content as ""Score"":::5:::', () => { it(':::RJSCPYF1D1_TEST_3:::Page should initially consist of an HTML paragraph element with ""0"" as text content:::5:::', () => { it(':::RJSCPYF1D1_TEST_4:::Page should initially consist of HTML button elements with data-testid attribute values as ""rockButton"", ""paperButton"" and ""scissorsButton"":::5:::', () => { it(':::RJSCPYF1D1_TEST_5:::Page should initially consist of HTML image elements with alt attribute value as the values of the key ""id"" and src attribute value as the values of the key ""imageUrl"" in choicesList provided:::5:::', () => { it(':::RJSCPYF1D1_TEST_6:::Page should initially consist of HTML button element with text content as ""Rules"":::5:::', () => { it(':::RJSCPYF1D1_TEST_7:::When the HTML button element with text content as ""Rules"" is clicked, it should trigger a popup using react-popup:::5:::', () => { it(':::RJSCPYF1D1_TEST_8:::When the HTML button with text content ""Rules"" is clicked, then the page should consist of HTML image element with alt attribute value as ""rules"" and src attribute value as URL for rules image:::5:::', () => { it(':::RJSCPYF1D1_TEST_9:::When the HTML button with data-testid ""rockButton"" is clicked, then the page should consist of an HTML main heading element with text content as ""Rock Paper Scissors"":::5:::', () => { it(':::RJSCPYF1D1_TEST_10:::When the HTML button with data-testid ""rockButton"" is clicked, then the page should consist of an HTML paragraph element with text content as ""Score"":::5:::', () => { it(':::RJSCPYF1D1_TEST_11:::When the HTML button with data-testid ""rockButton"" is clicked, then the page should consist of an HTML button element with text content as ""PLAY AGAIN"":::5:::', () => { it(':::RJSCPYF1D1_TEST_12:::Page should initially consist of an HTML paragraph element with ""0"" as text content with ""font-family"" value as ""Roboto"":::5:::', () => { it(':::RJSCPYF1D1_TEST_13:::In the ""GameResultView"", the page should consist of HTML image element with alt attribute value as ""your choice"" and src attribute value as URL for your choice image:::5:::', () => { it(':::RJSCPYF1D1_TEST_14:::In the ""GameResultView"", the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for opponent choice image:::5:::', () => { it(':::RJSCPYF1D1_TEST_15:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"":::5:::', () => { it(':::RJSCPYF1D1_TEST_16:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for rock image:::5:::', () => { it(':::RJSCPYF1D1_TEST_17:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is rock, then the score value will be the same:::5:::', () => { it(':::RJSCPYF1D1_TEST_18:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of an HTML paragraph element with text content as ""YOU WON"":::5:::', () => { it(':::RJSCPYF1D1_TEST_19:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for scissors image:::5:::', () => { it(':::RJSCPYF1D1_TEST_20:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is a scissors, then the score value will be incremented by one:::5:::', () => { it(':::RJSCPYF1D1_TEST_21:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is paper, then the page should consist of an HTML paragraph element with text content as ""YOU LOSE"":::5:::', () => { it(':::RJSCPYF1D1_TEST_22:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for paper image:::5:::', () => { it(':::RJSCPYF1D1_TEST_23:::When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is paper, then the score will be decremented by one:::5:::', () => { it(':::RJSCPYF1D1_TEST_24:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML paragraph element with text content as ""YOU WON"":::5:::', () => { it(':::RJSCPYF1D1_TEST_25:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for rock image:::5:::', () => { it(':::RJSCPYF1D1_TEST_26:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is rock, then the score will be incremented by one:::5:::', () => { it(':::RJSCPYF1D1_TEST_27:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML paragraph element with text content as ""YOU LOSE"":::5:::', () => { it(':::RJSCPYF1D1_TEST_28:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for scissors image:::5:::', () => { it(':::RJSCPYF1D1_TEST_29:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is a scissors, then the score will be decremented by one:::5:::', () => { it(':::RJSCPYF1D1_TEST_30:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is paper, then the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"":::5:::', () => { it(':::RJSCPYF1D1_TEST_31:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for paper image:::5:::', () => { it(':::RJSCPYF1D1_TEST_32:::When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is paper, then the score will be the same:::5:::', () => { it(':::RJSCPYF1D1_TEST_33:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is rock, then the page should consist of HTML paragraph element with text content as ""YOU LOSE"":::5:::', () => { it(':::RJSCPYF1D1_TEST_34:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is rock, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for rock image:::5:::', () => { it(':::RJSCPYF1D1_TEST_35:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is rock, then the score will be decremented by one:::5:::', () => { it(':::RJSCPYF1D1_TEST_36:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML paragraph element with text content as ""IT IS DRAW"":::5:::', () => { it(':::RJSCPYF1D1_TEST_37:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for scissors image:::5:::', () => { it(':::RJSCPYF1D1_TEST_38:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is a scissors, then the score will be the same :::5:::', () => { it(':::RJSCPYF1D1_TEST_39:::When the HTML button with testid ""scissorsButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML paragraph element with text content as ""YOU WON"":::5:::', () => { it(':::RJSCPYF1D1_TEST_40:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for paper image:::5:::', () => { it(':::RJSCPYF1D1_TEST_41:::When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is paper, then the score will be incremented by one:::5:::', () => { it(':::RJSCPYF1D1_TEST_42:::When the HTML button element with text content as ""PLAY AGAIN"" is clicked then it should get back to playing state:::5:::', () => { it(':::RJSCPYF1D1_TEST_43:::When the HTML button element with text content as ""PLAY AGAIN"" is clicked then the updated score should be displayed:::5:::', () => { '"
e34081639da3447fae0ddaf4654ddd56,destinationSearch,RJSCPZ6HLZ,/home/workspace/reactjs/coding-practices/destinationSearch,/home/workspace/.tmp/reactjs/coding-practices/destinationSearch/src,,"Tests from App.js: it(':::RJSCPZ6HLZ_TEST_1:::Page should consist of at least two HTML list items and the destinationsList should be rendered using a unique key as a prop for each destination item:::5:::', () => { it(':::RJSCPZ6HLZ_TEST_2:::Page should consist of HTML main heading element with text content as ""Destination Search"":::5:::', () => { it(':::RJSCPZ6HLZ_TEST_3:::Page should consist of HTML input element with type attribute value as ""search"":::5:::', () => { it(':::RJSCPZ6HLZ_TEST_4:::Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as the URL of the search icon:::5:::', () => { it(':::RJSCPZ6HLZ_TEST_5:::Page should consist of HTML unordered list element to display the list of destinations:::5:::', () => { it(':::RJSCPZ6HLZ_TEST_6:::Page should consist of at least twelve HTML list items to display destinations:::5:::', () => { it(':::RJSCPZ6HLZ_TEST_7:::Page should consist of HTML image elements with alt attribute value as ""{name}"" and src attribute value as the value of the key ""imgUrl"" from destinationsList provided:::5:::', () => { it(':::RJSCPZ6HLZ_TEST_8:::Page should consist of HTML paragraph elements with text content as the value of the key ""name"" from destinationsList provided:::5:::', () => { it(':::RJSCPZ6HLZ_TEST_9:::When a non-empty search text ""es"" is provided in search input, only the destinations whose names contain the value provided in the search input should be displayed irrespective of the case:::5:::', () => { '"
a64c63a6052d4eea931429d3edef1e4b,bookHub,RJSCPNRHL4,/home/workspace/reactjs/coding-practices/bookHub,/home/workspace/.tmp/reactjs/coding-practices/bookHub/src,,"Tests from BookshelvesRoute.js: it(':::RJSCPNRHL4_TEST_21:::When HTTP GET request in the Bookshelves Route is successful, then the page should consist of at least two HTML list items, and the books list should be rendered using a unique key as a prop to display each book item respectively:::10:::', async () => { it(':::RJSCPNRHL4_TEST_22:::When the Bookshelves Route is opened, an HTTP GET request should be made to the given Bookshelves API URL with the query parameters ""shelf"" and ""search"" with initial values as ""ALL"" and empty string respectively:::15:::', async () => { it(':::RJSCPNRHL4_TEST_23:::When ""/shelf"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login"":::15:::', () => { it(':::RJSCPNRHL4_TEST_24:::When ""/shelf"" is provided as the URL path by an authenticated user, then the page should be navigated to the Bookshelves Route and should consist of an HTML main heading element with text content as the value of key ""title"" received from the books response:::15:::', async () => { it(':::RJSCPNRHL4_TEST_25:::Bookshelves Route should consist of HTML button elements with text content as the values of the key ""label"" from bookshelvesList provided:::5:::', async () => { it(':::RJSCPNRHL4_TEST_26:::Bookshelves Route should initially consist of an HTML main heading element with text content ""All Books"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_27:::Bookshelves Route should consist of an HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_28:::Bookshelves Route should consist of an HTML button element with testid attribute value as ""searchButton"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_29:::Bookshelves Route should consist of ""BsSearch"" icon from ""react-icons"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_30:::When the Bookshelves Route is opened, an HTML container element with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPNRHL4_TEST_31:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML main heading elements with text content as the value of key ""title"" received from the books response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_32:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of an HTML main heading element with text content as ""Bookshelves"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_33:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of at least two HTML unordered list elements to display the nav items and books list received from the bookshelves response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_34:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML list elements to display the nav items and the books list received from the bookshelves response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_35:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""title"" and ""cover_pic"" respectively from the received Books response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_36:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""author_name"" received from the books response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_37:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of ""BsFillStarFill"" icon:::5:::', async () => { it(':::RJSCPNRHL4_TEST_38:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML paragraph elements with text content as ""Avg Rating"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_39:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML paragraph elements with text content as the values of the key ""rating"" respectively received from the books response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_40:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML paragraph elements with text content as ""Status"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_41:::When the HTTP GET request in the Bookshelves Route is successful, then the page should consist of HTML elements with text content as the value of the key ""read_status"" received from the books response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_42:::When a button in the bookshelves which is provided in the bookshelvesList is clicked, an HTTP GET request should be made with the value of the corresponding bookShelf as a value to query parameter ""shelf"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_43:::When a button in the bookshelvesList provided is clicked, then the page should consist of an HTML main heading element with text content as ""({bookshelf name}) Books"". Here bookshelf name refers to the clicked bookshelf label from the provided bookshelvesList:::5:::', async () => { it(':::RJSCPNRHL4_TEST_44:::When a non-empty value is provided in the search input of Bookshelves Route, then the value provided should be displayed in the HTML input element:::5:::', async () => { it(':::RJSCPNRHL4_TEST_45:::When a non-empty value is provided in the search input element and the search icon button is clicked, an HTTP GET request should be made with the value provided in the search input element as the value to query parameter ""search"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_46:::When a book item is clicked in the Bookshelves Route, then the page should be navigated to the Book Details route with ""/books/:id"" as the URL path and should consist of an HTML main heading element with text content as the value of the key ""title"" received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_47:::When the HTTP GET request made to the given Books API URL in the Bookshelves Route returns the books list as empty, then the page should consist of an HTML image element with alt attribute value as ""no books"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_48:::When the HTTP GET request in the Bookshelves Route returns the books list as empty, then the page should consist of an HTML paragraph element with text content as ""Your search for {searchValue} did not find any matches."" where searchValue is the value provided in Search Input:::5:::', async () => { it(':::RJSCPNRHL4_TEST_49:::When the HTTP GET request in the Bookshelves Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_50:::When the HTTP GET request in the Bookshelves Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_51:::When the HTTP GET request in the Bookshelves Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_52:::When the HTTP GET request in the Bookshelves Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to the given Books API URL:::5:::', async () => {  Tests from BookItemDetailsRoute.js: it(':::RJSCPNRHL4_TEST_1:::When the Book Details Route is opened, an HTTP GET request should be made to the given Book Details API URL with the book id as the path parameter:::5:::', () => { it(':::RJSCPNRHL4_TEST_2:::When ""/books/:id"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCPNRHL4_TEST_3:::When ""/books/:id"" is provided as the URL path by an authenticated user, then the page should be navigated to the Book Details Route and should consist of an HTML main heading element with text content as the value of the key ""title"" in books received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_4:::When the Book Details Route is opened, an HTML container element with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPNRHL4_TEST_5:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML image element with alt and src attribute values as the values of key ""title"" and ""cover_pic"" respectively received from the book details response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_6:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML main heading element with text content as the value of the key ""title"" in books received from the book details response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_7:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""author_name"" received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_8:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML paragraph element with text content starting with ""Avg Rating"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_9:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of ""BsFillStarFill"" icons from ""react-icons"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_10:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""rating"" received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_11:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML paragraph element with text content starting with ""Status:"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_12:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML element with text content as the value of the key ""read_status"" received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_13:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of HTML main heading element with text content as ""About Author"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_14:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""about_author"" received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_15:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of HTML main heading elements with text content as ""About Book"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_16:::When the HTTP GET request in the Book Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""about_book"" received from the book details response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_17:::When the HTTP GET request in the Book Details is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_18:::When the HTTP GET request in the Book Details is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_19:::When the HTTP GET request in the Book Details is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_20:::When the HTTP GET request in the Book Details is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to the given book details API URL:::5:::', async () => {  Tests from Login.js: it(':::RJSCPNRHL4_TEST_91:::When ""/login"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', async () => { it(':::RJSCPNRHL4_TEST_92:::When ""/login"" is provided as the URL path by an authenticated user, then the page should be navigated to Home Route and should consist of an HTML main heading element with text content as the value of the key ""title"" received from the top rated books response:::15:::', async () => { it(':::RJSCPNRHL4_TEST_93:::Login Route should consist of an HTML form element:::5:::', () => { it(':::RJSCPNRHL4_TEST_94:::Login Route should consist of a website login HTML image element with alt attribute value as ""website login"":::5:::', () => { it(':::RJSCPNRHL4_TEST_95:::Login Route should consist of a website logo HTML image element with alt attribute value as ""login website logo"":::5:::', () => { it(':::RJSCPNRHL4_TEST_96:::Login Route should consist of HTML input element with label text as ""Username*"" and type attribute value as ""text"":::5:::', () => { it(':::RJSCPNRHL4_TEST_97:::Login Route should consist of HTML input element with label text as ""Password*"" and type attribute value as ""password"":::5:::', () => { it(':::RJSCPNRHL4_TEST_98:::Login Route should consist of an HTML button element with text content as ""Login"" and type attribute value as ""submit"":::5:::', () => { it(':::RJSCPNRHL4_TEST_99:::When a non-empty value is provided in the HTML input element with the label text as ""Username*"", then the value provided should be displayed in the value of the input element:::10:::', () => { it(':::RJSCPNRHL4_TEST_100:::When a non-empty value is provided in the HTML input element with the label text as ""Password*"", then the value provided should be displayed in the value of the input element:::10:::', () => { it(':::RJSCPNRHL4_TEST_101:::When non-empty values are provided for username and password and the Login button is clicked, an HTTP POST request should be made to the given Login API URL:::5:::', async () => { it(':::RJSCPNRHL4_TEST_102:::When non-empty values are provided for username and password and the Login button is clicked, then an HTTP POST request should be made to the given Login API URL with request object containing the keys ""username"" and ""password"" with the values provided respectively:::10:::', async () => { it(':::RJSCPNRHL4_TEST_103:::When the invalid username and password are provided and the Login button is clicked, then the page should consist of an HTML paragraph element with text content as respective error message and the page should not be navigated:::10:::', async () => { it(':::RJSCPNRHL4_TEST_104:::When the valid username and password are provided and the Login button is clicked, then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument:::15:::', async () => { it(':::RJSCPNRHL4_TEST_105:::When the valid username and password are provided and the Login button is clicked, then the history.replace() method should be called with the argument ""/"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_106:::When the valid username and password are provided and the Login button is clicked, then the page should be navigated to the Home Route and should consist of an HTML heading element with text content as ""Find Your Next Favorite Books?"":::15:::', async () => {  Tests from HomeRoute.js: it(':::RJSCPNRHL4_TEST_71:::When HTTP GET request in the Home Route is successful, then the page should consist of at least two HTML list items, and the top rated books list should be rendered using a unique key as a prop for each top rated book item respectively:::10:::', async () => { it(':::RJSCPNRHL4_TEST_72:::When ""/"" is provided as the URL by an unauthenticated user, then the page should be navigated to the Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', () => { it(':::RJSCPNRHL4_TEST_73:::When ""/"" is provided as the URL by an authenticated user, then the page should be navigated to the Home Route and should consist of an HTML main heading element with text content as the value of the key ""title"" received from the top rated books response:::15:::', async () => { it(':::RJSCPNRHL4_TEST_74:::When the Home Route is opened, an HTML container element with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPNRHL4_TEST_75:::When the Home Route is opened, an HTTP GET request should be made to the Top Rated Books API URL:::10:::', async () => { it(':::RJSCPNRHL4_TEST_76:::When the HTTP GET request in the Home Route is successful, then the page should consist of ""Slider"" from ""react-slick"":::15:::', async () => { it(':::RJSCPNRHL4_TEST_77:::When the HTTP GET request in the Home Route is successful, then the page should consist of ""Slider"" from ""react-slick"" and prop ""slidesToShow"" value should be 4:::15:::', async () => { it(':::RJSCPNRHL4_TEST_78:::When the HTTP GET request in the Home Route is successful, then the page should consist of HTML main heading elements with text content as the values of the keys ""title"" respectively from the top rated books response received:::10:::', async () => { it(':::RJSCPNRHL4_TEST_79:::Home Route should consist of an HTML main heading element with text content as ""Find Your Next Favorite Books?"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_80:::Home Route should consist of an HTML paragraph element with text content starting with ""You are in the right place."":::5:::', async () => { it(':::RJSCPNRHL4_TEST_81:::Home Route should consist of an HTML button element with text content as ""Find Books"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_82:::Home Route should consist of an HTML main heading element with text content as ""Top Rated Books"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_83:::When the HTTP GET request in the Home Route is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""title"" and ""cover_pic"" respectively from the top rated books response received:::10:::', async () => { it(':::RJSCPNRHL4_TEST_84:::When the HTTP GET request in the Home Route is successful, then the page should consist of HTML paragraph elements with text content as the values of the keys ""author_name"" respectively from the top rated books response received:::10:::', async () => { it(':::RJSCPNRHL4_TEST_85:::When the ""Find Books"" button in the Home Route is clicked, then the page should be navigated to the Bookshelves Route and should consist of an HTML main heading element with text content as ""Bookshelves"":::10:::', async () => { it(':::RJSCPNRHL4_TEST_86:::When the top rated book item is clicked, then the page should be navigated to the Book Details route with ""/books/:id"" as the URL path and should consist of an HTML main heading element with text content as the value of the key ""title"" in books received from the book details response:::10:::', async () => { it(':::RJSCPNRHL4_TEST_87:::When the HTTP GET request in the Home Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_88:::When the HTTP GET request in the Home Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_89:::When the HTTP GET request in the Home Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_90:::When the HTTP GET request in the Home Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to the given Top Rated Books API URL:::10:::', async () => {  Tests from PageNotFoundComponent.js: it(':::RJSCPNRHL4_TEST_107:::When a random path is provided as the URL path, then the page should consist of an HTML image element with alt attribute value as ""not found"":::5:::', () => { it(':::RJSCPNRHL4_TEST_108:::When a random path is provided as the URL path, then the page should consist of an HTML main heading element with text content as ""Page Not Found"":::5:::', () => { it(':::RJSCPNRHL4_TEST_109:::When a random path is provided as the URL path, then the page should consist of an HTML paragraph element with text content as ""we are sorry, the page you requested could not be found"":::5:::', () => { it(':::RJSCPNRHL4_TEST_110:::When a random path is provided as the URL path, then the page should consist of an HTML button element with text content as ""Go Back to Home"":::5:::', () => { it(':::RJSCPNRHL4_TEST_111:::When a random path is provided as the URL path, then the page should consist of an HTML button element with text content as ""Go Back to Home"" is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPNRHL4_TEST_112:::When a random path is provided as the URL path and the ""Go Back to Home"" button is clicked, then the page should be navigated to Home Route and should consist of an HTML heading element with text content as the value of the key ""author_name"" received from the top rated books response:::15:::', async () => {  Tests from Header.js: it(':::RJSCPNRHL4_TEST_56:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_57:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"", wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPNRHL4_TEST_58:::Home Route should consist of at least one HTML unordered list element to display the list of nav items in the Header:::5:::', async () => { it(':::RJSCPNRHL4_TEST_59:::Home Route should consist of HTML list elements to display the nav items in the Header:::5:::', async () => { it(':::RJSCPNRHL4_TEST_60:::Home Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPNRHL4_TEST_61:::Bookshelves Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPNRHL4_TEST_62:::Book Details Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPNRHL4_TEST_63:::Home Route should consist of an HTML element with text content as ""Bookshelves"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPNRHL4_TEST_64:::Home Route should consist of an HTML button element with text content as ""Logout"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_65:::When the Bookshelves link of Home Route in the Header is clicked, then the page should be navigated to the Bookshelves Route and should consist of an HTML main heading element with text content as the value of the key ""title"" received from the bookshelves response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_66:::When the Logout button of Home Route in the Header is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_67:::When the Logout button of Home Route in the Header is clicked, the history.replace() method should be called with the argument as ""/login"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_68:::When the Logout button of Home Route in the Header is clicked, then the page should be navigated to the Login Route and should consist of an HTML button element with text content as ""Login"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_69:::When the Home link of Bookshelves Route in the Header is clicked, then the page should be navigated to the Home Route and should consist of an HTML main heading element with text content as the value of the key ""title"" received from the top rated books response:::5:::', async () => { it(':::RJSCPNRHL4_TEST_70:::When the Home link of Book Details Route in the Header is clicked, then the page should be navigated to the Home Route and should consist of an HTML main heading element with text content as the value of the key ""title"" received from the top rated books response:::5:::', async () => {  Tests from Footer.js: it(':::RJSCPNRHL4_TEST_53:::Home Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_54:::Bookshelves Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => { it(':::RJSCPNRHL4_TEST_55:::Book Details Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => { '"
11164ecf20c04aee9aade716e329330d,boxes,RJSCPHB1SE,/home/workspace/reactjs/coding-practices/boxesApp,/home/workspace/.tmp/reactjs/coding-practices/boxesApp/src,,"Tests from Boxes.js: it(':::RJSCPHB1SE_TEST_1:::JSX code implementation should consist of JSX syntax for HTML main heading element at least once:::5:::', () => { it(':::RJSCPHB1SE_TEST_2:::JSX code implementation should consist of JSX syntax <Box /> to render Boxes at least thrice:::5:::', () => { '"
a86d055cdaf04d36a6c8bcb13ee64c42,digitalTimerApp,RJSCPF77TH,/home/workspace/reactjs/coding-practices/digitalTimer,/home/workspace/.tmp/reactjs/coding-practices/digitalTimer/src,,"Tests from DigitalTimer.js: it(':::RJSCPF77TH_TEST_1:::Page should consist of HTML heading element with text content as ""Digital Timer"":::5:::', () => { it(':::RJSCPF77TH_TEST_2:::Page should initially consist of HTML heading element with text content as Timer limit value ""25:00"":::5:::', () => { it(':::RJSCPF77TH_TEST_3:::Page should initially consist of HTML paragraph element with text content as ""Paused"":::5:::', () => { it(':::RJSCPF77TH_TEST_4:::Page should consist of HTML image element with src attribute value as the URL for Play icon and alt text as ""play icon"":::5:::', () => { it(':::RJSCPF77TH_TEST_5:::Page should consist of HTML button element with text content as ""Start"":::5:::', () => { it(':::RJSCPF77TH_TEST_6:::Page should consist of HTML image element with src attribute value as the URL for Reset icon and alt text as ""reset icon"":::5:::', () => { it(':::RJSCPF77TH_TEST_7:::Page should consist of HTML button element with text content as ""Reset"":::5:::', () => { it(':::RJSCPF77TH_TEST_8:::Page should consist of HTML paragraph element with text content as ""Set Timer limit"":::5:::', () => { it(':::RJSCPF77TH_TEST_9:::Page should consist of HTML paragraph element with text content as ""25"":::5:::', () => { it(':::RJSCPF77TH_TEST_10:::Page should consist of HTML button element with text content as ""+"" (plus):::5:::', () => { it(':::RJSCPF77TH_TEST_11:::Page should consist of HTML button element with text content as ""-"" (minus):::5:::', () => { it(':::RJSCPF77TH_TEST_12:::When clicked on Start button the page should consist of HTML button element with text content as ""Pause"" by replacing the ""Start"":::5:::', () => { it(':::RJSCPF77TH_TEST_13:::When clicked on Start button the page should consist of HTML image element with src as URL for pause icon and alt text as ""pause icon"":::5:::', () => { it(':::RJSCPF77TH_TEST_14:::When clicked on Start button the Timer should start running backward and the page should consist of HTML heading element with text content displaying the elapsed time:::5:::', async () => { it(':::RJSCPF77TH_TEST_15:::When clicked on Start button the page should consist of HTML paragraph element with text content as ""Running"" by replacing the ""Paused"" text:::5:::', () => { it(':::RJSCPF77TH_TEST_16:::When clicked on Pause button the page should consist of HTML button element with text content as ""Start"" by replacing the ""Pause"" text:::5:::', () => { it(':::RJSCPF77TH_TEST_17:::When clicked on Pause button the page should consist of HTML image element with src as URL for play icon and alt text as ""play icon"":::5:::', () => { it(':::RJSCPF77TH_TEST_18:::When clicked on Pause button the Timer should stop running backward and the page should consist of HTML heading element with text content displaying the remaining time:::5:::', async () => { it(':::RJSCPF77TH_TEST_19:::When clicked on Pause button the page should consist of HTML paragraph element with text content as ""Paused"" by replacing the ""Running"" text:::5:::', () => { it(':::RJSCPF77TH_TEST_20:::When clicked on Start button after pausing the timer then the Timer should start again:::5:::', async () => { it(':::RJSCPF77TH_TEST_21:::When the timer is started and Reset button is clicked the timer should stop and reset to default value:::5:::', () => { it(':::RJSCPF77TH_TEST_22:::When the HTML button element with ""+"" as text content is clicked then the timer limit value should be incremented by one:::5:::', () => { it(':::RJSCPF77TH_TEST_23:::When the HTML button element with ""-"" as text content is clicked then the timer limit value should be decremented by one:::5:::', () => { it(':::RJSCPF77TH_TEST_24:::When the Timer is running and the HTML button with text content as ""+"" is clicked then the timer limit value should not increase:::5:::', () => { it(':::RJSCPF77TH_TEST_25:::When the Timer is running and the HTML button with text content as ""-"" is clicked then the timer limit value should not decrease:::5:::', () => { '"
3b4b3726747546fb90df6ec57c8fee81,emojiGame,RJSCPU31DB,/home/workspace/reactjs/coding-practices/emojiGame,/home/workspace/.tmp/reactjs/coding-practices/emojiGame/src,,"Tests from EmojiGame.js: it(':::RJSCPU31DB_TEST_1:::Page should consist of at least two HTML list items and the emojisList should be rendered using a unique key as a prop for each emoji card:::5:::', () => { it(':::RJSCPU31DB_TEST_2:::When the user clicks the HTML button element with the text ""Play Again"" then the Top Score of the game should change if the user score is greater than the Top Score:::5:::', () => { it(':::RJSCPU31DB_TEST_3:::Page should consist of an HTML main heading element with ""Emoji Game"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_4:::Page should consist of an HTML image element with alt as ""emoji logo"" and src attribute value as the URL for emoji game logo:::5:::', () => { it(':::RJSCPU31DB_TEST_5:::Page should consist of an HTML paragraph element with text content as ""Score: 0"" initially:::5:::', () => { it(':::RJSCPU31DB_TEST_6:::Page should consist of an HTML paragraph element with text content as ""Top Score: 0"" initially:::5:::', () => { it(':::RJSCPU31DB_TEST_7:::Page should consist of at least twelve HTML button elements each inside a HTML list item:::5:::', () => { it(':::RJSCPU31DB_TEST_8:::Page should consist of at least twelve HTML image elements each inside a HTML button element with alt equal to the ""emojiName"" value and src equal to the ""emojiUrl"" value in emojisList provided :::5:::', () => { it(':::RJSCPU31DB_TEST_9:::When the user has won the game then the page should consist of an HTML main heading element with ""You Won"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_10:::When the user has won the game then the page should consist of an HTML paragraph element with ""Best Score"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_11:::When the user has won the game then the page should consist of an HTML paragraph element with ""12/12"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_12:::When the user has won the game then the page should consist of an HTML button element with ""Play Again"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_13:::When the user has won the game then the page should consist of an HTML image element with alt as ""win or lose"" and src attribute value as the URL for the won game image:::5:::', () => { it(':::RJSCPU31DB_TEST_14:::When the user has won the game then the page should not contain HTML paragraph elements with text content as ""Score"" and ""Top Score"":::5:::', () => { it(':::RJSCPU31DB_TEST_15:::When the user clicks an HTML button element with the text ""Play Again"" after completing the game then the game should be started - with at least twelve emojis displayed:::5:::', () => { it(':::RJSCPU31DB_TEST_16:::When the user clicks any emoji twice then the page should consist of an HTML main heading element with ""You Lose"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_17:::When the user clicks an emoji twice then the page should consist of an HTML paragraph element with ""Score"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_18:::When the user clicks an emoji twice then the page should consist of an HTML button element with ""Play Again"" as text content:::5:::', () => { it(':::RJSCPU31DB_TEST_19:::When the user clicks an emoji twice then the page should consist of an HTML image element with alt as ""win or lose"" and src attribute value as the URL for the lose game image:::5:::', () => { it(':::RJSCPU31DB_TEST_20:::When the user has lost the game and clicks an HTML button element with the text ""Play Again"" after completing the game then the game should be started - with at least twelve emojis displayed:::5:::', () => { '"
13e7b7484c8446538ab36953ca081703,miniGames,RJSCPV4I9G,/home/workspace/reactjs/coding-practices/miniGames,/home/workspace/.tmp/reactjs/coding-practices/miniGames/src,,"Tests from EmojiGame.js: it(':::RJSCPV4I9G_TEST_43:::Game Playing View should consist of at least two HTML list items, and the emoji cards list should be rendered using a unique key as a prop for each emoji card item respectively:::5:::', () => { it(':::RJSCPV4I9G_TEST_44:::Game Rules View should consist of at least one HTML main heading element with the text content as ""Emoji Game"":::5:::', () => { it(':::RJSCPV4I9G_TEST_45:::Game Rules View should consist of an HTML button element with text content as ""Back"":::5:::', () => { it(':::RJSCPV4I9G_TEST_46:::Game Rules View should consist of a ""BiArrowBack"" icon imported from the ""react-icons/bi"" package:::15:::', async () => { it(':::RJSCPV4I9G_TEST_47:::When the ""Back"" button is clicked in the Game Rules View, then the page should be navigated to Home Route:::10:::', () => { it(':::RJSCPV4I9G_TEST_48:::Game Rules View should consist of an HTML image element with alt attribute value as ""emoji game"":::5:::', () => { it(':::RJSCPV4I9G_TEST_49:::Game Rules View should consist of an HTML main heading element with the text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_50:::Game Rules View should consist of an HTML unordered list element to display the list of rules:::5:::', async () => { it(':::RJSCPV4I9G_TEST_51:::Game Rules View should consist of at least six HTML list items to display the rules:::5:::', async () => { it(':::RJSCPV4I9G_TEST_52:::Game Rules View should consist of at least six HTML list elements with the text content of rules of the game given:::5:::', async () => { it(':::RJSCPV4I9G_TEST_53:::Game Rules View should consist of an HTML button element with text content as ""Start playing"":::5:::', async () => { it(':::RJSCPV4I9G_TEST_54:::When the ""Start playing"" button is clicked in the Game Rules View, then the Game Playing View should be displayed, and the page should consist of an HTML paragraph element with text content as ""Score: 0"":::10:::', () => { it(':::RJSCPV4I9G_TEST_55:::Game Playing View should consist of an HTML image element with alt attribute value as ""emoji logo"":::5:::', () => { it(':::RJSCPV4I9G_TEST_56:::Game Playing View should consist of an HTML button element with text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_57:::Game Playing View should consist of an HTML unordered list element to display the list of emoji cards:::10:::', () => { it(':::RJSCPV4I9G_TEST_58:::Game Playing View should consist of at least twelve HTML list items to display the emoji cards:::5:::', async () => { it(':::RJSCPV4I9G_TEST_59:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_60:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an HTML heading element with text content as ""Rules"" in the modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_61:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of the ""Close"" button with data-testid attribute value as ""close"" in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_62:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an ""CgClose"" icon imported from the ""react-icons/cg"" package:::15:::', async () => { it(':::RJSCPV4I9G_TEST_63:::When the ""Close"" button with data-testid attribute value as ""close"" is clicked in the rules modal of the Game Playing View, then the HTML heading element with text content as ""Rules"" should not be visible to the user:::10:::', () => { it(':::RJSCPV4I9G_TEST_64:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least two HTML unordered list elements to display the list of rules given and the emoji cards list:::10:::', () => { it(':::RJSCPV4I9G_TEST_65:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least eighteen HTML list items to display the emoji cards and rules in the modal from ""react-modal"":::5:::', async () => { it(':::RJSCPV4I9G_TEST_66:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of six HTML list items with the text content of rules in the modal from ""react-modal"":::5:::', async () => { it(':::RJSCPV4I9G_TEST_67:::Game Playing View should consist of at least twelve HTML button elements each inside an HTML list item:::5:::', () => { it(':::RJSCPV4I9G_TEST_68:::Game Playing View should consist of at least twelve HTML image elements each inside an HTML button element with alt attribute value as (emojisArray) given in instructions:::5:::', () => { it(':::RJSCPV4I9G_TEST_69:::When the user clicks an emoji twice in the Game Playing View, then the Game Results View should be displayed and the page should consist of an HTML main heading element with text content as ""You Lose"":::10:::', () => { it(':::RJSCPV4I9G_TEST_70:::Game Results View should consist of an HTML paragraph element with text content as ""Score"":::5:::', () => { it(':::RJSCPV4I9G_TEST_71:::Game Results View should consist of an HTML button element with text content as ""Play Again"":::5:::', () => { it(':::RJSCPV4I9G_TEST_72:::When the user clicks an HTML button element with the text content as ""Play Again"" in the Game Results View, then the Game Playing View should be displayed, and the page should consist of an HTML main heading element with the text content as ""Emoji Game"":::10:::', () => { it(':::RJSCPV4I9G_TEST_73:::If the game is in the loss state then the Game Results View should consist of an HTML image element with alt attribute value as ""lose"":::5:::', () => { it(':::RJSCPV4I9G_TEST_74:::If the game is in the won state then the Game Results View should consist of an HTML main heading element with text content as ""You Won"":::10:::', () => { it(':::RJSCPV4I9G_TEST_75:::If the game is in the won state then the Game Results View should consist of an HTML paragraph element with text content as ""Best Score"":::5:::', () => { it(':::RJSCPV4I9G_TEST_76:::If the game is in the won state then the Game Results View should consist of an HTML paragraph element with text content as ""12/12"":::5:::', () => { it(':::RJSCPV4I9G_TEST_77:::If the game is in the won state then the Game Results View should consist of an HTML image element with alt attribute value as ""won"":::5:::', () => {  Tests from CardFlipMemoryGame.js: it(':::RJSCPV4I9G_TEST_1:::Game Playing View should consist of at least two HTML list items, and the cards list should be rendered using a unique key as a prop for each card item respectively:::5:::', () => { it(':::RJSCPV4I9G_TEST_2:::Game Rules View should consist of an HTML image element with alt attribute value as ""card flip memory game"":::5:::', () => { it(':::RJSCPV4I9G_TEST_3:::Game Rules View should consist of an HTML button element with text content as ""Back"":::5:::', () => { it(':::RJSCPV4I9G_TEST_4:::Game Rules View should consist of a ""BiArrowBack"" icon imported from the ""react-icons/bi"" package:::5:::', () => { it(':::RJSCPV4I9G_TEST_5:::When the ""Back"" button is clicked in the Game Rules View, then the page should be navigated to Home Route:::5:::', () => { it(':::RJSCPV4I9G_TEST_6:::Game Rules View should consist of an HTML main heading element with the text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_7:::Game Rules View should consist of an HTML unordered list element to display the list of rules:::5:::', () => { it(':::RJSCPV4I9G_TEST_8:::Game Rules View should consist of at least seven HTML list items to display the rules:::5:::', () => { it(':::RJSCPV4I9G_TEST_9:::Game Rules View should consist of at least seven HTML list items with the rules of the game given:::5:::', () => { it(':::RJSCPV4I9G_TEST_10:::Game Rules View should consist of an HTML button element with text content as ""Start playing"":::5:::', () => { it(':::RJSCPV4I9G_TEST_11:::When the ""Start playing"" button is clicked in the Game Rules View, then the Game Playing View should be displayed, and the page should consist of an HTML main heading element with text content as ""Card-Flip Memory Game"":::10:::', () => { it(':::RJSCPV4I9G_TEST_12:::Game Playing View should consist of an HTML button element with text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_13:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_14:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an HTML heading element with text content as ""Rules"" in the modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_15:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of the ""Close"" button with testid attribute value as ""close"" in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_16:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an ""CgClose"" icon imported from the ""react-icons/cg"" package:::5:::', () => { it(':::RJSCPV4I9G_TEST_17:::When the ""Close"" button with testid attribute value as ""close"" is clicked in the rules modal of the Game Playing View, then the HTML heading element with text content as ""Rules"" should not be visible to the user:::5:::', () => { it(':::RJSCPV4I9G_TEST_18:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least two HTML unordered list elements to display the list of rules given and the cards list:::5:::', () => { it(':::RJSCPV4I9G_TEST_19:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least twenty seven HTML list items to display the cards and rules in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_20:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least seven HTML list items with the text content of rules in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_21:::Game Playing View should initially consist of an HTML paragraph element with text content as ""Card flip count - 0"" initially:::5:::', () => { it(':::RJSCPV4I9G_TEST_22:::Game Playing View should initially consist of an HTML paragraph element to display the timer left with text content as ""02:00"":::5:::', () => { it(':::RJSCPV4I9G_TEST_23:::When the ""Start playing"" button is clicked in the Game Rules View, then the timer should start running backwards:::5:::', () => { it(':::RJSCPV4I9G_TEST_24:::Game Playing View should initially consist of an HTML paragraph element with text content as ""Score - 0"":::5:::', () => { it(':::RJSCPV4I9G_TEST_25:::Game Playing View should consist of twenty HTML button elements with testid attribute values ""cardsData"" given:::5:::', () => { it(':::RJSCPV4I9G_TEST_26:::When a button with testid attribute value as ""tiger"" is clicked in the Game Playing View, then the card should be flipped face-up and the page should consist of an HTML image element with alt attribute value as ""tiger"":::10:::', () => { it(':::RJSCPV4I9G_TEST_27:::When only one button is clicked in the Game Playing View, then the card should be flipped face-up and flipped face-up card should not be flipped face-down after two seconds:::5:::', () => { it(':::RJSCPV4I9G_TEST_28:::When the same button is clicked twice in the Game Playing View, then the card should be flipped face-up and the Card flipped count should not be increased:::10:::', () => { it(':::RJSCPV4I9G_TEST_29:::When the two buttons with different testid attribute values are clicked in the Game Playing View, then the two cards should be flipped face-up and the Card flipped count should be incremented by one:::10:::', () => { it(':::RJSCPV4I9G_TEST_30:::When the two buttons with same testid attribute values are clicked in the Game Playing View, then the two cards should be flipped face-up and the Card flipped count should be incremented by one:::10:::', () => { it(':::RJSCPV4I9G_TEST_31:::When the two buttons with different testid attribute values are clicked in the Game Playing View, then the two cards should be flipped face-up, and Score should not be increased:::5:::', () => { it(':::RJSCPV4I9G_TEST_32:::When the two buttons with different testid attribute values are clicked in the Game Playing View, then the two cards should be flipped face-up, and the two flipped face-up cards should be flipped face-down after two seconds:::10:::', () => { it(':::RJSCPV4I9G_TEST_33:::When the two buttons with the same testid attribute values are clicked in the Game Playing View, then the two cards should be flipped face-up, and Score should be incremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_34:::When the two buttons with the same testid attribute values are clicked in the Game Playing View, then the two cards should be flipped face-up, and the two flipped face-up cards should not be flipped face-down after two seconds:::5:::', () => { it(':::RJSCPV4I9G_TEST_35:::When all the matching cards are flipped face-up by clicking the buttons with the same testid attribute value, then the won state Game Results View should be displayed and the page should consist of an HTML image element with alt attribute value as ""grinning face with big eyes"":::10:::', () => { it(':::RJSCPV4I9G_TEST_36:::If the game is in the won state then the Game Results View should consist of an HTML heading element with text content as ""Congratulations"":::5:::', () => { it(':::RJSCPV4I9G_TEST_37:::If the game is completed with the ""11"" card flips in the Game Playing View, then the Game Results View should consist of an HTML paragraph element with the text content as ""No.of Flips - 11"":::5:::', () => { it(':::RJSCPV4I9G_TEST_38:::Game Results View should consist of an HTML button element with text content as ""Play Again"":::5:::', () => { it(':::RJSCPV4I9G_TEST_39:::If the game is in the won state then the Game Results View should consist of an HTML main heading element with text content as ""You matched all of the cards in record time"":::5:::', () => { it(':::RJSCPV4I9G_TEST_40:::If unable to find all the matching cards in the given time, then the loss state Game Results View should be displayed and the page should consist of an HTML image element with alt attribute value as ""neutral face"":::10:::', () => { it(':::RJSCPV4I9G_TEST_41:::If the game is in the loss state then the Game Results View should consist of an HTML heading element with text content as ""Better luck next time"":::5:::', () => { it(':::RJSCPV4I9G_TEST_42:::If the game is in the loss state then the Game Results View should consist of an HTML main heading element with text content as ""You did not match all of the cards in record time"":::5:::', () => {  Tests from HomeRoute.js: it(':::RJSCPV4I9G_TEST_78:::Home Route should consist of an HTML main heading element with the text content as ""Games"":::5:::', () => { it(':::RJSCPV4I9G_TEST_79:::Home Route should consist of an HTML unordered list element to display the list of games:::5:::', async () => { it(':::RJSCPV4I9G_TEST_80:::Home Route should consist of at least four HTML list items to display the list of games:::5:::', async () => { it(':::RJSCPV4I9G_TEST_81:::Each Game Card in the Home Route should be wrapped with the ""Link"" from ""react-router-dom"":::10:::', async () => { it(':::RJSCPV4I9G_TEST_82:::Home Route should consist of an HTML image element with alt attribute value as ""emoji game"":::5:::', () => { it(':::RJSCPV4I9G_TEST_83:::Home Route should consist of an HTML image element with alt attribute value as ""memory matrix"":::5:::', () => { it(':::RJSCPV4I9G_TEST_84:::Home Route should consist of an HTML image element with alt attribute value as ""rock paper scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_85:::Home Route should consist of an HTML image element with alt attribute value as ""card flip memory game"":::5:::', () => { it(':::RJSCPV4I9G_TEST_86:::When the Emoji Game card is clicked, then the page should be navigated to Emoji Game Route:::10:::', () => { it(':::RJSCPV4I9G_TEST_87:::When the Memory Matrix card is clicked, then the page should be navigated to Memory Matrix Route:::5:::', () => { it(':::RJSCPV4I9G_TEST_88:::When the Rock Paper Scissor card is clicked, then the page should be navigated to Rock Paper Scissor Route:::5:::', () => { it(':::RJSCPV4I9G_TEST_89:::When the Card-Flip Memory Game card is clicked, then the page should be navigated to Card-Flip Memory Game Route:::5:::', () => {  Tests from RockPaperScissor.js: it(':::RJSCPV4I9G_TEST_136:::Game Rules View should consist of an HTML main heading element with the text content as ""Rock Paper Scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_137:::Game Rules View should consist of an HTML image element with alt attribute value as ""rock paper scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_138:::Game Rules View should consist of an HTML button element with text content as ""Back"":::5:::', () => { it(':::RJSCPV4I9G_TEST_139:::Game Rules View should consist of a ""BiArrowBack"" icon imported from the ""react-icons/bi"" package:::5:::', async () => { it(':::RJSCPV4I9G_TEST_140:::When the ""Back"" button is clicked in the Game Rules View, then the page should be navigated to Home Route:::10:::', () => { it(':::RJSCPV4I9G_TEST_141:::Game Rules View should consist of an HTML main heading element with the text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_142:::Game Rules View should consist of an HTML unordered list element to display the list of rules:::5:::', async () => { it(':::RJSCPV4I9G_TEST_143:::Game Rules View should consist of at least twelve HTML list items to display the rules given:::5:::', async () => { it(':::RJSCPV4I9G_TEST_144:::Game Rules View should consist of at least twelve HTML list items with the text content of rules of the game given:::5:::', async () => { it(':::RJSCPV4I9G_TEST_145:::Game Rules View should consist of an HTML button element with text content as ""Start playing"":::5:::', async () => { it(':::RJSCPV4I9G_TEST_146:::When the ""Start playing"" button is clicked in the Game Rules View, then the Game Playing View should be displayed, and the page should consist of an HTML main heading element with text content as ""Let’s pick"":::10:::', () => { it(':::RJSCPV4I9G_TEST_147:::Game Playing View should consist of an HTML button element with text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_148:::Game Playing View should consist of at least three HTML button elements with data-testid attribute values as ""rockButton"", ""paperButton"" and ""scissorButton"":::5:::', () => { it(':::RJSCPV4I9G_TEST_149:::Game Playing View should consist of at least three HTML image elements with alt attribute values as ""rock"", ""paper"" and ""scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_150:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_151:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an HTML heading element with text content as ""Rules"" in the modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_152:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of the ""Close"" button with data-testid attribute value as ""close"" in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_153:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an ""CgClose"" icon imported from the ""react-icons/cg"" package:::5:::', async () => { it(':::RJSCPV4I9G_TEST_154:::When the ""Close"" button with data-testid attribute value as ""close"" is clicked in the rules modal of the Game Playing View, then the HTML heading element with text content as ""Rules"" should not be visible to the user:::10:::', () => { it(':::RJSCPV4I9G_TEST_155:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least an HTML unordered list element to display the list of rules in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_156:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least twelve HTML list items to display the rules in the modal from ""react-modal"":::5:::', async () => { it(':::RJSCPV4I9G_TEST_157:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of twelve HTML list items with the text content of rules in the modal from ""react-modal"":::5:::', async () => { it(':::RJSCPV4I9G_TEST_158:::When any of the HTML button elements with data-testid attribute value as ""rockButton"", ""paperButton"" and ""scissorButton"" is clicked in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML button element with text content as ""Play Again"":::10:::', () => { it(':::RJSCPV4I9G_TEST_159:::When the HTML button element with text content as ""Play Again"" is clicked in the Game Results View, then the Game Playing View should be displayed, and the page should consist of an HTML main heading element with text content as ""Lets pick"":::10:::', () => { it(':::RJSCPV4I9G_TEST_160:::Game Results View should consist of two HTML main heading elements with text content as ""Rock Paper Scissor"":::10:::', () => { it(':::RJSCPV4I9G_TEST_161:::Game Results View should consist of an HTML paragraph element with text content as ""Score"":::5:::', () => { it(':::RJSCPV4I9G_TEST_162:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""scissor"" for your choice image:::10:::', () => { it(':::RJSCPV4I9G_TEST_163:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked and if the opponent choice is rock in the Game Playing View,, then the Game Results View should be displayed, and the page should consist of an HTML image element with the alt attribute value as ""rock"" of the opponent choice image:::5:::', () => { it(':::RJSCPV4I9G_TEST_164:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"":::10:::', () => { it(':::RJSCPV4I9G_TEST_165:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the same score:::10:::', () => { it(':::RJSCPV4I9G_TEST_166:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""YOU WON"":::10:::', () => { it(':::RJSCPV4I9G_TEST_167:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_168:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the score incremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_169:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""YOU LOSE"":::5:::', () => { it(':::RJSCPV4I9G_TEST_170:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""paper"":::5:::', () => { it(':::RJSCPV4I9G_TEST_171:::When the HTML button with data-testid attribute value as ""rockButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the score decremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_172:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""YOU WON"":::10:::', () => { it(':::RJSCPV4I9G_TEST_173:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""rock"":::10:::', () => { it(':::RJSCPV4I9G_TEST_174:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the score incremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_175:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""YOU LOSE"":::5:::', () => { it(':::RJSCPV4I9G_TEST_176:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_177:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the score decremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_178:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"":::5:::', () => { it(':::RJSCPV4I9G_TEST_179:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""paper"":::5:::', () => { it(':::RJSCPV4I9G_TEST_180:::When the HTML button with data-testid attribute value as ""paperButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the same score:::5:::', () => { it(':::RJSCPV4I9G_TEST_181:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""YOU LOSE"":::10:::', () => { it(':::RJSCPV4I9G_TEST_182:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""rock"":::10:::', () => { it(':::RJSCPV4I9G_TEST_183:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is rock in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the score decremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_184:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"":::5:::', () => { it(':::RJSCPV4I9G_TEST_185:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""scissor"":::5:::', () => { it(':::RJSCPV4I9G_TEST_186:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is a scissor in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the same score:::5:::', () => { it(':::RJSCPV4I9G_TEST_187:::When the HTML button with data-testid ""scissorButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with text content as ""YOU WON"":::5:::', () => { it(':::RJSCPV4I9G_TEST_188:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML image element with alt attribute value as ""paper"":::5:::', () => { it(':::RJSCPV4I9G_TEST_189:::When the HTML button with data-testid attribute value as ""scissorButton"" is clicked, and if the opponent choice is paper in the Game Playing View, then the Game Results View should be displayed, and the page should consist of an HTML paragraph element with the score incremented by one:::5:::', () => { it(':::RJSCPV4I9G_TEST_190:::If the game is in the won state then the Game Results View should consist of an HTML image element with alt attribute value as ""won emoji"":::5:::', () => { it(':::RJSCPV4I9G_TEST_191:::If the game is in the won state then the Game Results View should consist of an HTML image element with alt attribute value as ""Smiling face with star eyes"":::5:::', () => { it(':::RJSCPV4I9G_TEST_192:::If the game is in the draw state then the Game Results View should consist of an HTML image element with alt attribute value as ""draw emoji"":::5:::', () => { it(':::RJSCPV4I9G_TEST_193:::If the game is in the draw state then the Game Results View should consist of an HTML image element with alt attribute value as ""Face without mouth"":::5:::', () => { it(':::RJSCPV4I9G_TEST_194:::If the game is in the loss state then the Game Results View should consist of an HTML image element with alt attribute value as ""lose emoji"":::5:::', () => { it(':::RJSCPV4I9G_TEST_195:::If the game is in the loss state then the Game Results View should consist of an HTML image element with alt attribute value as ""Face without mouth"":::5:::', () => {  Tests from MemoryMatrix.js: it(':::RJSCPV4I9G_TEST_90:::Game Playing View should consist of at least two HTML list items, and the Grid cells should be rendered using a unique key as a prop for each cell item respectively:::5:::', () => { it(':::RJSCPV4I9G_TEST_91:::Game Rules View should consist of an HTML main heading element with the text content as ""Memory Matrix"":::5:::', () => { it(':::RJSCPV4I9G_TEST_92:::Game Rules View should consist of an HTML image element with alt attribute value as ""memory matrix"":::5:::', () => { it(':::RJSCPV4I9G_TEST_93:::Game Rules View should consist of an HTML button element with text content as ""Back"":::5:::', () => { it(':::RJSCPV4I9G_TEST_94:::Game Rules View should consist of a ""BiArrowBack"" icon imported from the ""react-icons/bi"" package:::5:::', () => { it(':::RJSCPV4I9G_TEST_95:::When the ""Back"" button is clicked in the Game Rules View, then the page should be navigated to Home Route:::10:::', () => { it(':::RJSCPV4I9G_TEST_96:::Game Rules View should consist of an HTML main heading element with the text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_97:::Game Rules View should consist of an HTML unordered list element to display the list of rules:::5:::', () => { it(':::RJSCPV4I9G_TEST_98:::Game Rules View should consist of at least seven HTML list items to display the rules:::5:::', () => { it(':::RJSCPV4I9G_TEST_99:::Game Rules View should consist of at least seven HTML list items to display the rules given:::5:::', () => { it(':::RJSCPV4I9G_TEST_100:::Game Rules View should consist of an HTML button element with text content as ""Start playing"":::5:::', () => { it(':::RJSCPV4I9G_TEST_101:::When the ""Start playing"" button is clicked in the Game Rules View, then the Game Playing View should be displayed, and the page should consist of an HTML button element with text content as ""Rules"":::5:::', () => { it(':::RJSCPV4I9G_TEST_102:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_103:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an HTML heading element with text content as ""Rules"" in the modal from ""react-modal"":::10:::', () => { it(':::RJSCPV4I9G_TEST_104:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of the ""Close"" button with test id attribute value as ""close"" in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_105:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of an ""CgClose"" icon imported from the ""react-icons/cg"" package:::5:::', () => { it(':::RJSCPV4I9G_TEST_106:::When the ""Close"" button with data-testid attribute value as ""close"" is clicked in the rules modal of the Game Playing View, then the HTML heading element with text content as ""Rules"" should not be visible to the user:::5:::', () => { it(':::RJSCPV4I9G_TEST_107:::When the ""Rules"" button is clicked in the Game Playing View, then the page should consist of at least an HTML unordered list element to display the list of rules given and the list of Grid cells:::5:::', () => { it(':::RJSCPV4I9G_TEST_108:::When the ""Rules"" button is clicked in the Game Playing View in the first level of the game, then the page should consist of at least sixteen HTML list items to display the Grid cells and rules in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_109:::When the ""Rules"" button is clicked in the Game Playing View in the first level of the game, then the page should consist of at least seven HTML list items with the text content of rules in the modal from ""react-modal"":::5:::', () => { it(':::RJSCPV4I9G_TEST_110:::Game Playing View should initially consist of an HTML paragraph element with text content as ""Level - 1"":::5:::', () => { it(':::RJSCPV4I9G_TEST_111:::Game Playing View should consist of at least ""N * N - N"" HTML button elements with data-testid attribute values as ""notHighlighted"" in each level, where N starts from ""3"":::5:::', () => { it(':::RJSCPV4I9G_TEST_112:::Game Playing View should consist of at least ""N"" HTML button elements with data-testid attribute values as ""highlighted"" in each level, where N starts from ""3"":::5:::', () => { it(':::RJSCPV4I9G_TEST_113:::In the Game Playing View, all the ""N*N"" cells should be disabled for the first N seconds in each level, where N starts from ""3"":::10:::', () => { it(':::RJSCPV4I9G_TEST_114:::When not clicking any of the cells in the Game Playing View within given N seconds after highlighted cells are hidden in the level, then the Game Results View should be displayed, and should consist of an HTML main heading element with text content as ""Congratulations"":::15:::', () => { it(':::RJSCPV4I9G_TEST_115:::When any of the not highlighted cells is clicked in the Game Playing View after highlighted cells are hidden in a level, then the Game Results View should be displayed, and the page should consist of an HTML main heading element with text content as ""Congratulations"":::15:::', () => { it(':::RJSCPV4I9G_TEST_116:::When all the N highlighted cells in a level are clicked in the Game Playing View after highlighted cells are hidden in the level, then the page should consists of ""Level - ({levelNumber})"", here levelNumber is the value of the next level:::15:::', () => { it(':::RJSCPV4I9G_TEST_117:::When any of the not highlighted cells is clicked in the Game Playing View after highlighted cells are hidden in the first level, then the Game Results View should be displayed, and the page should consist of 0% progress in the progress bar from ""rc-progress"":::15:::', () => { it(':::RJSCPV4I9G_TEST_118:::When a not highlighted cell is clicked after clicking a highlighted cell in the Game Playing View after highlighted cells are hidden in the tenth level, then the Game Results View should consist of 60% progress in the progress bar from ""rc-progress"":::5:::', () => { it(':::RJSCPV4I9G_TEST_119:::When a not highlighted cell is clicked after clicking a highlighted cell in the Game Playing View after highlighted cells are hidden in the tenth level, then the Game Results View should consist of HTML main heading element with text content as ""You have reached level 9"":::5:::', () => { it(':::RJSCPV4I9G_TEST_120:::In each level when all the N highlighted cells in a level are clicked in the Game Playing View after highlighted cells are hidden, then the Game Results View should be displayed, the page should consist of 100% progress in the progress bar from ""rc-progress"":::5:::', () => { it(':::RJSCPV4I9G_TEST_121:::In each level when all the N highlighted cells in a level are clicked in the Game Playing View after highlighted cells are hidden, then the Game Results View should be displayed, the page should consist of an HTML main heading element with text content as ""You have reached level 15"":::10:::', () => { it(':::RJSCPV4I9G_TEST_122:::Game Results View should consist of an HTML button element with text content as ""Play Again"":::5:::', () => { it(':::RJSCPV4I9G_TEST_123:::When the user clicks an HTML button element with the text content as ""Play Again"" in the Game Results View, then the Game Playing View should be displayed, and the page should consist of an HTML main heading element with the text content as ""Memory Matrix"":::10:::', () => { it(':::RJSCPV4I9G_TEST_124:::Game Results View should consist of an HTML image element with alt attribute value as ""neutral face"":::5:::', () => { it(':::RJSCPV4I9G_TEST_125:::Game Results View should consist of an HTML image element with alt attribute value as ""grimacing face"":::5:::', () => { it(':::RJSCPV4I9G_TEST_126:::Game Results View should consist of an HTML image element with alt attribute value as ""slightly smiling face"":::5:::', () => { it(':::RJSCPV4I9G_TEST_127:::Game Results View should consist of an HTML image element with alt attribute value as ""grinning face with big eyes"":::5:::', () => { it(':::RJSCPV4I9G_TEST_128:::Game Results View should consist of an HTML image element with alt attribute value as ""grinning face with smiling eyes"":::5:::', () => { it(':::RJSCPV4I9G_TEST_129:::Game Results View should consist of an HTML image element with alt attribute value as ""beaming face with smiling eyes"":::5:::', () => { it(':::RJSCPV4I9G_TEST_130:::Game Results View should consist of an HTML image element with alt attribute value as ""grinning face"":::5:::', () => { it(':::RJSCPV4I9G_TEST_131:::Game Results View should consist of an HTML image element with alt attribute value as ""smiling face with sunglasses"":::5:::', () => { it(':::RJSCPV4I9G_TEST_132:::Game Results View should consist of an HTML paragraph element with text content as ""Level 1"":::5:::', () => { it(':::RJSCPV4I9G_TEST_133:::Game Results View should consist of an HTML paragraph element with text content as ""Level 5"":::5:::', () => { it(':::RJSCPV4I9G_TEST_134:::Game Results View should consist of an HTML paragraph element with text content as ""Level 10"":::5:::', () => { it(':::RJSCPV4I9G_TEST_135:::Game Results View should consist of an HTML paragraph element with text content as ""Level 15"":::5:::', () => { '"
6d2fdd10285e4198836c0029fe74c431,evenOddApp,RJSCPM3DAE,/home/workspace/reactjs/coding-practices/evenOddApp,/home/workspace/.tmp/reactjs/coding-practices/evenOddApp/src,,"Tests from even-odd-app.js: it(':::RJSCPM3DAE_TEST_1:::Page should initially consist of an HTML heading element with text content as ""Count 0"":::5:::', () => { it(':::RJSCPM3DAE_TEST_2:::Page should initially consist of an HTML paragraph element with text content as ""Count is Even"":::5:::', () => { it(':::RJSCPM3DAE_TEST_3:::Page should consist of an HTML button element with text content as ""Increment"":::5:::', () => { it(':::RJSCPM3DAE_TEST_4:::Page should consist of an HTML paragraph element with text content as ""Increase By Random Number Between 0 to 100"":::5:::', () => { it(':::RJSCPM3DAE_TEST_5:::When the Increment button is clicked, the count should be increased by a random number between zero to hundred:::5:::', () => { it(':::RJSCPM3DAE_TEST_6:::CSS code implementation should not contain ""display"" property with value ""none"":::5:::', () => { it(':::RJSCPM3DAE_TEST_7:::When the Increment button is clicked, and the incremented count is even, then the HTML paragraph element text content should be changed to ""Count is Even"":::5:::', () => { it(':::RJSCPM3DAE_TEST_8:::When the Increment button is clicked, and the incremented count is odd, then the HTML paragraph element text content should be changed to ""Count is Odd"":::5:::', () => { '"
646f8e922b604b48b11efebd08bc64c4,faqsApp,RJSCPC7UBX,/home/workspace/reactjs/coding-practices/faqsApp,/home/workspace/.tmp/reactjs/coding-practices/faqsApp/src,,"Tests from Faq.js: it(':::RJSCPC7UBX_TEST_1:::Page should consist of at least two HTML list items and the faqsList should be rendered using a unique key as a prop for each FAQ item:::5:::', () => { it(':::RJSCPC7UBX_TEST_2:::Each FAQ item should consist of an HTML main heading element with text content equal to the ""question"" value of the FAQ item in faqsList provided:::5:::', () => { it(':::RJSCPC7UBX_TEST_3:::When the plus icon in a FAQ item is clicked, then the HTML paragraph element with text content equal to the ""answer"" value in faqsList provided should be displayed:::5:::', () => { it(':::RJSCPC7UBX_TEST_4:::When the plus icon in a FAQ item is clicked, then the plus icon should be replaced with an HTML image element with alt as ""minus"" and src value as the URL for the minus icon:::5:::', () => { it(':::RJSCPC7UBX_TEST_5:::When the minus icon in a FAQ item is clicked, then the HTML paragraph element with text content equal to the ""answer"" value in faqsList provided should be hidden:::5:::', () => { it(':::RJSCPC7UBX_TEST_6:::When the minus icon in a FAQ item is clicked, then the minus icon should be replaced with an HTML image element with alt as ""plus"" and src value as the URL for the plus icon:::5:::', () => { it(':::RJSCPC7UBX_TEST_7:::Page should consist of at least four HTML image elements with alt as ""plus"" and src value as the URL for the plus icon:::5:::', () => { it(':::RJSCPC7UBX_TEST_8:::Page should consist of all FAQs in faqsList provided:::10:::', () => { '"
31e34fc426a4407881bd7347980c8823,feedbackApp,RJSCPCMJQ7,/home/workspace/reactjs/coding-practices/feedbackApp,/home/workspace/.tmp/reactjs/coding-practices/feedbackApp/src,,"Tests from Feedback.js: it(':::RJSCPCMJQ7_TEST_1:::Page should consist of at least two HTML list items and the emojis should be rendered using a unique key as a prop for each emoji:::5:::', () => { it(':::RJSCPCMJQ7_TEST_2:::Page should consist of an HTML heading element with text content as ""How satisfied are you with our customer support performance"":::5:::', () => { it(':::RJSCPCMJQ7_TEST_3:::Page should consist of HTML image elements with alt value equal to the ""name"" value and src value equal to the ""imageUrl"" value in resources provided:::5:::', () => { it(':::RJSCPCMJQ7_TEST_4:::When the user clicks an emoji, then the page should consist of HTML main heading element with text content as ""Thank You"":::5:::', () => { it(':::RJSCPCMJQ7_TEST_5:::When the user clicks an emoji, then the page should consist of HTML image element with alt value as ""love emoji"" value and src equal to the ""loveEmojiUrl"" value in resources provided:::5:::', () => { '"
2d09a228926143a3bf993f77fcd8ace7,galleryApp,RJSCPF54VJ,/home/workspace/reactjs/coding-practices/galleryApp,/home/workspace/.tmp/reactjs/coding-practices/galleryApp/src,,"Tests from Gallery.js: it(':::RJSCPF54VJ_TEST_1:::Page should consist of at least two HTML list items and the imagesList should be rendered using a unique key as a prop for each thumbnail item:::5:::', () => { it(':::RJSCPF54VJ_TEST_2:::Page should initially consist of HTML image element with alt equal to the ""imageAltText"" and src value equal to the ""imageUrl"" of the first object in imagesList provided:::5:::', () => { it(':::RJSCPF54VJ_TEST_3:::Page should consist of HTML main heading element with text content as ""Nature Photography"" and HTML paragraph element with text content as ""Nature Photography by Rahul"":::5:::', () => { it(':::RJSCPF54VJ_TEST_4:::Page should consist of HTML unordered list element to display the thumbnails:::5:::', () => { it(':::RJSCPF54VJ_TEST_5:::Page should consist of at least eight HTML button elements each inside an HTML list item:::5:::', () => { it(':::RJSCPF54VJ_TEST_6:::Page should consist of at least eight HTML image elements with alt value equal to the ""thumbnailAltText"" and src value equal to the ""thumbnailUrl"" in imagesList provided:::5:::', () => { it(':::RJSCPF54VJ_TEST_7:::When a thumbnail image is clicked, then the active image should have alt equal to the ""imageAltText"" and src value equal to the ""imageUrl"" of the thumbnail clicked:::5:::', () => { '"
0a375d385c074acd9d1c3e020144d7bf,githubPopularRepos,RJSCPYR39R,/home/workspace/reactjs/coding-practices/githubPopularRepos,/home/workspace/.tmp/reactjs/coding-practices/githubPopularRepos/src,,"Tests from GithubPopularRepos.js: it(':::RJSCPYR39R_TEST_1:::Page should consist of at least two HTML list items and the languageFiltersData and the repositories list received from the response should be rendered using a unique key as a prop for each language filter item and repository item respectively:::5:::', async () => { it(':::RJSCPYR39R_TEST_2:::JSX code implementation in the component GithubPopularRepos should consist of import statement for Loader component from the package react-loader-spinner:::5:::', () => { it(':::RJSCPYR39R_TEST_3:::Page should consist of an HTML heading element with ""Popular"" as text content:::5:::', async () => { it(':::RJSCPYR39R_TEST_4:::Page should consist of HTML button elements with text content as the value of key ""language"" from the language filter items:::5:::', async () => { it(':::RJSCPYR39R_TEST_5:::When the page is opened, an HTTP GET request should be made to githubReposApiUrl:::5:::', async () => { it(':::RJSCPYR39R_TEST_6:::When the page is opened initially, an HTTP GET request should be made with ""ALL"" as the value to query parameter ""language"":::5:::', async () => { it(':::RJSCPYR39R_TEST_7:::When a language filter button is clicked, an HTTP GET request should be made with the id of the languageFilter as value to query parameter ""language"":::5:::', async () => { it(':::RJSCPYR39R_TEST_8:::When the page is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPYR39R_TEST_9:::When the HTTP GET request is successful, then the page should consist of at least four HTML image elements to display avatar_url, star icon URL, forks icon URL, and issues icon URL:::5:::', async () => { it(':::RJSCPYR39R_TEST_10:::When the HTTP GET request is successful, then the page should consist of HTML image elements with alt as the value of the key ""name"" and src as the value of key ""avatar_url"" in popular_repos from the repositories received from the response:::5:::', async () => { it(':::RJSCPYR39R_TEST_11:::When the HTTP GET request is successful, then the page should consist of an HTML image elements with alt as ""stars"" and src as given star icon URL:::5:::', async () => { it(':::RJSCPYR39R_TEST_12:::When the HTTP GET request is successful, then the page should consist of an HTML image elements with alt as ""forks"" and src as given forks icon URL:::5:::', async () => { it(':::RJSCPYR39R_TEST_13:::When the HTTP GET request is successful, then the page should consist of an HTML image elements with alt as ""open issues"" and src as given issues icon URL:::5:::', async () => { it(':::RJSCPYR39R_TEST_14:::When the HTTP GET request is successful, then the page should consist of an HTML main heading element with text content as the value of the key ""name"" in each item from the repositories received from the response:::5:::', async () => { it(':::RJSCPYR39R_TEST_15:::When the HTTP GET request is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""stars_count"" in each item from the repositories received from the response:::5:::', async () => { it(':::RJSCPYR39R_TEST_16:::When the HTTP GET request is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""forks_count"" in each item from the repositories received from the response:::5:::', async () => { it(':::RJSCPYR39R_TEST_17:::When the HTTP GET request is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""issues_count"" in each item from the repositories received from the response:::5:::', async () => { '"
08806910535347f6aef45a9475cb6075,iplDashboardApp,RJSCP9EFN6,/home/workspace/reactjs/coding-practices/iplDashboardApp,/home/workspace/.tmp/reactjs/coding-practices/iplDashboardApp/src,,"Tests from IPLDashboard.js: it(':::RJSCP9EFN6_TEST_1:::Page should consist of at least two HTML list items and the teams list received in the response should be rendered using a unique key as a prop for each team card item:::5:::', async () => { it(':::RJSCP9EFN6_TEST_2:::Home Route should consist of an HTML main heading element with text content as ""IPL Dashboard"":::5:::', async () => { it(':::RJSCP9EFN6_TEST_3:::Home Route should consist of an HTML image element with alt attribute value as ""ipl logo"" and src attribute value as the URL for IPL Logo image:::5:::', async () => { it(':::RJSCP9EFN6_TEST_4:::When the Home Route is opened, it should initially consist of an HTML container element with testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCP9EFN6_TEST_5:::When the Home Route is opened, an HTTP GET request should be made to the given teamsApiUrl to get the list of IPL teams:::5:::', async () => { it(':::RJSCP9EFN6_TEST_6:::When the HTTP GET request made in Home Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""name"" in teams received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_7:::When the HTTP GET request made in Home Route is successful, then the page should consist of HTML image elements with alt and src values equal to the ""name"" and ""team_image_url"" in teams received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_8:::When a team card is clicked in Home Route, then the page should be navigated to the Team Matches Route with ""/team-matches/:id"" in the URL:::5:::', async () => { it(':::RJSCP9EFN6_TEST_9:::When a ""/bad-path"" is provided in the URL, then the page should be navigated to Not Found Route and consist of an HTML heading element with text content as ""Page Not Found"":::5:::', async () => { it(':::RJSCP9EFN6_TEST_10:::Page should consist of at least eight team cards wrapped with the Link from react-router-dom:::5:::', async () => {  Tests from TeamMatches.js: it(':::RJSCP9EFN6_TEST_11:::Page should consist of at least two HTML list items and the recent matches list received in the response should be rendered using a unique key as a prop for each recent match:::5:::', async () => { it(':::RJSCP9EFN6_TEST_12:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""umpires"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_13:::When the Team Matches Route is opened, it should initially contain an HTML container element with testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCP9EFN6_TEST_14:::When the Team Matches Route is opened, an HTTP GET request should be made to the given teamMatchesApiUrl to get recent matches based on the team selected:::5:::', async () => { it(':::RJSCP9EFN6_TEST_15:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML image element with alt as ""team banner"" and src value equal to the ""team_banner_url"" received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_16:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""competing_team"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_17:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""date"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_18:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""venue"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_19:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""result"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_20:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image element with alt value as ""latest match {competing_team}"" and src value equal to the ""competing_team_logo"" in latest match details received in response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_21:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph element with text content equal to the ""first_innings"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_22:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""second_innings"" in latest match details received in the response :::5:::', async () => { it(':::RJSCP9EFN6_TEST_23:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""man_of_the_match"" in latest match details received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_24:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image elements with alt as ""competing team {competing_team}"" and src value equal to the ""competing_team_logo"" in recent matches received in response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_25:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""competing_team"" in recent matches received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_26:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""result"" in recent matches received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_27:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""match_status"" in recent matches received in the response:::5:::', async () => { it(':::RJSCP9EFN6_TEST_28:::When ""/team-matches/:id"" is provided in the URL, then the page should be navigated to the Team Matches Route and consists of the respective umpire names:::5:::', async () => { it(':::RJSCP9EFN6_TEST_29:::When the Team Matches Route is opened and back is clicked in the browser, then the page should be navigated to the Home Route:::5:::', async () => { '"
09b381b1acb04de3aad5e457d22c203f,debuggingIPLDashboard,RJSCPNE8JJ,/home/workspace/reactjs/coding-practices/debuggingIPLDashboard,/home/workspace/.tmp/reactjs/coding-practices/debuggingIPLDashboard/src,,"Tests from IPLDashboard.js: it(':::RJSCPNE8JJ_TEST_1:::Page should consist of at least two HTML list items and the teams list received in the response should be rendered using a unique key as a prop for each team card item:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_2:::Home Route should consist of an HTML main heading element with text content as ""IPL Dashboard"":::5:::', async () => { it(':::RJSCPNE8JJ_TEST_3:::Home Route should consist of an HTML image element with alt attribute value as ""ipl logo"" and src attribute value as the URL for IPL Logo image:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_4:::When the Home Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCPNE8JJ_TEST_5:::When the Home Route is opened, an HTTP GET request should be made to the given teamsApiUrl to get the list of IPL teams:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_6:::When the HTTP GET request made in Home Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""name"" in teams received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_7:::When the HTTP GET request made in Home Route is successful, then the page should consist of HTML image elements with alt and src values equal to the ""name"" and ""team_image_url"" in teams received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_8:::When a team card is clicked in Home Route, then the page should be navigated to the Team Matches Route with ""/team-matches/:id"" in the URL:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_9:::When a ""/bad-path"" is provided in the URL, then the page should be navigated to Not Found Route and consist of an HTML heading element with text content as ""Page Not Found"":::5:::', async () => { it(':::RJSCPNE8JJ_TEST_10:::Page should consist of at least eight team cards wrapped with the Link from react-router-dom each inside a HTML list item:::5:::', async () => {  Tests from TeamMatches.js: it(':::RJSCPNE8JJ_TEST_11:::Page should consist of at least two HTML list items and the recent matches list received in the response should be rendered using a unique key as a prop for each recent match:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_12:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""umpires"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_13:::When the Team Matches Route is opened, it should initially contain an HTML container element with data-testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCPNE8JJ_TEST_14:::When the Team Matches Route is opened, an HTTP GET request should be made to the given teamMatchesApiUrl to get recent matches based on the team selected:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_15:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML image element with alt as ""team banner"" and src value equal to the ""team_banner_url"" received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_16:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""competing_team"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_17:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""date"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_18:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""venue"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_19:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""result"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_20:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image element with alt value as ""latest match {competing_team}"" and src value equal to the ""competing_team_logo"" in latest match details received in response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_21:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph element with text content equal to the ""first_innings"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_22:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""second_innings"" in latest match details received in the response :::5:::', async () => { it(':::RJSCPNE8JJ_TEST_23:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""man_of_the_match"" in latest match details received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_24:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image elements with alt as ""competing team {competing_team}"" and src value equal to the ""competing_team_logo"" in recent matches received in response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_25:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""competing_team"" in recent matches received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_26:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""result"" in recent matches received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_27:::When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""match_status"" in recent matches received in the response:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_28:::When ""/team-matches/:id"" is provided in the URL, then the page should be navigated to the Team Matches Route and consists of the respective umpire names:::5:::', async () => { it(':::RJSCPNE8JJ_TEST_29:::When the Team Matches Route is opened and back is clicked in the browser, then the page should be navigated to the Home Route:::5:::', async () => { '"
4f15b6eb32c443ec921fe9b408ff7c4d,jobbyApp,RJSCPAW11J,/home/workspace/reactjs/coding-practices/jobbyApp,/home/workspace/.tmp/reactjs/coding-practices/jobbyApp/src,,"Tests from JobItemDetails.js: it(':::RJSCPAW11J_TEST_19:::When HTTP GET request in the Job Item Details Route is successful, then the page should consist of at least two HTML list items and the skills list and similar jobs list received from the response should be rendered using a unique key as a prop to display each skill and similar job respectively:::5:::', async () => { it(':::RJSCPAW11J_TEST_20:::When ""/jobs/:id"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCPAW11J_TEST_21:::Job Item Details Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo image URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_22:::When the Job Item Details Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCPAW11J_TEST_23:::When the Job Item Details Route is opened, an HTTP GET request should be made to the given Job Details API URL with the job id as the path parameter:::5:::', () => { it(':::RJSCPAW11J_TEST_24:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML image element with alt attribute value as ""job details company logo"" and src as the value of key ""company_logo_url"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_25:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML image element with text content as the value of the key ""title"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_26:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""rating"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_27:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""location"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_28:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""employment_type"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_29:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""package_per_annum"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_30:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of at least four HTML main heading elements with text content as ""Description"":::5:::', async () => { it(':::RJSCPAW11J_TEST_31:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""job_description"" in job_details received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_32:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML anchor element with href attribute value of the key ""company_website_url"" and text content as ""Visit"":::5:::', async () => { it(':::RJSCPAW11J_TEST_33:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML main heading element with text content as ""Skills"":::5:::', async () => { it(':::RJSCPAW11J_TEST_34:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of at least three HTML unordered list elements to display nav item, skills and similar jobs received from the response:::5:::', async () => { it(':::RJSCPAW11J_TEST_35:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML image elements with alt attribute value as the values of the key ""name"" and src as the values of the key ""image_url"" in the ""skills"" list received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_36:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML main heading element with text content as ""Life at Company"":::5:::', async () => { it(':::RJSCPAW11J_TEST_37:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""description"" in ""life_at_company"" from job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_38:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML image element with alt attribute value as ""life at company"" and src as the value of the key ""image_url"" in ""life_at_company"" from job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_39:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML main heading element with text content as ""Similar Jobs"":::5:::', async () => { it(':::RJSCPAW11J_TEST_40:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML image elements with alt attribute value as ""similar job company logo"" and src as the values of the key ""company_logo_url"" in similar_jobs received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_41:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML main heading elements with text content as the values of the key ""title"" in similar_jobs received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_42:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the values of the key ""rating"" in similar_jobs received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_43:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""location"" in similar_jobs received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_44:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""employment_type"" in similar_jobs received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_45:::When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""job_description"" in similar_jobs received from the job details response:::5:::', async () => { it(':::RJSCPAW11J_TEST_46:::When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"" and src as the given failure view image URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_47:::When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML main heading element with text content as ""Oops! Something Went Wrong"":::5:::', async () => { it(':::RJSCPAW11J_TEST_48:::When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""We cannot seem to find the page you are looking for"":::5:::', async () => { it(':::RJSCPAW11J_TEST_49:::When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Retry"":::5:::', async () => { it(':::RJSCPAW11J_TEST_50:::When the HTTP GET request in the Job Item Details Route is unsuccessful and the ""Retry"" button is clicked, then an HTTP GET request should be made to the given Job Details API URL:::5:::', async () => {  Tests from Login.js: it(':::RJSCPAW11J_TEST_93:::When ""/login"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCPAW11J_TEST_94:::When ""/login"" is provided as the URL path by an authenticated user, then the page should be navigated to the Home Route and consist of an HTML main heading element with text content as ""Find The Job That Fits Your Life"":::5:::', () => { it(':::RJSCPAW11J_TEST_95:::Login Route should consist of an HTML form element:::5:::', () => { it(':::RJSCPAW11J_TEST_96:::Login Route should consist of an HTML image element with alt attribute ""website logo"" and src as the given website logo image URL:::5:::', () => { it(':::RJSCPAW11J_TEST_97:::Login Route should consist of an HTML input element with label text as ""USERNAME"":::5:::', () => { it(':::RJSCPAW11J_TEST_98:::Login Route should consist of an HTML input element with label text as ""USERNAME"" and type attribute value as ""text"":::5:::', () => { it(':::RJSCPAW11J_TEST_99:::Login Route should consist of an HTML input element with label text as ""PASSWORD"":::5:::', () => { it(':::RJSCPAW11J_TEST_100:::Login Route should consist of an HTML input element with label text as ""PASSWORD"" and type attribute value as ""password"":::5:::', () => { it(':::RJSCPAW11J_TEST_101:::Login Route should consist of an HTML button element with text content as ""Login"" and type attribute value as ""submit"":::5:::', () => { it(':::RJSCPAW11J_TEST_102:::When a non-empty value is provided in the HTML input element with the label text as ""USERNAME"", then the value provided should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPAW11J_TEST_103:::When a non-empty value is provided in the HTML input element with the label text as ""PASSWORD"", then the value provided should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPAW11J_TEST_104:::When non-empty values are provided for username and password input and the Login button is clicked, an HTTP POST request should be made to the given Login API URL:::5:::', () => { it(':::RJSCPAW11J_TEST_105:::When non-empty values are provided for username and password input and the Login button is clicked, then an HTTP POST request should be made to the given Login API URL with request object containing the keys ""username"" and ""password"" with the values provided respectively:::5:::', () => { it(':::RJSCPAW11J_TEST_106:::When username and password are empty and the Login button is clicked, then the page should consist of an HTML paragraph element with text content as error message received from the response and the page should not be navigated:::5:::', async () => { it(':::RJSCPAW11J_TEST_107:::when a non-empty password is provided and the Login button is clicked with an empty username, then the page should consist of an HTML paragraph element with text content as error message received from the response and the page should not be navigated:::5:::', async () => { it(':::RJSCPAW11J_TEST_108:::when a non-empty username is provided and the Login button is clicked with an empty password, then the page should consist of an HTML paragraph element with text content as error message received from the response and the page should not be navigated:::5:::', async () => { it(':::RJSCPAW11J_TEST_109:::when invalid username and password are provided and the Login button is clicked, then the page should consist of an HTML paragraph element with text content as error message received from the response and the page should not be navigated:::5:::', async () => { it(':::RJSCPAW11J_TEST_110:::when an invalid username and valid password are provided and the Login button is clicked, then the page should consist of an HTML paragraph element with text content as an error message received from the response and the page should not be navigated:::5:::', async () => { it(':::RJSCPAW11J_TEST_111:::when a valid username and an invalid password are provided and the Login button is clicked, then the page should consist of an HTML paragraph element with text content as error message received from the response and the page should not be navigated:::5:::', async () => { it(':::RJSCPAW11J_TEST_112:::When valid username and password are provided and the Login button is clicked, then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument:::5:::', async () => { it(':::RJSCPAW11J_TEST_113:::When valid username and password are provided and the Login button is clicked, then the history.replace() method should be called with the argument ""/"":::5:::', async () => { it(':::RJSCPAW11J_TEST_114:::When valid username and password are provided and the login button is clicked, then the page should be navigated to the Home Route:::5:::', async () => {  Tests from NotFound.js: it(':::RJSCPAW11J_TEST_115:::When a random path is provided as the URL path, then the page should be navigated to the Not Found Route and should consist of an HTML image element with alt attribute value as ""not found"" and src as the given not found image URL:::5:::', () => { it(':::RJSCPAW11J_TEST_116:::When a random path is provided as the URL path, then the page should consist of an HTML main heading element with text content as ""Page Not Found"":::5:::', () => { it(':::RJSCPAW11J_TEST_117:::When a random path is provided as the URL path, then the page should consist of an HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"":::5:::', () => {  Tests from Jobs.js: it(':::RJSCPAW11J_TEST_51:::Page should consist of at least two HTML list items, jobs list received from the response and the provided employmentTypesList, salaryRangesList should be rendered using a unique key as a prop for each employment type item, salary range item and job item respectively:::5:::', async () => { it(':::RJSCPAW11J_TEST_52:::When ""/jobs"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCPAW11J_TEST_53:::When ""/jobs"" is provided in the URL path by an authenticated user, then the page should be navigated to the Jobs Route and should consist of an HTML main heading element with text content as ""Type of Employment"":::5:::', async () => { it(':::RJSCPAW11J_TEST_54:::Jobs Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as given website logo image URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_55:::Jobs Route should consist of an HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCPAW11J_TEST_56:::Jobs Route should consist of an HTML button element with data-testid attribute value as ""searchButton"":::5:::', async () => { it(':::RJSCPAW11J_TEST_57:::Jobs Route should consist of an HTML main heading element with text content as ""Type of Employment"":::5:::', async () => { it(':::RJSCPAW11J_TEST_58:::Jobs Route should consist of HTML checkboxes with label text as the values of the key ""label"" from employmentTypesList provided:::5:::', async () => { it(':::RJSCPAW11J_TEST_59:::Jobs Route should consist of an HTML main heading element with text content as ""Salary Range"":::5:::', async () => { it(':::RJSCPAW11J_TEST_60:::Jobs Route should consist of HTML radio buttons and label text as the values of the key ""label"" from salaryRangesList provided:::5:::', async () => { it(':::RJSCPAW11J_TEST_61:::When the Jobs Route is opened, it should initially consist of HTML container elements with data-testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCPAW11J_TEST_62:::When the Jobs Route is opened, an HTTP GET request should be made to the given Profile API URL to display the profile details:::5:::', async () => { it(':::RJSCPAW11J_TEST_63:::When the Jobs Route is opened, an HTTP GET request should be made to the given Jobs API URL to display the list of jobs:::5:::', async () => { it(':::RJSCPAW11J_TEST_64:::When the Jobs Route is opened, an HTTP GET request should be made to the given Jobs API URL with all the query parameters and their initial values as empty strings:::5:::', async () => { it(':::RJSCPAW11J_TEST_65:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of at least four HTML unordered list elements to display nav items, jobs received from the response, employmentTypes and salaryRanges:::5:::', async () => { it(':::RJSCPAW11J_TEST_66:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of an HTML image element with alt attribute value as ""profile"" and src as the value of key ""profile_image_url"" received from the profile response:::5:::', async () => { it(':::RJSCPAW11J_TEST_67:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of an HTML main heading element with text content as the values of the key ""name"" received from the profile response:::5:::', async () => { it(':::RJSCPAW11J_TEST_68:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of an HTML paragraph element with text content as the values of the key ""short_bio"" received from the profile response:::5:::', async () => { it(':::RJSCPAW11J_TEST_69:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML image elements with alt attribute value as ""company logo"" and src as the values of key ""company_logo_url"" received from the jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_70:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML main heading elements with text content as the values of the key ""title"" received from the jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_71:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""rating"" received from the jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_72:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML paragraph elements with text content as the values of the key ""location"" received from the jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_73:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML paragraph elements with text content as the values of the key ""employment_type"" received from the jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_74:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML main heading elements with text content as the ""Description"" based on the received jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_75:::When the HTTP GET requests in the Jobs Route are successful, then the page should consist of HTML paragraph elements with text content as the values of the key ""job_description"" received from the jobs response:::5:::', async () => { it(':::RJSCPAW11J_TEST_76:::When a value is provided in the HTML input element for search and search icon button is clicked, an HTTP GET request should be made with the value provided in the search input element as the value to query parameter ""search"":::5:::', async () => { it(':::RJSCPAW11J_TEST_77:::When employment types are selected, an HTTP GET request should be made with the ids of the employment types as a single string separated by "","" as value to query parameter ""employment_type"":::5:::', async () => { it(':::RJSCPAW11J_TEST_78:::When a salary range is clicked, an HTTP GET request should be made with the id of the salaryRange as value to query parameter ""minimum_package"":::5:::', async () => { it(':::RJSCPAW11J_TEST_79:::When all filters are used, an HTTP GET request should be made to jobsApiUrl with all the query parameters and their values:::5:::', async () => { it(':::RJSCPAW11J_TEST_80:::When a Job Item is clicked in Jobs Route, then the page should be navigated to the Job Item Details route with ""/jobs/:id"" as the URL path:::5:::', async () => { it(':::RJSCPAW11J_TEST_81:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route returns the jobs list as empty, then the page should consist of the HTML image element with alt attribute value as ""no jobs"" and src as the given no jobs view image URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_82:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route returns the jobs list as empty, then the page should consist of an HTML main heading element with text content as ""No Jobs Found"":::5:::', async () => { it(':::RJSCPAW11J_TEST_83:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route returns the jobs list as empty, then the page should consist of an HTML paragraph element with text content as ""We could not find any jobs. Try other filters"":::5:::', async () => { it(':::RJSCPAW11J_TEST_84:::When the HTTP GET request made to the given Profile API URL in the Jobs Route is unsuccessful, then the page should consist of the HTML button element with text content as the ""Retry"":::5:::', async () => { it(':::RJSCPAW11J_TEST_85:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route is unsuccessful, then the page should consist of the HTML image element with alt as ""failure view"" and src as the given failure view image URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_86:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route is unsuccessful, then the page should consist of the HTML main heading element with text content as ""Oops! Something Went Wrong"":::5:::', async () => { it(':::RJSCPAW11J_TEST_87:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route is unsuccessful, then the page should consist of the HTML paragraph element with text content as ""We cannot seem to find the page you are looking for"":::5:::', async () => { it(':::RJSCPAW11J_TEST_88:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route is unsuccessful, then the page should consist of the HTML button element with text content as the ""Retry"":::5:::', async () => { it(':::RJSCPAW11J_TEST_89:::When the HTTP GET request made to the given Profile API URL in the Jobs Route is unsuccessful and the ""Retry"" button is clicked, then an HTTP GET request should be made to the given Profile API URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_90:::When the HTTP GET request made to the given Jobs API URL in the Jobs Route is unsuccessful and the ""Retry"" button is clicked, then an HTTP GET request should be made to the given Jobs API URL:::5:::', async () => { it(':::RJSCPAW11J_TEST_91:::When the website logo in the Header is clicked, then the page should be navigated to Home Route:::5:::', async () => { it(':::RJSCPAW11J_TEST_92:::When the Home link in the Header is clicked, then the page should be navigated to Home Route:::5:::', async () => {  Tests from Home.js: it(':::RJSCPAW11J_TEST_1:::When ""/"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCPAW11J_TEST_2:::When ""/"" is provided as the URL path by an authenticated user, then the page should be navigated to the Home Route and consist of an HTML main heading element with text content as ""Find The Job That Fits Your Life"":::5:::', () => { it(':::RJSCPAW11J_TEST_3:::Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo image URL:::5:::', () => { it(':::RJSCPAW11J_TEST_4:::Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo image URL is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPAW11J_TEST_5:::Home Route should consist of at least one HTML unordered list element to display the list of nav items in the Header:::5:::', () => { it(':::RJSCPAW11J_TEST_6:::Home Route should consist of at least three HTML list elements to display the nav items in the Header:::5:::', () => { it(':::RJSCPAW11J_TEST_7:::Home Route should consist of a Link from react-router-dom with text content as ""Home"":::5:::', () => { it(':::RJSCPAW11J_TEST_8:::Home Route should consist of a Link from react-router-dom with text content as ""Jobs"":::5:::', () => { it(':::RJSCPAW11J_TEST_9:::Home Route should consist of an HTML button element with text content as ""Logout"":::5:::', () => { it(':::RJSCPAW11J_TEST_10:::Home Route should consist of an HTML main heading element with text content as ""Find The Job That Fits Your Life"":::5:::', () => { it(':::RJSCPAW11J_TEST_11:::Home Route should consist of an HTML paragraph element with text content starting with ""Millions of people are searching for jobs"":::5:::', () => { it(':::RJSCPAW11J_TEST_12:::Home Route should consist of an HTML button element with text content as ""Find Jobs"":::5:::', () => { it(':::RJSCPAW11J_TEST_13:::Home Route should consist of an HTML button element with text content as ""Find Jobs"" is wrapped with Link from react-router-dom:::5:::', () => { it(':::RJSCPAW11J_TEST_14:::When the Find Jobs button in the Home Route is clicked, then the page should be navigated to Jobs Route:::5:::', () => { it(':::RJSCPAW11J_TEST_15:::When the Jobs link in the Header is clicked, then the page should be navigated to Jobs Route:::5:::', () => { it(':::RJSCPAW11J_TEST_16:::When the Logout button in the Header is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', () => { it(':::RJSCPAW11J_TEST_17:::When the Logout button in the Header is clicked, the history.replace() method should be called with the argument as ""/login"":::5:::', () => { it(':::RJSCPAW11J_TEST_18:::When the Logout button in the Header is clicked, then the page should be navigated to the Login Route:::5:::', () => { '"
9264e426792140659babb611050dc730,lettersCalculator,RJSCPB31L8,/home/workspace/reactjs/coding-practices/lettersCalculatorApp,/home/workspace/.tmp/reactjs/coding-practices/lettersCalculatorApp/src,,"Tests from LettersCount.js: it(':::RJSCPB31L8_TEST_1:::Page should consist of HTML main heading element with text content as ""Calculate the Letters you enter"":::5:::', () => { it(':::RJSCPB31L8_TEST_2:::Page should consist of HTML label element with text content as ""Enter the phrase"":::5:::', () => { it(':::RJSCPB31L8_TEST_3:::Page should consist of HTML input element with label text as ""Enter the phrase"":::5:::', () => { it(':::RJSCPB31L8_TEST_4:::Page should initially consist of HTML paragraph element with text content as ""No.of letters: 0"":::5:::', () => { it(':::RJSCPB31L8_TEST_5:::Page should consist of HTML image element with alt attribute value as ""letters calculator"" and src attribute value as path for stop watch with calculator image:::5:::', () => { it(':::RJSCPB31L8_TEST_6:::When a non-empty value is provided in the HTML input element, then the page should consist of HTML paragraph element with text content having the count of the letters provided:::5:::', () => { '"
f9e2e6281f9a41ef973b1a1f430d8b9c,lightDarkMode,RJSCPPATAJ,/home/workspace/reactjs/coding-practices/lightDarkMode,/home/workspace/.tmp/reactjs/coding-practices/lightDarkMode/src,,"Tests from LightDarkMode.js: it(':::RJSCPPATAJ_TEST_1:::Page should initially consist of HTML button element with text content as ""Light Mode"":::5:::', () => { it(':::RJSCPPATAJ_TEST_2:::CSS code implementation should not contain ""display"" property with value ""none"":::5:::', () => { it(':::RJSCPPATAJ_TEST_3:::When the app is in Dark mode and the Light Mode button is clicked, then its text content should change to ""Dark Mode"":::5:::', () => { it(':::RJSCPPATAJ_TEST_4:::When the app is in Light mode and the Dark Mode button is clicked, then its text content should change to ""Light Mode"":::5:::', () => { '"
a3342a91b51e4e54b9fa471df3781c4b,loginApp,RJSCP83UDS,/home/workspace/reactjs/coding-practices/loginApp,/home/workspace/.tmp/reactjs/coding-practices/loginApp/src,,"Tests from login-component-jsx.js: it(':::RJSCP83UDS_TEST_1:::Page should initially consist of an HTML heading element with text content as ""Please Login"":::5:::', () => { it(':::RJSCP83UDS_TEST_2:::Page should initially consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCP83UDS_TEST_3:::CSS code implementations should not contain ""display"" property with the value ""none"":::5:::', () => { it(':::RJSCP83UDS_TEST_4:::When the Login button is clicked, then the text content of the HTML heading element should be changed to ""Welcome User"":::5:::', () => { it(':::RJSCP83UDS_TEST_5:::When the Login button is clicked, then the Login button should be changed to the Logout button:::5:::', () => { it(':::RJSCP83UDS_TEST_6:::When the Logout button is clicked, then the text content of the HTML heading element should be changed to ""Please Login"" and the Logout button should be changed to the Login button:::5:::', () => { '"
bc08ce5be1f4446392a442e3140c0454,ebank,RJSCEM5CP5,/home/workspace/reactjs/coding-practices/ebank,/home/workspace/.tmp/reactjs/coding-practices/ebank/src,,"Tests from login.js: it(':::RJSCEM5CP5_TEST_14:::Login Route should consist of an HTML image element with alt as ""website login"" and src as the given login image URL:::5:::', () => { it(':::RJSCEM5CP5_TEST_15:::Login Route should consist of an HTML main heading element with the text content as ""Welcome Back"":::5:::', () => { it(':::RJSCEM5CP5_TEST_16:::Login Route should consist of an HTML form element:::5:::', () => { it(':::RJSCEM5CP5_TEST_17:::Login Route should consist of an HTML input element with label text as ""User ID"" and type as ""text"":::5:::', () => { it(':::RJSCEM5CP5_TEST_18:::Login Route should consist of an HTML input element with label text as ""PIN"" and type as ""password"":::5:::', () => { it(':::RJSCEM5CP5_TEST_19:::Login Route should consist of an HTML button element with text content as ""Login"" and type as ""submit"":::5:::', () => { it(':::RJSCEM5CP5_TEST_20:::When ""/ebank/login"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image URL:::15:::', async () => { it(':::RJSCEM5CP5_TEST_21:::When ""/"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt attribute value as ""website logo"" and src as given website logo image URL:::15:::', async () => { it(':::RJSCEM5CP5_TEST_22:::When a non-empty value is provided in the HTML input element with the label text as ""User ID"", then the value provided should be displayed in the HTML input element:::10:::', () => { it(':::RJSCEM5CP5_TEST_23:::When a non-empty value is provided in the HTML input element with the label text as ""PIN"", then the value provided should be displayed in the HTML input element:::10:::', () => { it(':::RJSCEM5CP5_TEST_24:::When the Login button is clicked with an empty user id and pin then the respective error message should be displayed using an HTML paragraph element:::10:::', async () => { it(':::RJSCEM5CP5_TEST_25:::When a valid user id is provided and the Login button is clicked with an empty pin then the respective error message should be displayed using an HTML paragraph element:::10:::', async () => { it(':::RJSCEM5CP5_TEST_26:::When a valid user id is provided and the Login button is clicked with an empty pin then the respective error message should be displayed and the page should not be navigated:::10:::', async () => { it(':::RJSCEM5CP5_TEST_27:::When a non-empty pin is provided and the Login button is clicked with an empty user id then the respective error message should be displayed:::10:::', async () => { it(':::RJSCEM5CP5_TEST_28:::When a non-empty pin is provided and the Login button is clicked with an empty user id then the page should not be navigated:::10:::', async () => { it(':::RJSCEM5CP5_TEST_29:::When an invalid user id and pin are provided and the Login button is clicked then the respective error message should be displayed and the page should not be navigated:::10:::', async () => { it(':::RJSCEM5CP5_TEST_30:::When a valid user id and invalid pin are provided and the Login button is clicked then the respective error message should be displayed and the page should not be navigated:::10:::', async () => { it(':::RJSCEM5CP5_TEST_31:::When the Login is successful, an HTTP GET request should be made to loginApiUrl:::10:::', async () => { it(':::RJSCEM5CP5_TEST_32:::When the Login is successful, then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument:::15:::', async () => { it(':::RJSCEM5CP5_TEST_33:::When the Login is successful, then the history.replace() method should be called with the argument ""/"":::15:::', async () => { it(':::RJSCEM5CP5_TEST_34:::When a valid user id and pin are provided and the Login button is clicked then the page should be navigated to Home Route:::15:::', async () => {  Tests from NotFound.js: it(':::RJSCEM5CP5_TEST_11:::When the ""/bad-path"" is provided in the URL, then the page should be navigated to NotFound Route and consist of an HTML image element with alt as ""not found"" and src as the given not found image URL:::5:::', () => { it(':::RJSCEM5CP5_TEST_12:::When the ""/bad-path"" is provided in the URL, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Page Not Found"":::5:::', () => { it(':::RJSCEM5CP5_TEST_13:::When the ""/bad-path"" is provided in the URL, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"":::5:::', () => {  Tests from Home.js: it(':::RJSCEM5CP5_TEST_1:::Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as given website logo image URL:::5:::', async () => { it(':::RJSCEM5CP5_TEST_2:::Home Route should consist of an HTML button element with text content as ""Logout"":::5:::', async () => { it(':::RJSCEM5CP5_TEST_3:::Home Route should consist of an HTML main heading element with the text content as ""Your Flexibility, Our Excellence"":::5:::', async () => { it(':::RJSCEM5CP5_TEST_4:::Home Route should consist of an HTML image element with alt attribute value as ""digital card"" and src as given digital card image URL:::5:::', async () => { it(':::RJSCEM5CP5_TEST_5:::When ""/"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image URL:::15:::', () => { it(':::RJSCEM5CP5_TEST_6:::When ""/"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route:::15:::', async () => { it(':::RJSCEM5CP5_TEST_7:::When ""/ebank/login"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route and consist of an HTML main heading element with the text content as ""Your Flexibility, Our Excellence"":::15:::', async () => { it(':::RJSCEM5CP5_TEST_8:::When the Logout button is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::15:::', async () => { it(':::RJSCEM5CP5_TEST_9:::When the Logout button is clicked, the history.replace() method should be called with the argument as ""/ebank/login"":::15:::', async () => { it(':::RJSCEM5CP5_TEST_10:::When the Logout button is clicked, then the page should be navigated to Login Route:::15:::', async () => { '"
60a6150e07fc4b8cb99aa0bd0fa950c0,nxtWatch,RJSCPYQN94,/home/workspace/reactjs/coding-practices/nxtWatchApp,/home/workspace/.tmp/reactjs/coding-practices/nxtWatchApp/src,,"Tests from Login.js: it(':::RJSCPYQN94_TEST_72:::Login Route should consist of an HTML form element:::5:::', () => { it(':::RJSCPYQN94_TEST_73:::Login Route should consist of an HTML image element with alt as ""website logo"" and src as the given logo URL:::5:::', () => { it(':::RJSCPYQN94_TEST_74:::Login Route should consist of HTML input element with label text as ""USERNAME"" and type ""text"":::5:::', () => { it(':::RJSCPYQN94_TEST_75:::Login Route should consist of HTML input element with label text as ""PASSWORD"" and type ""password"":::5:::', () => { it(':::RJSCPYQN94_TEST_76:::Login Route should consist of HTML input element with label text as ""Show Password"" and type ""checkbox"":::5:::', () => { it(':::RJSCPYQN94_TEST_77:::Login Route should consist of an HTML button element with test content as ""Login"" and type as ""submit"":::5:::', () => { it(':::RJSCPYQN94_TEST_78:::Login Route should consist of an HTML button element with ""Login"" as text content and the color as ""#ffffff"":::5:::', () => { it(':::RJSCPYQN94_TEST_79:::When ""/login"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_80:::When ""/login"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_81:::When a non-empty value is provided in the HTML input element with the label text ""USERNAME"", then the value provided should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPYQN94_TEST_82:::When a non-empty value is provided in the HTML input element with the label text ""PASSWORD"", then the value provided should be displayed in the HTML input element:::5:::', () => { it(':::RJSCPYQN94_TEST_83:::When the checkbox input element with the label text as ""Show Password"" is checked, then the checkbox input element should be ""checked"":::5:::', () => { it(':::RJSCPYQN94_TEST_84:::When the checkbox input element with the label text as ""Show Password"" is checked, then the type of the PASSWORD input element should be ""text"":::5:::', () => { it(':::RJSCPYQN94_TEST_85:::When the checkbox input element with the label as ""Show Password"" is unchecked, then the type of the PASSWORD input element should be ""password"":::5:::', () => { it(':::RJSCPYQN94_TEST_86:::When the Login button is clicked with an empty username and password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPYQN94_TEST_87:::When a valid username is provided and the Login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element:::5:::', async () => { it(':::RJSCPYQN94_TEST_88:::When a valid username is provided and the Login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPYQN94_TEST_89:::When a non-empty password is provided and the Login button is clicked with an empty username then the respective error message should be displayed:::5:::', async () => { it(':::RJSCPYQN94_TEST_90:::When a non-empty password is provided and the Login button is clicked with an empty username then the page should not be navigated:::5:::', async () => { it(':::RJSCPYQN94_TEST_91:::When an invalid username and password are provided and the Login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPYQN94_TEST_92:::When a valid username and invalid password are provided and the Login button is clicked then the respective error message should be displayed and the page should not be navigated:::5:::', async () => { it(':::RJSCPYQN94_TEST_93:::When the Login is successful, an HTTP GET request should be made to loginApiUrl:::5:::', async () => { it(':::RJSCPYQN94_TEST_94:::When the Login is successful, then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument:::5:::', async () => { it(':::RJSCPYQN94_TEST_95:::When the Login is successful, then the history.replace() method should be called with the argument ""/"":::5:::', async () => { it(':::RJSCPYQN94_TEST_96:::When a valid username and password are provided and the Login button is clicked then the page should be navigated to Home Route:::5:::', async () => {  Tests from SavedVideos.js: it(':::RJSCPYQN94_TEST_100:::Page should consist of at least two HTML list items and the navItemsList should be rendered using a unique key as a prop for each nav item respectively :::5:::', async () => { it(':::RJSCPYQN94_TEST_101:::When ""/saved-videos"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route:::5:::', () => { it(':::RJSCPYQN94_TEST_102:::When ""/saved-videos"" is provided as the URL by an authenticated user, then the page should be navigated to SavedVideos Route:::5:::', () => { it(':::RJSCPYQN94_TEST_103:::SavedVideos Route should consist of at least one HTML unordered list element to display nav items:::5:::', async () => { it(':::RJSCPYQN94_TEST_104:::When the ""SavedVideosList"" is empty, then the page should consist of the HTML image element with alt attribute value as ""no saved videos"" and src as the given ""No Saved Videos view image URL"" :::5:::', async () => { it(':::RJSCPYQN94_TEST_105:::When the ""SavedVideosList"" is empty, then the page should consist of an HTML main heading element with text content as ""No saved videos found"":::5:::', () => { it(':::RJSCPYQN94_TEST_106:::When the ""SavedVideosList"" is empty, then the page should consist of an HTML paragraph element with text content as ""Save your videos by clicking a button"":::5:::', () => { it(':::RJSCPYQN94_TEST_107:::When a Video Item is saved, then the SavedVideos Route should consist of an HTML unordered list to display the list of video items:::5:::', async () => { it(':::RJSCPYQN94_TEST_108:::When a Video Item is saved, then the SavedVideos Route should consist of an HTML main heading element with text content as ""Saved Videos"" should be displayed in the banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_109:::When a Video Item is removed from the savedVideosList, then the respective video item details should not be displayed in the SavedVideos Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_110:::When a Video is added to the savedVideosList, then the page should consist of the HTML image element with alt attribute value as ""video thumbnail"" from the savedVideoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_111:::When a Video is added to the savedVideosList, then the page should consist of the HTML paragraph element with text content as the value of the key ""title"" from the savedVideoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_112:::When a Video is added to the savedVideosList, then the page should consist of the HTML paragraph element with text content as the value of the key ""name"" in the channel inside from the savedVideoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_113:::When a Video is added to the savedVideosList, then the page should consist of the HTML paragraph element with text content as the value of the key ""view_count"" from the savedVideoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_114:::When a Video is added to the savedVideosList, then the page should consist of the HTML paragraph element with text content as the value of the key ""published_at"" from the savedVideoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_115:::When a Video Item is clicked in the savedVideosList, then the page should be navigated to the Video Item Details route with ""/videos/:id"" in the URL path :::5:::', async () => { it(':::RJSCPYQN94_TEST_116:::When the theme button is clicked then the SavedVideos Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src as given dark theme logo URL:::5:::', () => { it(':::RJSCPYQN94_TEST_117:::When the theme button is clicked in the SavedVideos Route, then the Trending link is clicked, then the page should be navigated to Trending Route and the theme should remain the same:::5:::', async () => {  Tests from HomeFailure.js: it(':::RJSCPYQN94_TEST_52:::When the HTTP GET request made in Home Route is unsucessfull, then the page should consist of the HTML image element with alt attribute value as ""failure view"" and src as the given Failure view image URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_53:::When the HTTP GET request made in Home Route is unsucessfull, the page should consist of the HTML main heading element with text content as ""Oops! Something Went Wrong"":::5:::', async () => { it(':::RJSCPYQN94_TEST_54:::When the HTTP GET request made in Home Route is unsucessfull, the page should consist of the HTML paragraph element with text content as ""We are having some trouble"":::5:::', async () => { it(':::RJSCPYQN94_TEST_55:::When the HTTP GET request made in Home Route is unsucessfull, the page should consist of the HTML button element with text content as ""Retry"":::5:::', async () => { it(':::RJSCPYQN94_TEST_56:::When the HTTP GET request made in Home Route is unsucessfull and the ""Retry"" button is clicked, then an HTTP GET request should be made to homeVideosApiUrl:::5:::', async () => {  Tests from NotFound.js: it(':::RJSCPYQN94_TEST_97:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt text as ""not found"" and src as the given ""Not Found Image"" URL:::5:::', () => { it(':::RJSCPYQN94_TEST_98:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Page Not Found"":::5:::', () => { it(':::RJSCPYQN94_TEST_99:::When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""we are sorry, the page you requested could not be found."":::5:::', () => {  Tests from Gaming.js: it(':::RJSCPYQN94_TEST_1:::When ""/gaming"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route:::5:::', () => { it(':::RJSCPYQN94_TEST_2:::When ""/gaming"" is provided as the URL by an authenticated user, then the page should be navigated to Gaming Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_3:::When the Gaming Route is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPYQN94_TEST_4:::When the Gaming Route is opened, an HTTP GET request should be made to gamingVideosApiUrl:::5:::', async () => { it(':::RJSCPYQN94_TEST_5:::When the HTTP GET request in the Gaming Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""video thumbnail"" and src equal to the value of the key ""thumbnail_url"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_6:::When the HTTP GET request in the Gaming Route is successful, then the page should consist of the HTML Paragraph elements with text content as the value of the key ""title"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_7:::When the HTTP GET request in the Gaming Route is successful, then the page should consist of the HTML Paragraph elements with text content as the value of the key ""view_count"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_8:::When a Video Item in the Gaming Route is clicked, then the page should be navigated to the Video Item Details route with ""/videos/:id"" in the URL path:::5:::', async () => {  Tests from Trending.js: it(':::RJSCPYQN94_TEST_118:::Page should consist of at least two HTML list items and the navItemsList, videosList received from the response should be rendered using a unique key as a prop for each nav item and video item respectively :::5:::', async () => { it(':::RJSCPYQN94_TEST_119:::When ""/trending"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route:::5:::', () => { it(':::RJSCPYQN94_TEST_120:::When ""/trending"" is provided as the URL by an authenticated user, then the page should be navigated to Trending Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_121:::Trending Route should consist of at least two HTML unordered list elements navItemsList, videosList received from the response to display nav items and video items:::5:::', async () => { it(':::RJSCPYQN94_TEST_122:::When the Trending Route is opened, an HTTP GET request should be made to trendingVideosApiUrl:::5:::', async () => { it(':::RJSCPYQN94_TEST_123:::When the Trending Route is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPYQN94_TEST_124:::When the HTTP GET request in the Trending Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""video thumbnail"" and src equal to the value of the key ""thumbnail_url"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_125:::When the HTTP GET request in the Trending Route is successful, then the page should consist of the HTML Paragraph elements with text content as the value of the key ""title"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_126:::When the HTTP GET request in the Trending Route is successful, then the page should consist of the HTML Paragraph elements with text content as the value of the key ""name"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_127:::When the HTTP GET request in the Trending Route is successful, then the page should consist of the HTML Paragraph elements with text content as the value of the key ""view_count"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_128:::When the HTTP GET request in the Trending Route is successful, then the page should consist of the HTML Paragraph elements with text content as the value of the key ""published_at"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_129:::When a Video Item is clicked in Trending Route, then the page should be navigated to the Video Item Details route with ""/videos/:id"" in the URL path:::5:::', async () => {  Tests from sampleTestCases.js: it(':::RJSCPYQN94_TEST_149:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_150:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_151:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_152:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_153:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_154:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_155:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_156:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_157:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_158:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_159:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_160:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_161:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_162:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_163:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_164:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_165:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_166:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_167:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_168:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_169:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_170:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_171:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_172:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_173:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_174:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_175:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_176:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_177:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_178:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_179:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_180:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_181:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_182:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_183:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_184:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_185:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_186:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_187:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_188:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_189:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_190:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_191:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_192:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_193:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_194:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_195:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_196:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_197:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_198:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_199:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_200:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_201:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_202:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_203:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_204:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_205:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_206:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_207:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_208:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_209:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_210:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_211:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_212:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_213:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_214:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_215:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_216:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_217:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_218:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_219:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_220:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_221:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_222:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_223:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_224:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_225:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_226:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_227:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_228:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_229:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_230:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_231:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_232:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_233:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_234:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_235:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_236:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_237:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_238:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_239:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_240:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_241:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_242:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_243:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_244:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_245:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_246:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_247:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_248:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_249:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_250:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_251:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_252:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_253:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_254:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_255:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_256:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_257:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_258:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_259:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_260:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_261:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_262:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_263:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_264:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_265:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_266:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_267:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_268:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_269:::display text:::5:::', () => { it(':::RJSCPYQN94_TEST_270:::display text:::5:::', () => {  Tests from Home.js: it(':::RJSCPYQN94_TEST_9:::Page should consist of at least two HTML list items and the navItemsList, videosList received from the response should be rendered using a unique key as a prop for each nav item and video item respectively :::5:::', async () => { it(':::RJSCPYQN94_TEST_10:::When ""/"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route:::5:::', () => { it(':::RJSCPYQN94_TEST_11:::When ""/"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_12:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src as given logo URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_13:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src as the given logo URL is wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPYQN94_TEST_14:::Home Route should consist of an HTML button element with data-testid attribute value as ""theme"" in the Header:::5:::', async () => { it(':::RJSCPYQN94_TEST_15:::Home Route should consist of an HTML image element in the header with alt attribute value as ""profile"" and src as the value of given profile image URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_16:::Home Route should consist of an HTML button element with text content as ""Logout"" in the Header:::5:::', async () => { it(':::RJSCPYQN94_TEST_17:::Home Route should consist of at least two HTML unordered list elements navItemsList, videosList received from the response to display nav items and video items:::5:::', async () => { it(':::RJSCPYQN94_TEST_18:::Home Route should consist of ""Home"" text wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPYQN94_TEST_19:::Home Route should consist of ""Trending"" text wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPYQN94_TEST_20:::Home Route should consist of ""Gaming"" text wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPYQN94_TEST_21:::Home Route should consist of ""Saved videos"" text wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPYQN94_TEST_22:::Home Route should consist of an HTML paragraph element with text content starting with ""CONTACT US"" in the sidebar:::5:::', async () => { it(':::RJSCPYQN94_TEST_23:::Home Route should consist of an HTML image element with alt attribute value as ""facebook logo"" and src as the value of the given facebook logo URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_24:::Home Route should consist of an HTML image element with alt attribute value as ""twitter logo"" and src as the value of the given twitter logo URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_25:::Home Route should consist of an HTML image element with alt attribute value as ""linked in logo"" and src as the value of the given linked in logo URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_26:::Home Route should consist of an HTML paragraph element with text content starting with ""Enjoy! Now to see your channels and recommendations!"" in the sidebar:::5:::', async () => { it(':::RJSCPYQN94_TEST_27:::Home Route should consist of an HTML image element with alt attribute value as ""nxt watch logo"" and src as the value of the given nxt watch logo URL should be displayed in the banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_28:::Home Route should consist of an HTML paragraph element with text content starting with ""Buy Nxt Watch Premium"" in the banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_29:::Home Route should consist of an HTML button element with text content as ""GET IT NOW"" in the banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_30:::Home Route should consist of an HTML button element with data-testid ""close"" should be displayed in the banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_31:::Home Route should consist of styled HTML container element with data-testid as ""banner"" and background image URL as the URL provided for banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_32:::Home Route should consist of styled HTML container element with data-testid as ""banner"" and background image URL as the URL provided for banner:::5:::', async () => { it(':::RJSCPYQN94_TEST_33:::Home Route should consist of HTML input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCPYQN94_TEST_34:::Home Route should consist of HTML button element with data-testid attribute value as ""searchButton"":::5:::', async () => { it(':::RJSCPYQN94_TEST_35:::When the Home Route is opened, an HTTP GET request should be made to homeVideosApiUrl:::5:::', async () => { it(':::RJSCPYQN94_TEST_36:::When the Home Route is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCPYQN94_TEST_37:::When the HTTP GET request in the Home Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""video thumbnail"" and src as the value of key ""thumbnail_url"" of the video item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_38:::When the HTTP GET request in the Home Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""channel logo"" and src as the value of key ""profile_image_url"" in the channel inside the video item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_39:::When the HTTP GET request in the Home Route is successful, then the page should consist of the HTML paragraph elements with text content as the value of the key ""title"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_40:::When the HTTP GET request in the Home Route is successful, then the page should consist of the HTML paragraph elements with text content as the value of the key ""name"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_41:::When the HTTP GET request in the Home Route is successful, then the page should consist of the HTML paragraph elements with text content as the value of the key ""view_count"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_42:::When the HTTP GET request in the Home Route is successful, then the page should consist of the HTML paragraph elements with text content as the value of the key ""published_at"" in each item from the videosResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_43:::When a non-empty value is provided in an HTML input element for search, then that text should be displayed in the HTML input element:::5:::', async () => { it(':::RJSCPYQN94_TEST_44:::When a value is provided in the HTML input element for search and the ""Search"" button is clicked, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""search"":::5:::', async () => { it(':::RJSCPYQN94_TEST_45:::Home Route should consist of an Video item wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCPYQN94_TEST_46:::When a Video Item is clicked in Home Route, then the page should be navigated to the Video Item Details route with ""/videos/:id"" in the URL path:::5:::', async () => { it(':::RJSCPYQN94_TEST_47:::When the HTTP GET request made to homeVideosApiUrl returns the videos list as empty, then the page should consist of the HTML image element with alt attribute value as ""no videos"" and src as the given ""No Videos view image URL"":::5:::', async () => { it(':::RJSCPYQN94_TEST_48:::When the HTTP GET request made to homeVideosApiUrl returns the videos list as empty, then the page should consist of the HTML main heading element with text content as ""No Search results found"":::5:::', async () => { it(':::RJSCPYQN94_TEST_49:::When the HTTP GET request made to homeVideosApiUrl returns the videos list as empty, then the page should consist of the HTML paragraph element with text content as ""Try different key words or remove search filter"":::5:::', async () => { it(':::RJSCPYQN94_TEST_50:::When the HTTP GET request made to homeVideosApiUrl returns the videos list as empty, then the page should consist of the HTML button element with text content as ""Retry"":::5:::', async () => { it(':::RJSCPYQN94_TEST_51:::When the HTTP GET request made to homeVideosApiUrl returns the videos list as empty and the ""Retry"" button is clicked, then an HTTP GET request should be made to homeVideosApiUrl:::5:::', async () => {  Tests from HomeFn.js: it(':::RJSCPYQN94_TEST_57:::When the theme button is clicked then the Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src as given dark theme logo URL:::5:::', async () => { it(':::RJSCPYQN94_TEST_58:::When the theme button is clicked in the Home Route, then the Trending link is clicked, then the page should be navigated to Trending Route and the theme should remain the same:::5:::', async () => { it(':::RJSCPYQN94_TEST_59:::When the theme button is clicked then the Home Route should consist of a dark theme and the ""#181818"" color provided should be applied as the background color for the styled component with data-testid as ""home"":::5:::', async () => { it(':::RJSCPYQN94_TEST_60:::When the HTML button element with data-testid attribute value as ""close"" is clicked in the banner, then the page should not consist of an HTML paragraph element with text content starting with ""Buy Nxt Watch Premium"" :::5:::', async () => { it(':::RJSCPYQN94_TEST_61:::When the Logout button in the Header of the Home Route is clicked, then the page should consist of Popup from reactjs-popup:::5:::', async () => { it(':::RJSCPYQN94_TEST_62:::When the Logout button in the Header of the Home Route is clicked, then the page should consist of an HTML paragraph element with text content as ""Are you sure, you want to logout"":::5:::', async () => { it(':::RJSCPYQN94_TEST_63:::When the Logout button in the Header of the Home Route is clicked, then the page should consist of an HTML button element with text content as ""Cancel"":::5:::', async () => { it(':::RJSCPYQN94_TEST_64:::When the Logout button in the Header of the Home Route is clicked, then the page should consist of an HTML button element with text content as ""Confirm"":::5:::', async () => { it(':::RJSCPYQN94_TEST_65:::When the HTML button element with text content as ""Cancel"" is clicked, then the page should not consist of Popup from reactjs-popup:::5:::', async () => { it(':::RJSCPYQN94_TEST_66:::When the Logout Popup is opened and the confirm button in the popup is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::5:::', async () => { it(':::RJSCPYQN94_TEST_67:::When the Logout Popup is opened and the confirm button in the popup is clicked, the history.replace() method should be called with the argument as ""/login"":::5:::', async () => { it(':::RJSCPYQN94_TEST_68:::When the Logout Popup is opened and the confirm button in the popup is clicked, then the page should be navigated to Login Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_69:::When the Trending link in the sidebar is clicked then the page should be navigated to TrendingRoute:::5:::', async () => { it(':::RJSCPYQN94_TEST_70:::When the Gaming link in the sidebar is clicked then the page should be navigated to GamingRoute:::5:::', async () => { it(':::RJSCPYQN94_TEST_71:::When the SavedVideos link in the sidebar is clicked then the page should be navigated to SavedVideosRoute:::5:::', async () => {  Tests from VideoItemDetails.js: it(':::RJSCPYQN94_TEST_130:::When ""/videos/:id"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route:::5:::', () => { it(':::RJSCPYQN94_TEST_131:::When ""/videos/:id"" is provided as the URL by an authenticated user, then the page should be navigated to VideoItemDetails Route:::5:::', async () => { it(':::RJSCPYQN94_TEST_132:::When the VideoItemDetails Route is accessed, an HTTP GET request should be made to videoDetailsApiUrl with the video id as path parameter:::5:::', async () => { it(':::RJSCPYQN94_TEST_133:::When the VideoItemDetails Route is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the API call is in progress:::5:::', async () => { it(':::RJSCPYQN94_TEST_134:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML Paragraph element with text content as the value of the key ""title"" from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_135:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML Paragraph element with text content as the value of the key ""view_count"" from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_136:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML Paragraph element with text content as the value of the key ""published_at"" from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_137:::VideoItemDetails Route should consist of an HTML button element with text content as ""Like"":::5:::', async () => { it(':::RJSCPYQN94_TEST_138:::VideoItemDetails Route should consist of an HTML button element with text content as ""Dislike"":::5:::', async () => { it(':::RJSCPYQN94_TEST_139:::VideoItemDetails Route should consist of an HTML button element with text content as ""Save"":::5:::', async () => { it(':::RJSCPYQN94_TEST_140:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""channel logo"" and src equal to the value of the key ""profile_image_url"" in the channel object from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_141:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML Paragraph element with text content as the value of the key ""name"" in the channel object from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_142:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML Paragraph element with text content as the value of the key ""subscriber_count"" in the channel object from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_143:::When the HTTP GET request in the VideoItemDetails Route is successful, then the page should consist of the HTML Paragraph element with text content as the value of the key ""description"" from the videoDetailsResponse:::5:::', async () => { it(':::RJSCPYQN94_TEST_144:::When the ""Like"" button is clicked, then the page should consist of an HTML button element with text content as ""Like"" and the color as ""#2563eb"":::5:::', async () => { it(':::RJSCPYQN94_TEST_145:::When the ""Dislike"" button is clicked, then the ""Dislike"" button element should consist of the color as ""#2563eb"":::5:::', async () => { it(':::RJSCPYQN94_TEST_146:::When the ""Like"" button is active and then the ""Dislike"" button is clicked, then the ""Dislike"" button element should consist of the color as ""#2563eb"" and the ""Like"" button element should consist of the color as ""#64748b"":::5:::', async () => { it(':::RJSCPYQN94_TEST_147:::When the ""Dislike"" button is active and then the ""Like"" button is clicked, then the ""Like"" button element should consist of the color as ""#2563eb"" and the ""DisLike"" button element should consist of the color as ""#64748b"":::5:::', async () => { it(':::RJSCPYQN94_TEST_148:::When the ""Save"" button is clicked, then the page should consist of an HTML button element with text content as ""Saved"":::5:::', async () => { '"
468fccff02064451a079e162967b0aa9,meetup,RJSCEL8G9J,/home/workspace/reactjs/coding-practices/meetup,/home/workspace/.tmp/reactjs/coding-practices/meetup/src,,"Tests from NotFound.js: it(':::RJSCEL8G9J_TEST_11:::When the ""/bad-path"" is provided as the URL, then the page should be navigated to NotFound Route and consist of an HTML image element with alt attribute as ""not found"" and src as the given not found image URL:::5:::', () => { it(':::RJSCEL8G9J_TEST_12:::When the ""/bad-path"" is provided as the URL, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Page Not Found"":::5:::', () => { it(':::RJSCEL8G9J_TEST_13:::When the ""/bad-path"" is provided as the URL, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"":::5:::', () => {  Tests from Register.js: it(':::RJSCEL8G9J_TEST_14:::Register Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src as given website logo image URL:::5:::', async () => { it(':::RJSCEL8G9J_TEST_15:::Register Route should consist of an HTML image element with alt attribute value as ""website register"" and src as given website register image URL:::5:::', async () => { it(':::RJSCEL8G9J_TEST_16:::Register Route should consist of an HTML main heading element with the text content as ""Let us join"":::5:::', () => { it(':::RJSCEL8G9J_TEST_17:::Register Route should consist of an HTML form element:::5:::', () => { it(':::RJSCEL8G9J_TEST_18:::Register Route should consist of HTML input element with label text as ""NAME"" and type ""text"":::5:::', () => { it(':::RJSCEL8G9J_TEST_19:::Register Route initially should consist of an HTML select element with label text as ""TOPICS"" and value attribute as ""ARTS_AND_CULTURE"":::5:::', async () => { it(':::RJSCEL8G9J_TEST_20:::Register Route should consist of HTML option elements with value attribute as the value of the key ""id"" from topicsList provided:::10:::', async () => { it(':::RJSCEL8G9J_TEST_21:::Register Route should consist of HTML option elements with text content as the value of the key ""displayText"" from topicsList provided:::5:::', async () => { it(':::RJSCEL8G9J_TEST_22:::Register Route should consist of an HTML button element with text content as ""Register Now"" and type as ""submit"":::5:::', () => { it(':::RJSCEL8G9J_TEST_23:::When a non-empty value is provided in the HTML input element with the label text ""NAME"", then the value provided should be displayed in the HTML input element:::10:::', () => { it(':::RJSCEL8G9J_TEST_24:::When a topic option is selected in the HTML select element, the selected option should be displayed in the HTML select element:::10:::', () => { it(':::RJSCEL8G9J_TEST_25:::When the ""Register Now"" button is clicked with an empty name input, then the page should consist of an HTML paragraph element to display the error message with text content as ""Please enter your name"" :::10:::', async () => { it(':::RJSCEL8G9J_TEST_26:::When the values are provided for both the input and select elements and the ""Register Now"" button is clicked, then the history.replace() method should be called with the argument ""/"" and page should navigate to Home Route:::10:::', async () => { it(':::RJSCEL8G9J_TEST_27:::When the values are provided for both the input and select elements and the ""Register Now"" button is clicked, then the page should navigate to Home Route and should consist of an HTML image element with alt attribute value as ""meetup"" and src attribute value as given meetup image URL :::10:::', async () => {  Tests from Home.js: it(':::RJSCEL8G9J_TEST_1:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src value as given website logo image URL:::5:::', async () => { it(':::RJSCEL8G9J_TEST_2:::Home Route should initially consist of an HTML main heading element with the text content as ""Welcome to Meetup"":::5:::', () => { it(':::RJSCEL8G9J_TEST_3:::Home Route should initially consist of an HTML paragraph element with the text content as ""Please register for the topic"":::5:::', () => { it(':::RJSCEL8G9J_TEST_4:::Home Route should initially consist of an HTML button element with text content as ""Register"":::5:::', () => { it(':::RJSCEL8G9J_TEST_5:::Home Route should initially consist of an HTML button element with text content as ""Register"" and is wrapped with a ""Link"" from react-router-dom:::10:::', () => { it(':::RJSCEL8G9J_TEST_6:::Home Route should consist of an HTML image element with alt attribute value as ""meetup"" and src attribute value as given meetup image URL:::5:::', () => { it(':::RJSCEL8G9J_TEST_7:::When the ""Register"" button in the Home Route is clicked, then the page should be navigated to Register Route:::10:::', async () => { it(':::RJSCEL8G9J_TEST_8:::When the ""Register"" button in the Home Route is clicked, then the page should be navigated to Register Route and should consist of HTML main heading element with the text content as ""Let us join"":::10:::', async () => { it(':::RJSCEL8G9J_TEST_9:::When a value is provided in the HTML input element and the ""Register Now"" button in Register Route is clicked, then the value provided in the input element should be displayed in the Home Route as ""Hello {Name}"" and here the Name is the value of the HTML input element in the Register Route:::10:::', async () => { it(':::RJSCEL8G9J_TEST_10:::When a non-empty input name is provided and a topic is selected in the HTML select element and the ""Register Now"" button in Register Route is clicked, then the respective ""displayText"" for the value provided in the select element should be displayed in the Home Route:::10:::', async () => { '"
b85355c55d524765bdfad776728dd547,moviesApp,RJSCP79ATS,/home/workspace/reactjs/coding-practices/moviesApp,/home/workspace/.tmp/reactjs/coding-practices/moviesApp/src,,"Tests from Popular.js: it(':::RJSCP79ATS_TEST_105:::When HTTP GET request in the popular Route is successful, then the page should consist of at least two HTML list items, and the popular movies List should be rendered using a unique key as a prop to display each popular movie item respectively:::5:::', async () => { it(':::RJSCP79ATS_TEST_106:::When the Popular Route is opened, an HTTP GET request should be made to the Popular Movies API URL:::10:::', async () => { it(':::RJSCP79ATS_TEST_107:::When ""/popular"" is provided as the URL path by an unauthenticated user, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', () => { it(':::RJSCP79ATS_TEST_108:::When ""/popular"" is provided as the URL path by an authenticated user, then the page should be navigated to Popular Route and should consist of an HTML image element with alt and src as the values of the keys ""title"" and ""poster_path"" respectively from the popular movies response received:::15:::', async () => { it(':::RJSCP79ATS_TEST_109:::When the Popular Route is opened, an HTML container element with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCP79ATS_TEST_110:::When the HTTP GET request in the Popular Route is successful, then the page should consist of an HTML unordered list element to display the popular movies List received from the popular movies response:::10:::', async () => { it(':::RJSCP79ATS_TEST_111:::When the HTTP GET request in the Popular Route is successful, then the page should consist of HTML image elements wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_112:::When the HTTP GET request in the Popular Route is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""title"" and ""poster_path"" respectively from the popular movies response received:::10:::', async () => { it(':::RJSCP79ATS_TEST_113:::When the movie item is clicked in the Popular Route, then the page should be navigated to Movie Item Details Route with ""/movies/:id"" in the URL path:::5:::', async () => { it(':::RJSCP79ATS_TEST_114:::When the HTTP GET request made to popularMoviesApiUrl in the Popular Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCP79ATS_TEST_115:::When the HTTP GET request made to popularMoviesApiUrl in the Popular Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_116:::When the HTTP GET request made to popularMoviesApiUrl in the Popular Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_117:::When the HTTP GET request made to popularMoviesApiUrl in the Popular Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to Popular Movies API URL:::10:::', async () => {  Tests from Account.js: it(':::RJSCP79ATS_TEST_1:::When ""/account"" is provided as the URL path by an unauthenticated user, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::5:::', () => { it(':::RJSCP79ATS_TEST_2:::When ""/account"" is provided as the URL path by an authenticated user, then the page should be navigated to Account Route and should consist of an HTML main heading element with text content as ""Account"":::5:::', () => { it(':::RJSCP79ATS_TEST_3:::Account Route should consist of an HTML main heading element with text content as ""Account"":::5:::', () => { it(':::RJSCP79ATS_TEST_4:::Account Route should consist of an HTML paragraph element with text content as ""Member ship"":::5:::', () => { it(':::RJSCP79ATS_TEST_5:::Account Route should consist of an HTML paragraph element with text content as ""Password"":::5:::', () => { it(':::RJSCP79ATS_TEST_6:::Account Route should consist of an HTML paragraph element with text content as ""Plan details "":::5:::', () => { it(':::RJSCP79ATS_TEST_7:::Account Route should consist of an HTML paragraph element with text content as ""Premium"":::5:::', () => { it(':::RJSCP79ATS_TEST_8:::Account Route should consist of an HTML paragraph element with text content as ""Ultra HD"":::5:::', () => { it(':::RJSCP79ATS_TEST_9:::Account Route should consist of an HTML button element with text content as ""Logout"":::5:::', () => { it(':::RJSCP79ATS_TEST_10:::When the ""Logout"" button in the Account Route is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"":::15:::', () => { it(':::RJSCP79ATS_TEST_11:::When the ""Logout"" button in the Account Route is clicked, the history.replace() method should be called with the argument as ""/login"":::15:::', () => { it(':::RJSCP79ATS_TEST_12:::When the ""Logout"" button in the Account Route is clicked, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', () => {  Tests from NotFound.js: it(':::RJSCP79ATS_TEST_100:::When a random path is provided as the URL path, then the page should consist of an HTML main heading element with text content as ""Lost Your Way"":::5:::', () => { it(':::RJSCP79ATS_TEST_101:::When a random path is provided as the URL path, then the page should consist of an HTML paragraph element with text content as ""we are sorry, the page you requested could not be found Please go back to the homepage."":::5:::', () => { it(':::RJSCP79ATS_TEST_102:::When a random path is provided as the URL path, then the page should consist of an HTML button element with text content as ""Go to Home"" wrapper with Link from react-router-dom:::5:::', () => { it(':::RJSCP79ATS_TEST_103:::When a random path is provided as the URL path, then the page should consist of an HTML button element with text content as ""Go to Home"":::5:::', () => { it(':::RJSCP79ATS_TEST_104:::When a random path is provided as the URL path and the ""Go to Home"" button is clicked, then the page should be navigated to Home Route and consists of an HTML main heading element with text content as ""Trending Now"":::10:::', async () => {  Tests from Login.js: it(':::RJSCP79ATS_TEST_55:::When ""/login"" is provided as the URL path by an unauthenticated user, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', async () => { it(':::RJSCP79ATS_TEST_56:::When ""/login"" is provided as the URL path by an authenticated user, then the page should consist of HTML image elements with alt and src as the values of the keys ""name"" and ""poster_path"" respectively from the trending now movies and originals response received:::15:::', async () => { it(':::RJSCP79ATS_TEST_57:::Login Route should consist of an HTML form element:::5:::', () => { it(':::RJSCP79ATS_TEST_58:::Login Route should consist of an HTML image element with alt attribute value as ""login website logo"":::5:::', () => { it(':::RJSCP79ATS_TEST_59:::Login Route should consist of an HTML input element with label text as ""USERNAME"" and type attribute value as ""text"":::5:::', () => { it(':::RJSCP79ATS_TEST_60:::Login Route should consist of an HTML input element with label text as ""PASSWORD"" and type attribute value as ""password"":::5:::', () => { it(':::RJSCP79ATS_TEST_61:::Login Route should consist of an HTML button element with text content as ""Login"" and type attribute value as ""submit"":::5:::', () => { it(':::RJSCP79ATS_TEST_62:::When a non-empty value is provided in the HTML input element with the label text as ""USERNAME"", then the value provided should be displayed in the HTML input element:::10:::', () => { it(':::RJSCP79ATS_TEST_63:::When a non-empty value is provided in the HTML input element with the label text as ""PASSWORD"", then the value provided should be displayed in the HTML input element:::10:::', () => { it(':::RJSCP79ATS_TEST_64:::When non-empty values are provided for username and password input and the Login button is clicked, an HTTP POST request should be made to Login API URL:::5:::', async () => { it(':::RJSCP79ATS_TEST_65:::When non-empty values are provided for username and password input and the Login button is clicked, then an HTTP POST request should be made to Login API URL with request object containing the keys ""username"" and ""password"" with the values provided respectively:::10:::', async () => { it(':::RJSCP79ATS_TEST_66:::When an invalid username and password are provided and the Login button is clicked, then the page should consist of an HTML paragraph element with text content as respective error message and the page should not be navigated:::10:::', async () => { it(':::RJSCP79ATS_TEST_67:::When a valid username and password are provided and the Login button is clicked, then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument:::15:::', async () => { it(':::RJSCP79ATS_TEST_68:::When a valid username and password are provided and the Login button is clicked, then the history.replace() method should be called with the argument ""/"":::15:::', async () => { it(':::RJSCP79ATS_TEST_69:::When a valid username and password are provided and the Login button is clicked, then the page should be navigated to Home Route and consist of HTML image elements with alt and src as the values of the keys ""name"" and ""poster_path"" from the trending now movies and originals responses received:::15:::', async () => {  Tests from enzyme.js: it(':::RJSCP79ATS_TEST_133:::When the HTTP GET request in the Home Route is successful, then the page should consist of ""Slider"" from ""react-slick"":::15:::', async () => { it(':::RJSCP79ATS_TEST_134:::When the HTTP GET request in the Home Route is successful, then the page should consist of ""Slider"" from ""react-slick"" and prop ""slidesToShow"" value should be 4:::15:::', async () => { it(':::RJSCP79ATS_TEST_135:::When the HTTP GET request in the Home Route is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""name"" and ""poster_path"" respectively from the trending now movies response received:::10:::', async () => { it(':::RJSCP79ATS_TEST_136:::When the HTTP GET request in the Home Route is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""name"" and ""poster_path"" respectively from the originals response received:::10:::', async () => { it(':::RJSCP79ATS_TEST_137:::Home Route should consist of an ""FaGoogle"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_138:::Popular Route should consist of an ""FaGoogle"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_139:::Movie Item Details Route should consist of an ""FaGoogle"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_140:::Account Route should consist of an ""FaGoogle"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_141:::Home Route should consist of an ""FaTwitter"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_142:::Home Route should consist of an ""FaInstagram"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_143:::Home Route should consist of an ""FaYoutube"" icon imported from the ""react-icons/fa"" package:::15:::', async () => { it(':::RJSCP79ATS_TEST_144:::Search Route should consist of an ""HiOutlineSearch"" icon imported from the ""react-icons/hi"" package:::15:::', async () => {  Tests from Home.js: it(':::RJSCP79ATS_TEST_35:::When the Home Route is opened, an HTTP GET request should be made to the Trending Now Movies API URL:::10:::', async () => { it(':::RJSCP79ATS_TEST_36:::When the Home Route is opened, an HTTP GET request should be made to the Originals API URL:::10:::', async () => { it(':::RJSCP79ATS_TEST_37:::When the HTTP GET request in the Home Route is successful, then the page should consist of an HTML main heading element with text content as the value of the key ""title"" taken randomly from received originals response:::10:::', async () => { it(':::RJSCP79ATS_TEST_38:::When the HTTP GET request in the Home Route is successful, then the page should consist of an HTML main heading element with text content as the value of the key ""overview"" taken randomly from received originals response:::10:::', async () => { it(':::RJSCP79ATS_TEST_39:::When ""/"" is provided as the URL path by an unauthenticated user, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', () => { it(':::RJSCP79ATS_TEST_40:::When ""/"" is provided as the URL path by an authenticated user, then the page should be navigated to Home Route and it consist of HTML image elements with alt and src as the values of the keys ""name"" and ""poster_path"" respectively from the trending now movies and originals responses received:::15:::', async () => { it(':::RJSCP79ATS_TEST_41:::Home Route should consist of an HTML main heading element with text content as ""Trending Now"":::5:::', async () => { it(':::RJSCP79ATS_TEST_42:::Home Route should consist of an HTML main heading element with text content as ""Originals"":::5:::', async () => { it(':::RJSCP79ATS_TEST_43:::When the Home Route is opened, an HTML container elements with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCP79ATS_TEST_44:::When the HTTP GET request in the Home Route is successful, then the page should consist of an HTML button element with text content as ""Play"":::10:::', async () => { it(':::RJSCP79ATS_TEST_45:::When the movie item in the trending now movies slider is clicked in the Home Route, then the page should be navigated to movieItemDetails Route with ""/movies/:id"" in the URL path:::10:::', async () => { it(':::RJSCP79ATS_TEST_46:::When the movie item in the original movies slider is clicked in the Home Route, then the page should be navigated to movieItemDetails Route with ""/movies/:id"" in the URL path:::10:::', async () => { it(':::RJSCP79ATS_TEST_47:::When the HTTP GET request made to Trending Now Movies API URL in the Home Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCP79ATS_TEST_48:::When the HTTP GET request made to Trending Now Movies API URL in the Home Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_49:::When the HTTP GET request made to Trending Now Movies API URL in the Home Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_50:::When the HTTP GET request made to Trending Now Movies API URL in the Home Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to Trending Now Movies API URL:::10:::', async () => { it(':::RJSCP79ATS_TEST_51:::When the HTTP GET request made to Originals API URL in the Home Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCP79ATS_TEST_52:::When the HTTP GET request made to Originals API URL in the Home Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_53:::When the HTTP GET request made to Originals API URL in the Home Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_54:::When the HTTP GET request made to Originals API URL in the Home Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to Originals API URL:::10:::', async () => {  Tests from Header.js: it(':::RJSCP79ATS_TEST_17:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"":::5:::', async () => { it(':::RJSCP79ATS_TEST_18:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"", wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_19:::Home Route should consist of at least one HTML unordered list element to display the list of nav items in the Header:::5:::', async () => { it(':::RJSCP79ATS_TEST_20:::Home Route should consist of HTML list elements to display the nav items in the Header:::5:::', async () => { it(':::RJSCP79ATS_TEST_21:::Home Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_22:::Popular Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_23:::Search Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_24:::Movie Item Details Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_25:::Account Route should consist of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_26:::Home Route should consist of an HTML element with text content as ""Popular"" wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP79ATS_TEST_27:::Home Route should consist of an HTML button element with testid attribute value as ""searchButton"" in the Header:::5:::', async () => { it(':::RJSCP79ATS_TEST_28:::Home Route should consist of an HTML image element in the Header with alt attribute value as ""profile"":::5:::', async () => { it(':::RJSCP79ATS_TEST_29:::When the website logo in the Header is clicked, then the page should be navigated to Home Route and consist of an HTML main heading element with text content as ""Trending Now"":::10:::', async () => { it(':::RJSCP79ATS_TEST_30:::When the Home link in the Header is clicked in the Popular Route, then the page should be navigated to Home Route and consist of an HTML main heading element with text content as ""Trending Now"":::10:::', async () => { it(':::RJSCP79ATS_TEST_31:::When the Home link in the Header is clicked in the Search Route, then the page should be navigated to Home Route and consist of an HTML main heading element with text content as ""Trending Now"":::10:::', async () => { it(':::RJSCP79ATS_TEST_32:::When the Home link in the Header is clicked in the Movie Item Details Route, then the page should be navigated to Home Route and consist of an HTML main heading element with text content as ""Trending Now"":::10:::', async () => { it(':::RJSCP79ATS_TEST_33:::When the Home link in the Header is clicked in the Account Route, then the page should be navigated to Home Route and consist of an HTML main heading element with text content as ""Trending Now"":::10:::', async () => { it(':::RJSCP79ATS_TEST_34:::When the Popular link in the Header is clicked in the Home Route, then the page should be navigated to Popular Route and consist of HTML image element with alt and src values as the values of the keys ""title"" in each option of the corresponding movie item received from the response:::10:::', async () => {  Tests from Footer.js: it(':::RJSCP79ATS_TEST_13:::Home Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => { it(':::RJSCP79ATS_TEST_14:::Popular Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => { it(':::RJSCP79ATS_TEST_15:::Movie Item Details Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => { it(':::RJSCP79ATS_TEST_16:::Account Route should consist of an HTML paragraph element in the footer with text content as ""Contact us"":::5:::', async () => {  Tests from Search.js: it(':::RJSCP79ATS_TEST_118:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request is successful, then the page should consist of at least two HTML list items, and the movies List should be rendered using a unique key as a prop to display each movie item respectively:::5:::', async () => { it(':::RJSCP79ATS_TEST_119:::When ""/search"" is provided as the URL path by an unauthenticated user, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', () => { it(':::RJSCP79ATS_TEST_120:::When ""/search"" is provided as the URL path by an authenticated user, then the page should be navigated to Search Route:::15:::', async () => { it(':::RJSCP79ATS_TEST_121:::When a non-empty value is provided in an HTML input element for search and an HTML button element with testid attribute value as ""searchButton"" is clicked, an HTTP GET request should be made to the Search Movies API URL with the value provided in the search input element as the value to query parameter ""query"":::15:::', async () => { it(':::RJSCP79ATS_TEST_122:::Search Route should consist of an HTML search input element with type attribute value as ""search"":::5:::', async () => { it(':::RJSCP79ATS_TEST_123:::When a non-empty value is provided in an HTML search input element for search and an HTML button element with testid attribute value as ""searchButton"" is clicked, an HTML container element with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCP79ATS_TEST_124:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route is successful, then the page should consist of an HTML unordered list element to display the movies List received from the search movies response:::10:::', async () => { it(':::RJSCP79ATS_TEST_125:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route is successful, then the page should consist of an image element with alt and src as the values of the keys ""title"" and ""poster_path"" from the search movies response received:::10:::', async () => { it(':::RJSCP79ATS_TEST_126:::When the movie item is clicked in the Search Route, then the page should be navigated to Movie Item Details Route with ""/movies/:id"" in the URL path:::10:::', async () => { it(':::RJSCP79ATS_TEST_127:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route returns the movies list as empty, then the page should consist of an HTML image element with alt attribute value as ""no movies"":::5:::', async () => { it(':::RJSCP79ATS_TEST_128:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route returns the movies list as empty, then the page should consist of an HTML paragraph element with text content as ""Your search for {searchValue} did not find any matches."":::5:::', async () => { it(':::RJSCP79ATS_TEST_129:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCP79ATS_TEST_130:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route is unsuccessful, then the page should consist of an HTML main heading element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_131:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_132:::When a non-empty value is provided in search input and search button is clicked and the HTTP GET request in the Search Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to Search Movies API URL:::10:::', async () => {  Tests from MovieItemDetails.js: it(':::RJSCP79ATS_TEST_70:::When HTTP GET request in the movieItemDetails Route is successful, then the page should consist of at least two HTML list items, and the Genres List, Spoken Languages List and Similar Movies List should be rendered using a unique key as a prop to display each genre, spoken language and similar movie item respectively:::5:::', async () => { it(':::RJSCP79ATS_TEST_71:::When the Movie Item Details Route is opened, an HTTP GET request should be made to the Movie Item Details API URL:::10:::', async () => { it(':::RJSCP79ATS_TEST_72:::When ""/movies/:id"" is provided as the URL path by an unauthenticated user, then the page should be navigated to Login Route and should consist of an HTML button element with text content as ""Login"":::15:::', () => { it(':::RJSCP79ATS_TEST_73:::When ""/movies/:id"" is provided as the URL path by an authenticated user, then the page should be navigated to movieItemDetails Route and should consist of an HTML main heading element with text content as the value of the key ""title"" from received movieItemDetails response:::15:::', async () => { it(':::RJSCP79ATS_TEST_74:::Movie Item Details Route should consist of an HTML button element with text content as ""Play"":::5:::', async () => { it(':::RJSCP79ATS_TEST_75:::Movie Item Details Route should consist of an HTML main heading element with text content as ""More like this"":::5:::', async () => { it(':::RJSCP79ATS_TEST_76:::Movie Item Details Route should consist of an HTML main heading element with text content as ""genres"":::5:::', async () => { it(':::RJSCP79ATS_TEST_77:::Movie Item Details Route should consist of an HTML main heading element with text content as ""Audio Available"":::5:::', async () => { it(':::RJSCP79ATS_TEST_78:::Movie Item Details Route should consist of an HTML main heading element with text content as ""Rating Count"":::5:::', async () => { it(':::RJSCP79ATS_TEST_79:::Movie Item Details Route should consist of an HTML main heading element with text content as ""Rating Average"":::5:::', async () => { it(':::RJSCP79ATS_TEST_80:::Movie Item Details Route should consist of an HTML main heading element with text content as ""Budget"":::5:::', async () => { it(':::RJSCP79ATS_TEST_81:::Movie Item Details Route should consist of an HTML main heading element with text content as ""Release Date"":::5:::', async () => { it(':::RJSCP79ATS_TEST_82:::When the Movie Item Details Route is opened, an HTML container element with testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress:::5:::', async () => { it(':::RJSCP79ATS_TEST_83:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an least two HTML unordered list elements to display Genres List, Spoken Languages List and Similar Movies List received from the movieItemDetails response:::10:::', async () => { it(':::RJSCP79ATS_TEST_84:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML main heading element with text content as the value of the key ""title"" from the received movieItemDetails response:::10:::', async () => { it(':::RJSCP79ATS_TEST_85:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content based on the value of the key ""runtime"" from the received movieItemDetails response should be converted from minutes to hours and minutes:::5:::', async () => { it(':::RJSCP79ATS_TEST_86:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content based on the value of the key ""adult"" from the movieItemDetails response is true then it should be displayed as A. otherwise, it should be displayed as U/A:::5:::', async () => { it(':::RJSCP79ATS_TEST_87:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as year deriving from the value of the key ""release_date"" from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_88:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""overview"" from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_89:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph elements with text content as the value of the key ""name"" in genres from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_90:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph elements with text content as the value of the key ""english_name"" in spoken_languages from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_91:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""vote_count"" from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_92:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""vote_average"" from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_93:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""budget"" from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_94:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""release_date"" from the received movieItemDetails response:::5:::', async () => { it(':::RJSCP79ATS_TEST_95:::When the HTTP GET request in the Movie Item Details Route is successful, then the page should consist of an HTML image elements with alt and src as the values of the keys ""title"" and ""poster_path"" respectively in ""similar_movies"" from the received Movie Item Details response:::10:::', async () => { it(':::RJSCP79ATS_TEST_96:::When the HTTP GET request made to movieItemDetailsApiUrl in the Movie Item Details Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"":::5:::', async () => { it(':::RJSCP79ATS_TEST_97:::When the HTTP GET request made to movieItemDetailsApiUrl in the Home Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""Something went wrong. Please try again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_98:::When the HTTP GET request made to movieItemDetailsApiUrl in the Home Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Try Again"":::5:::', async () => { it(':::RJSCP79ATS_TEST_99:::When the HTTP GET request made to movieItemDetailsApiUrl in the Home Route is unsuccessful and the ""Try Again"" button is clicked, then an HTTP GET request should be made to Movie Item Details API URL:::10:::', async () => { '"
0228b6e670ff419dad990957bbe04296,fetchAndRoutingPractice,RJSCP07F3V,/home/workspace/reactjs/coding-practices/fetchAndRoutingPractice,/home/workspace/.tmp/reactjs/coding-practices/fetchAndRoutingPractice/src,,"Tests from react-routing-individualblogroute.js: it(':::RJSCP07F3V_TEST_1:::Page should consist of at least two HTML list items and the blogsList data should be rendered using a unique key as a prop for each blog item:::5:::', async () => { it(':::RJSCP07F3V_TEST_2:::Page should consist of a Link from react-router-dom in the header with ""Home"" as text content:::5:::', async () => { it(':::RJSCP07F3V_TEST_3:::Page should consist of a Link from react-router-dom in the header with ""About"" as text content:::5:::', async () => { it(':::RJSCP07F3V_TEST_4:::Page should consist of a Link from react-router-dom in the header with ""Contact"" as text content:::5:::', async () => { it(':::RJSCP07F3V_TEST_5:::When the Home Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"":::5:::', async () => { it(':::RJSCP07F3V_TEST_6:::When the ""/about"" is provided in the browser tab, then the page should be navigated to About Route and consist of an HTML heading element with ""About"" as text content:::5:::', async () => { it(':::RJSCP07F3V_TEST_7:::When the ""/contact"" is provided in the browser tab, then the page should be navigated to Contact Route and consist of an HTML heading element with ""Contact"" as text content:::5:::', async () => { it(':::RJSCP07F3V_TEST_8:::When the ""/bad-path"" is provided in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML heading element with ""Not Found"" as text content:::5:::', async () => { it(':::RJSCP07F3V_TEST_9:::When the About link in the header is clicked, then the page should be navigated to About Route with ""/about"" in URL path:::5:::', async () => { it(':::RJSCP07F3V_TEST_10:::When the Contact link in the header is clicked, then the page should be navigated to Contact Route with ""/contact"" in URL path:::5:::', async () => { it(':::RJSCP07F3V_TEST_11:::When the Home link in the header is clicked, then the page should be navigated to Home Route with ""/"" in URL path:::5:::', async () => { it(':::RJSCP07F3V_TEST_12:::Page should consist of an HTML heading element with ""Wade Warren"" as text content when rendering Home Route initially:::5:::', async () => { it(':::RJSCP07F3V_TEST_13:::Page should consist of an HTML image element with alt text as ""profile"":::5:::', async () => { it(':::RJSCP07F3V_TEST_14:::Page should consist of an HTML image element in the header with the given logo URL as src and alt text as ""wave"":::5:::', async () => { it(':::RJSCP07F3V_TEST_15:::Home Route should consist of HTML heading elements with text content as the value of the ""title"" key received in the API response:::5:::', async () => { it(':::RJSCP07F3V_TEST_16:::Home Route should consist of HTML paragraph elements with text content as the value of the ""author"" key received in response for each blog item:::5:::', async () => { it(':::RJSCP07F3V_TEST_17:::When the page is loaded initially an HTTP GET request should be made to the given apiUrl:::5:::', async () => { it(':::RJSCP07F3V_TEST_18:::Each blog item should be wrapped with Link from react-router-dom:::5:::', async () => { it(':::RJSCP07F3V_TEST_19:::When a blog item is clicked in Home Route, then the page should be navigated to the Blog Item Details Route with ""/blogs/:id"" in the URL:::5:::', async () => { it(':::RJSCP07F3V_TEST_20:::When ""/blogs/:id"" is provided in the URL, then the page should be navigated to the Blog Item Details Route and consist of an HTML heading element with text content as the value of the ""title"" key received in the API response:::5:::', async () => { it(':::RJSCP07F3V_TEST_21:::When navigated to a blog post, then the page should consist of an HTML image element with alt as the value of the ""title"" key and src as the value of the ""image_url"" key received in the API response:::5:::', async () => { it(':::RJSCP07F3V_TEST_22:::When navigated to a blog post, then the page should consist of an HTML paragraph element with text content as the value of the ""content"" key received in the API response:::5:::', async () => { '"
5be72c85a9bf448eb7532b3e9107a5c7,registrationForm,RJSCPYGCFL,/home/workspace/reactjs/coding-practices/registrationForm,/home/workspace/.tmp/reactjs/coding-practices/registrationForm/src,,"Tests from RegistrationForm.js: it(':::RJSCPYGCFL_TEST_1:::Page should consist of an HTML heading element with ""Registration"" as text content:::5:::', () => { it(':::RJSCPYGCFL_TEST_2:::Page should consist of an HTML input element with label text as ""FIRST NAME"":::5:::', () => { it(':::RJSCPYGCFL_TEST_3:::Page should consist of an HTML input element with label text as ""LAST NAME"":::5:::', () => { it(':::RJSCPYGCFL_TEST_4:::When a non-empty first name is provided and the submit button is clicked with empty last name then the page should consist of an HTML paragraph element with ""Required"" as text content:::5:::', () => { it(':::RJSCPYGCFL_TEST_5:::When the submit button is clicked with empty fields then the error message ""Required"" should be displayed for both the input fields:::5:::', () => { it(':::RJSCPYGCFL_TEST_6:::When a non-empty last name is provided and the submit button is clicked with empty first name then the error message ""Required"" should be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_7:::On successful submission, an HTML paragraph element with ""Submitted Successfully"" as text content should be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_8:::On successful submission, an HTML image element with the given image URL and alt text as ""success"" should be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_9:::When ""Submit Another Response"" button is clicked then the registration form should be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_10:::When the empty first name field is blurred then the error message ""Required"" should be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_11:::When the empty last name field is blurred then the error message ""Required"" should be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_12:::When both the first and last name fields are empty and blurred then the error message ""Required"" should be displayed for both fields:::5:::', () => { it(':::RJSCPYGCFL_TEST_13:::When a non-empty first name is provided and blurred then the error message should not be displayed:::5:::', () => { it(':::RJSCPYGCFL_TEST_14:::When both the first and last names are provided and blurred then the error message should not be displayed for both fields:::5:::', () => { '"
60313a6e2103462498a2fbc0cf6c841d,reusableBanners,RJSCPFTHY7,/home/workspace/reactjs/coding-practices/reusableBannersApp,/home/workspace/.tmp/reactjs/coding-practices/reusableBannersApp/src,,"Tests from ReusableBanners.js: it(':::RJSCPFTHY7_TEST_1:::Page should consist of at least two HTML list items and the bannerCardsList should be rendered using a unique key as a prop for each banner card item:::5:::', () => { it(':::RJSCPFTHY7_TEST_2:::Each banner card item on the page should consist of an HTML paragraph element with the given text content:::5:::', () => { it(':::RJSCPFTHY7_TEST_3:::Each banner card item on the page should consist of at least an HTML button element with the text content as ""Show More"":::5:::', () => { it(':::RJSCPFTHY7_TEST_4:::Each banner card item should consist of an HTML list item with the given class name:::5:::', () => { it(':::RJSCPFTHY7_TEST_5:::Page should consist of three HTML main heading elements with the given text content:::5:::', () => { it(':::RJSCPFTHY7_TEST_6:::Page should consist of at least three HTML button elements with text content as ""Show More"":::5:::', () => { it(':::RJSCPFTHY7_TEST_7:::Page should consist of three HTML paragraph elements with the given text content:::5:::', () => { it(':::RJSCPFTHY7_TEST_8:::Page should consist of HTML list items with the given class names in bannerCardsList:::5:::', () => { '"
f9c59d4d05ad49ebb951a8fdb5e422a7,reviewsApp,RJSCPUPPE1,/home/workspace/reactjs/coding-practices/reviewsApp,/home/workspace/.tmp/reactjs/coding-practices/reviewsApp/src,,"Tests from Reviews.js: it(':::RJSCPUPPE1_TEST_1:::Page should consist of HTML heading element with text content as ""Reviews"":::5:::', () => { it(':::RJSCPUPPE1_TEST_2:::Page should consist of HTML button element with data-testid attribute value as ""leftArrow"":::5:::', () => { it(':::RJSCPUPPE1_TEST_3:::Page should consist of HTML button element with data-testid attribute value as ""rightArrow"":::5:::', () => { it(':::RJSCPUPPE1_TEST_4:::Page should consist of HTML image element with alt as ""left arrow"" and src attribute value as URL for left arrow image:::5:::', () => { it(':::RJSCPUPPE1_TEST_5:::Page should consist of HTML image element with alt as ""right arrow"" and src attribute value as URL for right arrow image:::5:::', () => { it(':::RJSCPUPPE1_TEST_6:::Page should initially display the first review, and consist of HTML image element with alt value equal to the ""username"" value in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_7:::Page should initially display the first review, and consist of HTML image element with alt value equal to the ""username"" and src attribute value equal to the ""imgUrl"" value in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_8:::Page should initially display the first review, and consist of HTML paragraph element with text content equal to the ""username"" value in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_9:::Page should initially display the first review, and consist of HTML paragraph element with text content equal to the ""companyName"" value in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_10:::Page should initially display the first review, and consist of HTML paragraph element with text content equal to the ""description"" value in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_11:::When the right arrow is clicked, the page should consist of an HTML image element with alt value equal to the ""username"" and src attribute value equal to the ""imgUrl"" value of the next review in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_12:::When the right arrow is clicked, the page should consist of HTML paragraph elements with ""username"", ""companyName"", and ""description"" of the next review in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_13:::When the left arrow is clicked, the page should consist of an HTML image element with alt attribute value equal to the ""imgUrl"" value of the previous review in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_14:::When the left arrow is clicked, the page should consist of HTML paragraph elements with ""username"", ""companyName"", and ""description"" of the previous review in reviewsList provided:::5:::', () => { it(':::RJSCPUPPE1_TEST_15:::When viewing the first review, there should not be any state change when the HTML button element with data-testid attribute value as ""leftArrow"" is clicked:::5:::', () => { it(':::RJSCPUPPE1_TEST_16:::When viewing the last review, there should not be any state change when the HTML button element with data-testid attribute value as ""rightArrow"" is clicked:::5:::', () => { '"
760ee794edc5478cb2abc14c182c35ba,blogList,RJSCP4WKCF,/home/workspace/reactjs/coding-practices/blogList,/home/workspace/.tmp/reactjs/coding-practices/blogList/src,,"Tests from routing-bloglist.js: it(':::RJSCP4WKCF_TEST_1:::Page should consist of at least two HTML list items and the blogsList should be rendered using a unique key as a prop for each blog item:::5:::', () => { it(':::RJSCP4WKCF_TEST_2:::Page should consist of a Link from react-router-dom in the header with ""Home"" as text content:::5:::', () => { it(':::RJSCP4WKCF_TEST_3:::Page should consist of a Link from react-router-dom in the header with ""About"" as text content:::5:::', () => { it(':::RJSCP4WKCF_TEST_4:::Page should consist of a Link from react-router-dom in the header with ""Contact"" as text content:::5:::', () => { it(':::RJSCP4WKCF_TEST_5:::When the ""/about"" is provided in the browser tab then the page should be navigated to AboutRoute and consists of an HTML heading element with ""About"" as text content:::5:::', () => { it(':::RJSCP4WKCF_TEST_6:::When the ""/contact"" is provided in the browser tab then the page should be navigated to ContactRoute and consists of an HTML heading element with ""Contact"" as text content:::5:::', () => { it(':::RJSCP4WKCF_TEST_7:::When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consists of an HTML heading element with ""Not Found"" as text content:::5:::', () => { it(':::RJSCP4WKCF_TEST_8:::When the About link in the header is clicked then the page should be navigated to AboutRoute with ""/about"" in URL path:::5:::', () => { it(':::RJSCP4WKCF_TEST_9:::When the Contact link in the header is clicked then the page should be navigated to ContactRoute with ""/contact"" in URL path:::5:::', () => { it(':::RJSCP4WKCF_TEST_10:::When the Home link in the header is clicked then the page should be navigated to HomeRoute with ""/"" in URL path:::5:::', () => { it(':::RJSCP4WKCF_TEST_11:::Page should consist of an HTML heading element with ""Wade Warren"" as text content when rendering HomeRoute initially:::5:::', () => { it(':::RJSCP4WKCF_TEST_12:::Page should consist of an HTML image element with alt text as ""profile"":::5:::', () => { it(':::RJSCP4WKCF_TEST_13:::Page should consist of an HTML image element in the header with the given logo URL as src and alt text as ""wave"":::5:::', () => { it(':::RJSCP4WKCF_TEST_14:::Home Route should consist of HTML heading elements with text content equal to the ""title"" in blogsList provided:::5:::', () => { it(':::RJSCP4WKCF_TEST_15:::Home Route should consist of at least five HTML paragraph elements with text content equal to the ""description"" in blogsList provided:::5:::', () => { '"
6b1f50ce43b94d8797fec1df1f5b1d04,primeVideo,RJSCPDXAGS,/home/workspace/reactjs/coding-practices/primeVideo,/home/workspace/.tmp/reactjs/coding-practices/primeVideo/src,,"Tests from test.js: it(':::RJSCPDXAGS_TEST_19:::When any thumbnail in the moviesList is clicked, then the page should consist of ReactPlayer component from react-player:::5:::', () => {  Tests from App.js: it(':::RJSCPDXAGS_TEST_1:::Page should consist of an HTML image element with alt attribute value as ""prime video"":::5:::', () => { it(':::RJSCPDXAGS_TEST_2:::Page should consist of an HTML main heading element with text content as ""Action Movies"":::5:::', () => { it(':::RJSCPDXAGS_TEST_3:::Page should consist of an HTML image element with src as given prime video image URL:::5:::', () => { it(':::RJSCPDXAGS_TEST_4:::Page should consist of at least four HTML image elements with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided:::5:::', () => { it(':::RJSCPDXAGS_TEST_5:::Page should consist of an HTML main heading element with text content as ""Comedy Movies"":::5:::', () => { it(':::RJSCPDXAGS_TEST_6:::When the next arrow button is clicked in Action Movies Slider, the page should consist of the next HTML image element with alt attribute value as ""thumbnail"":::5:::', () => { it(':::RJSCPDXAGS_TEST_7:::Page should consist of at least four HTML image elements with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""COMEDY"" in the ""moviesList"" provided:::5:::', () => { it(':::RJSCPDXAGS_TEST_8:::Page should consist of at least two Slider components from react-slick:::5:::', () => { it(':::RJSCPDXAGS_TEST_9:::When the next arrow button is clicked in Action Movies Slider, the page should consist of the next HTML image element with src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided:::5:::', () => { it(':::RJSCPDXAGS_TEST_10:::When the previous arrow button is clicked in Action Movies Slider, the page should consist of the previous HTML image element with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided:::5:::', () => { it(':::RJSCPDXAGS_TEST_11:::When the next arrow button is clicked in Comedy Movies Slider, the page should consist of the next HTML image element with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided:::5:::', () => { it(':::RJSCPDXAGS_TEST_12:::When the previous arrow button is clicked in Comedy Movies Slider, the page should consist of the next HTML image element with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided:::5:::', () => { it(':::RJSCPDXAGS_TEST_13:::When a thumbnail is clicked from Action Movies List, then the page should consist of Popup from reactjs-popup:::5:::', () => { it(':::RJSCPDXAGS_TEST_14:::When a thumbnail is clicked from Action Movies List, then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"":::5:::', () => { it(':::RJSCPDXAGS_TEST_15:::JS code implementation for MovieItem Component should use ""IoMdClose"" from the react-icons package:::5:::', () => { it(':::RJSCPDXAGS_TEST_16:::When a thumbnail is clicked from Comedy Movies List, then the page should consist of Popup from reactjs-popup:::5:::', () => { it(':::RJSCPDXAGS_TEST_17:::When a thumbnail is clicked from Comedy Movies List, then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"":::5:::', () => { it(':::RJSCPDXAGS_TEST_18:::When the close button is clicked inside the popup, then the page should not consist of Popup from reactjs-popup:::5:::', () => { '"
3ed2ecffb8a448e5816992d44dbed46a,congratsCard,RJSCPKTLF1,/home/workspace/reactjs/coding-practices/congratsCardApp,/home/workspace/.tmp/reactjs/coding-practices/congratsCardApp/src,,
cb345ff9ef2d447fb2c90dd181faff73,cowinDashboard,RJSCP2FAS0,/home/workspace/reactjs/coding-practices/cowinDashboard,/home/workspace/.tmp/reactjs/coding-practices/cowinDashboard/src,,
c50f2ec550c54a9d975065e5db15df5f,cryptoCurrencyTracker,RJSCPUAF4D,/home/workspace/reactjs/coding-practices/cryptoCurrencyTracker,/home/workspace/.tmp/reactjs/coding-practices/cryptoCurrencyTracker/src,,
fc63b16c3c9042a886b12c8c07b7f19a,debuggingCashWithdrawal,RJSCPZ1R1E,/home/workspace/reactjs/coding-practices/debuggingCashWithdrawal,/home/workspace/.tmp/reactjs/coding-practices/debuggingCashWithdrawal/src,,
e340eede02d44977a70a60511f5439c7,debuggingFetchAndRouting,RJSCPAYVCK,/home/workspace/reactjs/coding-practices/debuggingFetchAndRouting,/home/workspace/.tmp/reactjs/coding-practices/debuggingFetchAndRouting/src,,
b2a98dfdcc4044b3978cd66cb75f49c3,simpleTodos,RJSCP1Q3F3,/home/workspace/reactjs/coding-practices/deleteTodo,/home/workspace/.tmp/reactjs/coding-practices/deleteTodo/src,,
771ff767c86042229c85fb5adb3db588,instaShare,RJSCPIHAM7,/home/workspace/reactjs/coding-practices/instaShare,/home/workspace/.tmp/reactjs/coding-practices/instaShare/src,,
8dc2f91b2b6c4ab7a3446c8f29ebf75d,notifications,RJSCPCMYYO,/home/workspace/reactjs/coding-practices/notificationsApp,/home/workspace/.tmp/reactjs/coding-practices/notificationsApp/src,,
600c9228272d423c957289dced4533b6,nxtmart,RJSCPJ56GW,/home/workspace/reactjs/coding-practices/nxtmart,/home/workspace/.tmp/reactjs/coding-practices/nxtmart/src,,
2d3c0cf5ff96410f8f1199364256a2f5,show/HideApp,RJSCP8DO88,/home/workspace/reactjs/coding-practices/showHideApp,/home/workspace/.tmp/reactjs/coding-practices/showHideApp/src,,
b2a98dfdcc4044b3978cd66cb75f49c3,simpleTodos,RJSCP1Q3F3,/home/workspace/reactjs/coding-practices/simpleTodos,/home/workspace/.tmp/reactjs/coding-practices/simpleTodos/src,,
e27694fd256d4c87823b18b60079353b,socialButtons,RJSCPJK1TN,/home/workspace/reactjs/coding-practices/socialButtonsApp,/home/workspace/.tmp/reactjs/coding-practices/socialButtonsApp/src,,
1fd38a6eb5be440d8d6141e31d79e1e3,speedometer,RJSCPZS9RB,/home/workspace/reactjs/coding-practices/speedometer,/home/workspace/.tmp/reactjs/coding-practices/speedometer/src,,
2df12c1bcb4247beaad67987d70ca595,stopwatch,RJSCP7SC0R,/home/workspace/reactjs/coding-practices/stopwatch,/home/workspace/.tmp/reactjs/coding-practices/stopwatch/src,,
b8312245c9914f0a928852d4706f9539,superOverLeague,RJSCPTQ3N6,/home/workspace/reactjs/coding-practices/superOverLeagueApp,/home/workspace/.tmp/reactjs/coding-practices/superOverLeagueApp/src,,
adac8a09b6384e2482cffd7bc9b3220c,tastyKitchens,RJSCPP63AV,/home/workspace/reactjs/coding-practices/tastyKitchensApp,/home/workspace/.tmp/reactjs/coding-practices/tastyKitchensApp/src,,
7449e44912c94dfe8f7ecd0ee9dfd19e,techEra,RJSCEMN6X9,/home/workspace/reactjs/coding-practices/techEra,/home/workspace/.tmp/reactjs/coding-practices/techEra/src,,
633855c6827345d5ab9787c5b9990622,technologyCards,RJSCPUPP7H,/home/workspace/reactjs/coding-practices/technologyCards,/home/workspace/.tmp/reactjs/coding-practices/technologyCards/src,,
8f6980fd0b04402e8dd70b9568cda014,travelGuide,RJSCET6A77,/home/workspace/reactjs/coding-practices/travelGuide,/home/workspace/.tmp/reactjs/coding-practices/travelGuide/src,,
96b57ca0fcf54dcca2d478809d09771e,traveltrip,RJSCPV0V3Y,/home/workspace/reactjs/coding-practices/traveltrip,/home/workspace/.tmp/reactjs/coding-practices/traveltrip/src,,
99198e515bf64189a5d9f25b8eedf52f,visitCountries,RJSCELYBMA,/home/workspace/reactjs/coding-practices/visitCountries,/home/workspace/.tmp/reactjs/coding-practices/visitCountries/src,,
4bdcfe2c3ad84dd695eedf01005052b8,routingPractice,RJSCP4WYNC,/home/workspace/reactjs/coding-practices/routingPractice,/home/workspace/.tmp/reactjs/coding-practices/routingPractice/src,,
3b4aefef908b446ca1beb15d1252b831,welcomeApp,RJSCPRQUI5,/home/workspace/reactjs/coding-practices/welcomeApp,/home/workspace/.tmp/reactjs/coding-practices/welcomeApp/src,,
2346a885bc674ec59bd9cb2e401bbd79,covid19Dashboard,RJSCPAUCLT,/home/workspace/reactjs/coding-practices/covid19Dashboard,/home/workspace/.tmp/reactjs/coding-practices/covid19Dashboard/src,,
4198c0514cde4ee49368d09a6601250b,notesApp,RHSCPRXHNW,/home/workspace/reactjs/coding-practices/notesApp,/home/workspace/.tmp/reactjs/coding-practices/notesApp/src,,
8d1143f9734c410bb626a92944f6a5a0,creditCard,RHSCPEP458,/home/workspace/reactjs/coding-practices/creditCard,/home/workspace/.tmp/reactjs/coding-practices/creditCard/src,,
4b77d4ac4dad46949e951aaaf30a0656,textEditor,RJSCE98XPC,/home/workspace/reactjs/coding-practices/textEditor,/home/workspace/.tmp/reactjs/coding-practices/textEditor/src,,
e63215b802c949788806cbe168cf5314,unlockLockApp,RHSCPJF63M,/home/workspace/reactjs/coding-practices/unlockLockApp,/home/workspace/.tmp/reactjs/coding-practices/unlockLockApp/src,,
387990bdc74d4c49b3f75d305c4582d5,spotifyRemix,RJSCP2G83E,/home/workspace/reactjs/coding-practices/spotifyRemix,/home/workspace/.tmp/reactjs/coding-practices/spotifyRemix/src,,
660760fec9d24932b5f129b333ce0887,characterCounter,RJSCEGBK15,/home/workspace/reactjs/coding-practices/characterCounter,/home/workspace/.tmp/reactjs/coding-practices/characterCounter/src,,
546e39ef72ab4fbb816c3af3d86a164b,editableTextInput,RJSCPM1V9K,/home/workspace/reactjs/coding-practices/editableTextInput,/home/workspace/.tmp/reactjs/coding-practices/editableTextInput/src,,
e219ee7161f049f5a1938d3ab5dbc809,nxtAssess,RJSCPU2OLA,/home/workspace/reactjs/coding-practices/nxtAssess,/home/workspace/.tmp/reactjs/coding-practices/nxtAssess/src,,
537fa75bdb17411094284167fd290112,quizgame,RJSCP0BUMB,/home/workspace/reactjs/coding-practices/quizgame,/home/workspace/.tmp/reactjs/coding-practices/quizgame/src,,
cf5776117cc14c1ab5714de6f67a81e3,dailyMoodTracker,RJSCPYRQPJ,/home/workspace/reactjs/coding-practices/dailyMoodTracker,/home/workspace/.tmp/reactjs/coding-practices/dailyMoodTracker/src,,
273ff8a4af0243e087cbff74a3c2a759,githubProfileVisualizer,RJSCPXLLA7,/home/workspace/reactjs/coding-practices/githubProfileVisualizer,/home/workspace/.tmp/reactjs/coding-practices/githubProfileVisualizer/src,,
